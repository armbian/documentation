{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Linux for ARM development boards</p>"},{"location":"#preface","title":"Preface","text":"<p>Welcome to the official documentation of Armbian Linux, a highly optimized base operating system specialized for single board computers (SBCs) and its extensive build framework.</p>"},{"location":"#how-is-the-documentation-structured","title":"How is the documentation structured?","text":"<p>The table of contents in the sidebar and the links at the top of the page should let you easily access the documentation for your topic of interest.</p> <p>If you are new to Armbian, the Introduction and the Getting Started sections provide everything you need to know about the project, where to find the resources for your board, and a tutorial for everything you need to get Armbian running and configured.</p> <p>It then continues on to Advanced Configuration tasks and tools for advanced users. The topics in this section cover a wide range of tasks: configuring the system or the network without using <code>armbian-config</code>, configuring your device automatically at first boot, and creating a custom image using the <code>Armbian Build Framework</code>.</p> <p>If you have read through the documentation and still need help, check out our Troubleshooting advice.</p>"},{"location":"#where-to-find-additional-help","title":"Where to find additional help?","text":"<p>If you still cannot find what you need here, visit the Armbian forum where your input can also help us improving this documentation.</p>"},{"location":"#how-to-report-a-problem-in-this-documentation","title":"How to report a problem in this documentation?","text":"<p>If you come across an issue in these pages, you can either report it here, or follow these instructions to suggest a fix yourself.</p>"},{"location":"#what-is-armbian","title":"What is Armbian?","text":"<p>Armbian\u2019s goal is to provide a highly optimized base operating system specialized for single board computers. It embodies extremely lightweight hardware features with a well-known and supported Debian-based user-space experience, an extensive build framework, and it is suitable for industrial or home use.</p> <p>Armbian is not a Linux distribution itself. Instead, we use Debian GNU/Linux and Ubuntu Linux as base for the images, that our users can download and deploy. We build our own set of optimized kernels for each board, and then provide an extensive and customizable framework to build, adjust, and configure these images. This framework is the heart of the project.</p> <pre><code>graph LR\n  A[Hardware] --&gt; B{50 x Armbian kernel};\n  B --&gt; X[\"point release\"];\n  X ----&gt;|minimal| E[Debian or Ubuntu];\n  X ----&gt;|server| F[Debian or Ubuntu];\n  X --&gt;|desktop| H[Debian or Ubuntu];\n  H --&gt;Q[XFCE];\n  H --&gt;W[Gnome];\n  H --&gt;R[KDE];\n  H --&gt;T[Cinnamon];\n</code></pre>"},{"location":"#key-features","title":"Key features","text":"<p>As a user, you can simply download one of our images, deploy and run it on your SBC. As an advanced user, a manufacturer or provider, you can create fully configured custom images for your board or product.</p> <p>In any case, you will get these key advantages:</p> <ul> <li>you get a lean and standard Debian or Ubuntu based user space with the well known APT package manager</li> <li>we provide independent kernel development and maintenance with long term support</li> <li>we provide an extensive build framework with fast hybrid assembly of the whole operating system and endless capabilities</li> <li>we provide advanced hardware and OS configuration and software installation with the built-in armbian-config tool</li> <li>we provide exclusive support for exotic hardware that nobody else supports</li> <li>we provide stabilized point and rolling distribution of upgrades and OS images</li> <li>we provide a global download infrastructure with perfect coverage, also in China mainland</li> <li>we provide an extensive build infrastructure to assist in CI automation</li> <li>we do daily automated stress and upgrade testing on key hardware targets</li> <li>we have strong ties to embedded Linux</li> </ul> Other features and performance tweaks worth mentioning <ul> <li>Images are highly compressed and automatically expand across the boot media at first boot</li> <li>Preinstalled standard system utilities like BASH or ZSH shell</li> <li>Login is possible via serial, HDMI/VGA or SSH</li> <li>Custom login MOTD showing a collection of important information</li> <li><code>/var/log</code> is mounted as compressed device (zram, lzo) and the log2ram service saves the logs to disk daily and on shutdown</li> <li>Half of the memory is allocated/extended for/with compressed zswap</li> <li><code>/tmp</code> is mounted as <code>tmpfs</code> (and can be optionally compressed)</li> <li>Browser profile memory caching is enabled on desktop images</li> <li>Optimized IO scheduler (check <code>/etc/init.d/armhwinfo</code>)</li> <li>Journal data writeback is enabled (<code>/etc/fstab</code>)</li> <li>Ethernet interrupts are using a dedicated core</li> </ul>"},{"location":"#comparison","title":"Comparison","text":"Distributions Armbian Downstream Upstream Primary focus making a value sales, profiting making a value User-space clean &amp; minimal bloated with proprietary scripts clean Experience across hardware universal, predictable, reproducible random, chaotic, manually assembled porting, unofficial builds Contributing to FOSS extreme close to none great System config universal proprietary all / none Maintenance modular with review and unit tests endless spaghetti code traditional and modern Build framework advanced and user friendly none none Hardware maintainers 50+, teams per SoC, per vendor none none Upstream contribution 1000+ none little Downstream projects 10+ none 100+ Switching to upstream easy impossible / User-space changes standard proprietary standard Initial memory usage optimal bad bad Process usage optimal only hidden too broad Pre-installed packages optimized for fast install makes install of anything slower optimized for fast install Declaring support where we know maintainers everything is \u201csupported\u201d everything is \u201csupported\u201d"},{"location":"#which-hardware-is-supported","title":"Which hardware is supported?","text":"<p>Armbian distributes stable images for many different single board computers (SBCs). But not each model receives the same amount of support and maintenance. This might be due to lack of man-power, lack of support by the manufacturer, etc. We have therefore a system that shows the support status for each board:</p> <p>Platinum Support</p> <p>At least one person is providing constant maintenance and support.</p> <p>Standard Support</p> <p>Support is not secured, but it is still overall good.</p> <p>Community maintained</p> <p>Most of the images for boards in this category will also work, but no warranty can be given as Armbian does not monitor their status.</p> <p>Supported / maintained is not a guarantee, though. It merely implies that a particular SBC is at a high level of software maturity and has a named maintainer. Due to the complexity and lack of cooperation in the ecosystem, it is unlikely that all specialized functionalities (like 3D, VE, I\u00b2C\u2026) are always available.</p> <p>For more information see the Board Support Guide</p>"},{"location":"#where-to-find-images-and-sources","title":"Where to find images and sources?","text":"<p>Our main website is https://www.armbian.com/. It is the default site for our users, and it contains the download section with all images, information about the support status for each board, links to our forum and this documentation.</p> <p>The project sources are hosted on GitHub and are organized in separate Git repositories. These are the resources for developers and participants, e.g. users helping with testing.</p>"},{"location":"#how-can-you-contribute","title":"How can you contribute?","text":"<p>If you want to contribute to our project, please read the collaboration notes.</p> Unit testing <p>All software targets and functions are automatically tested to catch as many problems as possible.</p> <p></p>"},{"location":"Board_Maintainers_Procedures_and_Guidelines/","title":"Board Maintainers Procedures and Guidelines","text":"Board Maintainers Procedures and Guidelines <p>     This topic should give you as new board maintainers a brief overview about what you should do, must do, and can do. What you as maintainer can expect from Armbian and what we expect from you. </p> <p> Requirements: </p> <p>     Even though you became a maintainer already just to make sure everything is set. </p> <ul> <li>         You must have access to the hardware you applied to maintain     </li> <li>         You must have a Github ID which should be listed in the documentation </li> <li>         You must have a forums account (you already have obviously) which should be listed in the documentation. If not let me know.     </li> <li>You must  have an Jira account and keep track of issues filed for your board</li> <li> You must  make sure Armbian Management has been informed of all of the above IDs for our documentation</li> <li>         You should know Armbian basics like how to get an Armbian image run on your hardware and do basic debugging, ideally via serial console     </li> <li>         Knowledge in development, writing code and so on is optional (but of course welcome ;-))     </li> </ul> <p>If you are a new maintainer, please make sure you have submitted your IDs and information using our maintainer registry form: Here</p> <p> Maintaining: </p> <p> So all requirements are met and you are a maintainer now. Now what? </p> <p>     Maintainers must not necessarily be persons with development experience. They act as a intersection between end-users and the development team and serve the developers in best-effort manner. They are encouraged to answer basic/simple user questions (if possible, also best effort) without having to bother the development team. They are allowed to record bugs but are not allowed to escalate bugs. Team leaders do. </p> <p>     Take note that it is still up to development team's discretion what gets attention since Armbian has to plan carefully how to spend its very limited resources. </p> <ul> <li>         You must participate in release process:         Ideally you attend to the release meetings that usually happen four times a year about a month before release date (end of February, May, August, November). On that occasion you are given the chance to point out critical issues with your board. A typical agenda looks like this:  https://docs.armbian.com/Process_Release-Model/#agenda          However, while the meeting participation is optional you \"must sign-off that device has been tested, is stable, and ready for release during release process\".         This basically means you take the RC-images we provide and test them as best as you can for their functionality hardware-wise:         <ul> <li>Does the board boot to both CLI and Desktop?</li> <li>Is the desktop usable?</li> <li>Does USB work? (at all or partially)</li> <li>Other common use cases</li> </ul>         If something does not work, this is fine also and totally normal. The important part is that it is documented and we get notified about the issues.  During each release you will be expected to fill out  the following form: Release Testing Form </li> </ul> <ul> <li>         You should follow the commit history on Github. For once you may learn something about how things work both development-wise and behind the scenes in general and also may notice changes that affect the hardware/board you are dealing with.      </li> <li>         While not required, you should have a build environment setup so you can build images with the most recent images and test them right away. Your feedback, either positive or negative, is very welcome. You are free to add comments to every commit and pull request.                   Ideally you have multiple microSD cards laying around to test regular updates on current releases and nightly without having to re-flash the same card every time to switch between branches.         Alternatively you can grab auto-built images from the build train once available: https://github.com/armbian/build/releases         Take note that the building process takes quite a while so you might be faster using your own build environment.     </li> </ul> <ul> <li>         You must provide \"best effort\" support in the forum:         Do not let that wording intimidate you. This is not a complicated task. Regarding forums this can include things like         <ul> <li>                 answering obvious questions (for example by pointing to our documentation, ideally directly to the solution page),             </li> <li>                 let the questioner know that additional information is needed for further debugging (e.g. request \"armbianmonitor -u\" output) or             </li> <li>                 for upgrade issues, ask if they can recreate the issue with a fresh untouched image from: https://www.armbian.com/download/ </li> <li> If you need additional direction on dealing with an issue contact Werner on the forums or Discord.</li> </ul> </li> </ul> <ul> <li>         You must provide \"best effort\" support in Jira: <ul> <li>                 Review submitted issues for you board made by Armbian's contributors             </li> <li>                 For upgrade issues, ask if they can recreate the issue with a fresh untouched image from: https://www.armbian.com/download/ </li> <li> If you have questions, concerns or are not sure about something, you can tag the issue for @Tenkawa or @TheLinuxBug to review</li> </ul> </li> </ul> <p> Jira and Forum expectations: </p> <p>Low priority issues are usually attended to and patched by the community. If the issue has existed for more than a release, you can create a Jira ticket for it. However the expectation is the issue will be low priority and may not be processed for some time. Issues such as, but not limited to, should be considered low priority:</p> <ul> <li>Wifi (this includes missing modules, AP mode, etc)</li> <li>Bluetooth</li> <li>GPIO</li> <li>i2c</li> <li>Hardware accelerators, including crypto or VPU (video acceleration)</li> <li>DTB overlays (required for i2c devices, LCD displays, etc)</li> </ul> <p>For high priority items you can create a Jira ticket so that when developers are able, they can process it. If you are going to create a Jira ticket, please be sure to collect as much information about the issue as possible first. If more information will be needed to process the issue, you should reply to the user asking for that additional information and make sure it is included in the ticket. Issues like these should be considered a higher priority:</p> <ul> <li>Image does not boot</li> <li>Image is corrupt</li> <li>Packages in the image are corrupt</li> <li>SDcard or eMMc support is not functioning as expected</li> </ul> <p> What should you do if you run into an issue on the forum?</p> <ul> <li> If the issues is affecting a lot of people, you can create a Jira ticket for the issue to make sure it is reported and seen by developers.</li> <li> If you report an issue and you feel it is important, after 8 weeks you can tag (@Tenkawa) in an reply to the ticket and ask for him to review. </li> <li> If the issue is important it will be directed to management. If it is deemed not important, you will get a reply stating that we do not have a timeline for the fix and that it will be handled by volunteers when/if possible.</li> </ul> <p>What should you do if there is a long standing Jira ticket?</p> <ul> <li>If you see an issue and you feel it is important, after 8 weeks you can tag (@Tenkawa) in an reply to the ticket and ask for him to review. </li> <li> If the issue is important it will be directed to management, if it is deemed not important, you will get a reply stating that we don't have a timeline for the fix and that it will be handled by volunteers when possible.</li> </ul> <p> Losing support status: </p> <p>     As mentioned in the board support rules the support status of a board will be revoked for at least the current and upcoming release cycle(s) if a \"must\" of the Maintaining section above is not fulfilled. </p> <p> As an example: August 30th is release date for 22.08 release, sign-off dead line is 21th. If maintainer misses the RC sign-off window the board is demoted to CSC for both 22.08 and 22.11 releases. </p> <p>     The development team may grant exceptions on their discretion. </p> <p> Armbian's assistance: </p> <p>If you have questions about maintainer-ship or want to learn more deeper insights about the build framework and such Armbian will provide you with all information in best-effort. If time allows we can explain and teach you personally various aspects about the project. Otherwise, if  you want to learn more about the build framework, dive in, play with it and read the documenenation. Also if you have other concerns please do not hesitate to reach out via forums, IRC or Discord. Armbian cares about the people who care about Armbian\u00a0 </p>"},{"location":"Community_Forums/","title":"Forums","text":"<p>https://forum.armbian.com/</p> <p></p>"},{"location":"Community_Github/","title":"Main project repositories","text":""},{"location":"Community_Github/#armbian-build","title":"Armbian Build","text":"<p>armbian/build</p> <p>Framework can build generic Armbian or custom Linux image.</p>"},{"location":"Community_Github/#armbian-config","title":"Armbian Config","text":"<p>armbian/configng</p> <p>Utility for configuring:</p> <ul> <li>hardware, </li> <li>adjusting services,</li> <li>installing applications.</li> </ul>"},{"location":"Community_Github/#armbian-os","title":"Armbian OS","text":"<p>armbian/os</p> <p>Armbian OS assembly line:</p> <ul> <li>daily rolling releases for supported build targets</li> <li>point releases for supported build targets</li> </ul>"},{"location":"Community_Github/#armbian-community","title":"Armbian Community","text":"<p>armbian/community</p> <p>Armbian OS community assembly line:</p> <ul> <li>weekly rolling releases for build targets without a dedicated mainteiner.</li> </ul>"},{"location":"Community_Github/#armbian-distribution","title":"Armbian Distribution","text":"<p>armbian/distribution</p> <p>Armbian OS with pre-installed applications:</p> <ul> <li>HomeAssistant,</li> <li>OpenHab,</li> <li>Kali Linux, </li> <li>OpenMediaVault</li> </ul>"},{"location":"Community_IRC/","title":"Social media","text":""},{"location":"Community_IRC/#armbian-on-x-and-mastodon","title":"Armbian on X and Mastodon","text":"<p>Armbian short announcements are done via \ud835\udd4f (formerly known as Twitter): https://twitter.com/armbian and https://fosstodon.org/@armbian</p>"},{"location":"Community_IRC/#irc-channel-discord-matrix","title":"IRC Channel / Discord / Matrix","text":""},{"location":"Community_IRC/#overview","title":"\ud83d\udc4f Overview","text":"<p>As announced in the forums everyone interested can communicate in realtime using the internet relay chat (or IRC for short). Well known IRC clients for CLI are Weechat or Irssi and for GUI Hexchat or Konversation. Mature clients for Matrix: Element or FluffyChat.  </p> <p>Besides that communication is also possible via Discord or Matrix (closed beta).</p>"},{"location":"Community_IRC/#how-to-connect","title":"\ud83d\udd0c How to connect","text":""},{"location":"Community_IRC/#irc","title":"IRC","text":"<p>Libera network:</p> <ul> <li>Server: <code>irc.libera.chat</code> </li> <li>Ports: <code>6697</code> / non-encrypted: <code>6667</code> </li> <li>Channels: as listed below</li> </ul> <p>OFTC network:</p> <ul> <li>Server: <code>irc.oftc.net</code> </li> <li>Ports: <code>6697</code> / non-encrypted: <code>6667</code> </li> <li>Channels: <code>#armbian</code> and <code>#armbian-announcements</code> are available only</li> </ul> <p>In order to enter main <code>#armbian</code> channels registration with Nickserv is mandatory on Libera. Check Libera Chat documentation for further information.</p>"},{"location":"Community_IRC/#discord","title":"Discord","text":"<p>Simply click here: https://discord.com/invite/armbian </p> <p>Channels starting with <code>#armbian-</code> are relayed between Discord and Libera IRC so it does not matter if you join IRC or Discord as both ends receive your messages. Check <code>#welcome-and-rules</code> for more information. The main <code>#armbian</code> channel and <code>#armbian-announcements</code> are relayed between Discord, Libera, OFTC and Matrix.</p>"},{"location":"Community_IRC/#matrix-closed-beta","title":"Matrix (closed beta)","text":"<ul> <li>Server: <code>matrix.armbian.com</code></li> <li>Channels: <code>#armbian:matrix.armbian.com</code> and <code>#armbian-announcements:matrix.armbian.com</code> are available only</li> <li>To receive an invitation for former please ping either Lanefu or Werner with your Matrix handle in any known ways to communicate like the chat options above or forums. Once in feel free to invite others by yourself.</li> </ul>"},{"location":"Community_IRC/#rules","title":"\ud83d\uded1 Rules","text":"<p>Forums registration terms and rules apply for our chats: https://forum.armbian.com/terms</p>"},{"location":"Community_IRC/#channels-depending-on-platform-only-a-limited-selection-might-be-available","title":"\ud83d\udcac Channels (depending on platform only a limited selection might be available)","text":"<ul> <li><code>#armbian</code> is the project\u2019s main channel. Issue tracking, peer-to-peer user support or upcoming release planning talks.</li> <li><code>#armbian-announcements</code> : important messages from the Armbian team. You definitely want to idle here. Moderated channel</li> <li><code>#armbian-devel</code> : build engine development topics</li> <li><code>#armbian-desktop</code> : desktop environment development</li> <li><code>#armbian-csc</code> unsupported/stating board talk</li> <li><code>#armbian-allwinner</code> Allwinner-related SoC talk</li> <li><code>#armbian-amlogic</code> Amlogic-related SoC talk</li> <li><code>#armbian-broadcom</code> Broadcom-related SoC talk</li> <li><code>#armbian-rockchip</code> Rockchip-related SoC talk</li> <li><code>#armbian-offtopic</code> General chit chat, whatever that does not fit other channels</li> <li><code>#armbian-commits</code> Whenever a new interaction with a repository on Github happens it will be announced. Moderated channel</li> </ul>"},{"location":"Community_IRC/#services","title":"\ud83d\udc6e Services","text":"<p>Besides the services offered by IRC (like Nickserv or Chanserv) Armbian has set up some own services (on Libera only).  </p> <p><code>ArmbianGithub</code></p> <ul> <li>Has the purpose to fill #armbian-commits channel</li> </ul> <p><code>DC-IRC</code></p> <ul> <li>Has the purpose to relay messages between the IRC networks and Discord. Applies for all channels beginning with <code>#armbian-</code> as well as <code>#armbian</code>.</li> </ul> <p><code>ArmbianHelper</code></p> <ul> <li>Allows searching forums via Google API (not very precise though)<ul> <li>Example: <code>,g Allwinner H6 panfrost</code></li> </ul> </li> <li>A few more minor commands, mostly used by staff or do not need introduction<ul> <li><code>.nonprofit</code>, <code>.sed</code>, <code>.contribute</code>, <code>.rtfm</code>, <code>.fortune</code>, <code>.sunxi</code>, <code>.meson</code>, <code>help</code>, <code>help irc</code>, <code>.tvboxes</code></li> </ul> </li> <li>Translation for non-native English speakers<ul> <li>Simply start your sentence with <code>--</code> at the beginning and the bot will translate your message regardless of the source language into English. Note: This services will be activated manually on demand (like planned meetings for example) since its backend generates cost.</li> </ul> </li> </ul>"},{"location":"Community_IRC/#faq","title":"\u2754 FAQ","text":"<ul> <li>Why are there so many people in the channel and nobody is talking?  <ul> <li>It is pretty common for community IRC channels for people to simply idle there. Many also using so called IRC bouncers https://en.wikipedia.org/wiki/BNC_(software) that keeps their connection to the channel alive to act like an answering machine.</li> </ul> </li> </ul> <ul> <li>I wrote \u2018Hi\u2019 but nobody answered. How do I get support there?<ul> <li>Probably there is nobody around at the time. Keep in mind that all users are spread around the globe and therefore living in many different time zones. It is a common habit to simply state your question or issue and then wait patiently for an answer. Depending how complex this may take up to a few hours because most Armbian contributors have detailed knowledge in a specific board family only.</li> </ul> </li> <li>Is the chat history public as well?<ul> <li>Yes. All conversation is logged. These logs are open to the public. You can find them here: http://irc.armbian.com</li> </ul> </li> <li>Why do some people have odd hostnames like <code>@armbian/staff/lanefu</code> or <code>@user/username</code>?<ul> <li>These hostnames are so called project affiliation cloaks. These are meant to show a users affiliation to a specific project and their role there.</li> </ul> </li> <li>Can I have that too?<ul> <li>Yes. An Armbian affiliation cloak can be requested from Werner either via forums or IRC. They usually will be granted if you are a well known member in forums, a contributor via Github or donated to the project. Make sure you identified yourself to Nickserv beforehand.  </li> </ul> </li> <li>How can I protect my nickname so nobody can spoof me?  <ul> <li>Register your nick with Libera\u2019s Nickserv service. Check https://libera.chat/guides/registration   Even though it is not mandatory you should register and identify with the services as other channels for example may not allow unregistered users to chat or join at all as anti-spam measure.</li> </ul> </li> <li>Why do some users have voice (+v) in channel?<ul> <li>As mentioned in forums \u201call contributors to the project, regardless if forums staff, contributor on Github or well known and longtime active user\u201d may get voice on request.</li> </ul> </li> </ul> <ul> <li>Should I add away to my nick if I am AFK? Like Werner|away<ul> <li>No. Please use the <code>/away [reason]</code> command as intended. For an explanation please have a look at the ZNC Wiki.</li> </ul> </li> </ul>"},{"location":"Community_IRC/#bottom-line","title":"\ud83d\udc49 Bottom line","text":"<p>If you have any questions, comments regarding the IRC channels and/or services or found an issue in this documentation for think you can enhance it get in touch with Werner either via forums, IRC or Discord.</p>"},{"location":"Developer-Guide_Adding-Board-Family/","title":"Adding a new board or board family","text":"<p>There are no detailed instructions on how to add a new board or even a whole new board family to the build script yet. However there are a few commits / pull requests that give clues how to achieve that like</p> <ul> <li>https://github.com/armbian/build/pull/3176/files</li> <li>https://github.com/armbian/build/pull/3138/files</li> <li>https://github.com/armbian/build/pull/7902/files</li> <li>https://github.com/armbian/build/pull/8208/files</li> </ul>"},{"location":"Developer-Guide_Build-Commands/","title":"Build commands","text":""},{"location":"Developer-Guide_Build-Commands/#kernel","title":"kernel","text":"<p>Builds kernel and device tree (where applicable) and places it to the <code>output/debs</code></p> <p>Usage: Bash<pre><code>./compile.sh kernel BOARD=nanopi-r5c BRANCH=edge\n</code></pre></p>"},{"location":"Developer-Guide_Build-Commands/#kernel-config","title":"kernel-config","text":"<p>Automatically call kernel\u2019s <code>make menuconfig</code> (add or remove modules or features)</p> <p>Usage: Bash<pre><code>./compile.sh kernel-config BOARD=nanopi-r5c BRANCH=edge\n</code></pre></p>"},{"location":"Developer-Guide_Build-Commands/#dts-check","title":"dts-check","text":"<p>Validate dts files and improve board &amp; patch development overall.</p> <p>This option validates the dts/dtb file for the selected board against the device tree bindings and outputs the validation logs to the user. It can be used when adding a new board, developing or improving a dts file.</p> <p>Usage: Bash<pre><code>./compile.sh dts-check BOARD=nanopi-r5c BRANCH=edge \n</code></pre></p>"},{"location":"Developer-Guide_Build-Commands/#inventory-boards","title":"inventory-boards","text":"<p>Outputs a one-board-per-line CSV inventory of boards.</p> <p>Sets <code>TARGETS_FILE</code> to something that doesn\u2019t exist, so the <code>default-targets.yaml</code> is used (so same list for everyone, save for userpatched-boards)</p> <p>Usage: Bash<pre><code>./compile.sh inventory-boards\n</code></pre> Outputs /info/boards-inventory.csv</p>"},{"location":"Developer-Guide_Build-Commands/#kernel-dtb","title":"kernel-dtb","text":"<p>Builds only DTB and outputs full preprocessed dts source</p> <p>Outputs preprocessed DTS source for the board in question to <code>output/</code> also outputs the same preprocessed DTS source, ran through <code>dtc</code> with input and output DTS formats for \u201cnormalized\u201d comparisons</p> <p>Usage: Bash<pre><code>./compile.sh kernel-dtb BOARD=xxxxx BRANCH=edge\n</code></pre></p>"},{"location":"Developer-Guide_Build-Commands/#uboot-patch","title":"uboot-patch","text":"<p>Create patch files for u-boot.</p> <p>The output patch files are written to output/patch/u-boot-${LINUXFAMILY}-${BRANCH}.patch. To use them in subsequent builds they must be copied to the appropriate directories in the patch/u-boot directory. See: user-provided patches</p> <p>Any uncommited changes in the work tree and index are commited to establish a clean work tree. It would be best if there are no uncommitted changes when running <code>uboot-patch</code>.</p> <p>If there is an existing patch file at the output path specified above, it may be applied before continuning work.</p> <p>When the prompt <code>Press &lt;ENTER\\&gt; after you are done editing in ${pwd}</code> appears, in a separate window, navigate to the specified directory and make any required changes. When changes are complete, return to the window running the <code>uboot-patch</code> command and press <code>&lt;ENTER&gt;</code>. </p> <p>A patch to recreate the changes introduced to the u-boot tree is presented and the prompt \u201cAre you happy with this patch?\u201d. You can response <code>yes</code> to accept the patch as-is and generate the output patch file, <code>stop</code> to abort the command without producing the outpu patch file, or anything else to loop back, to make futher changes.</p> <p>Instead of creating them while running <code>uboot-patch</code>, new device tree files should be created in the relevant <code>dt</code> directory under <code>patch/u-boot</code> and new _defconfig files should be created in the relevant <code>configs</code> directory under <code>patch/u-boot</code>. While the <code>uboot-patch</code> command will add these new files to the patch if they are created while running <code>uboot-patch</code>, this is not the preferred way of adding these files.</p>"},{"location":"Developer-Guide_Build-Commands/#rewrite-uboot-patches","title":"rewrite-uboot-patches","text":"<p>Prepares git, applies patches to git, and rewrites them back from git same as kernel, it does git archeology for mbox-less patches, etc.</p> <p>Note: MAINTAINER and MAINTAINEREMAIL should be set.</p> <ul> <li>uboot-patches-to-git alias is also added, but my guess is that the rewrite is more useful.</li> <li>refactor a common config function for both kernel and uboot.</li> </ul> <p>Usage: Bash<pre><code>./compile.sh rewrite-uboot-patches BOARD=xxxx BRANCH=edge \n</code></pre></p>"},{"location":"Developer-Guide_Build-Commands/#rewrite-kernel-patches","title":"rewrite-kernel-patches","text":"<p>Prepares git, applies patches to git, and rewrites them back from git same as kernel, it does git archeology for mbox-less patches, etc.</p> <p>Usage: Bash<pre><code>./compile.sh rewrite-kernel-patches BOARD=xxxx BRANCH=edge \n</code></pre></p>"},{"location":"Developer-Guide_Build-Commands/#targets","title":"targets","text":"<p>Generates output/info/git_sources.json file containing URL, branch, and commit hash combo.</p> <p>The easiest way to generate file for all devices is to run <code>./compile.sh targets</code>. Then, at the time of release, we will copy the output/info/git_sources.json file to config/sources/git_sources.json. Once the file is copied, the hash information from the file will be used to fetch resources for git repositories where branches are specified instead of tags or commits.</p> <p>Usage: Bash<pre><code>./compile.sh targets\n</code></pre></p>"},{"location":"Developer-Guide_Build-Preparation/","title":"Armbian Build Framework Quick Start Guide","text":""},{"location":"Developer-Guide_Build-Preparation/#requirements","title":"Requirements","text":"<ul> <li>x86_64 / aarch64 / riscv64 machine</li> <li>at least 8GB (less for non-BTF builds) of memory and ~50GB of disk space for VM, container, or bare-metal installation</li> <li>Armbian / Ubuntu Noble 24.04.x for native building or any Docker capable Linux for containerised</li> <li>Windows 10/11 with WSL2 subsystem running Armbian / Ubuntu Noble 24.04.x</li> <li>Superuser rights (configured sudo or root access).</li> <li>Make sure your system is up-to-date! Outdated Docker binaries, for example, can cause trouble</li> </ul>"},{"location":"Developer-Guide_Build-Preparation/#clone-repository","title":"Clone repository","text":"Bash<pre><code>git clone https://github.com/armbian/build\ncd build  \n</code></pre> <p>Note</p> <ul> <li>Make sure that full path to the build script does not contain spaces</li> <li>For stable branch use last point release <code>--branch=v24.11</code></li> </ul> <pre><code>gitGraph\n   commit\n   commit\n   checkout main\n   commit id: \"v24.08\" tag: \"v24.08\"\n   branch v24.08\n   commit\n   commit\n   commit\n   commit\n   checkout main\n   commit id: \"v24.11\" tag: \"v24.11\"\n   branch v24.11\n   commit\n   commit\n   commit\n   commit\n   checkout main\n   commit\n   commit\n   commit\n   commit\n   commit\n   commit\n   commit id: \"main\" type: REVERSE tag: \"Trunk\"</code></pre>"},{"location":"Developer-Guide_Build-Preparation/#interactive","title":"Interactive","text":"<p>Run framework:</p> Bash<pre><code>./compile.sh\n</code></pre> Video <p></p>"},{"location":"Developer-Guide_Build-Preparation/#cli","title":"CLI","text":"Bash<pre><code>./compile.sh [command] [switch...] [config...]\n</code></pre> <p>Only one command can be specified.</p> <p>Switches are parameter settings that are used by the build framework itself (e.g. <code>DEBUG=yes</code>) or the specific command.</p> <p>Config files are bash shell scripts that are sourced in the order specified. They are primarily used to set switches but might also set hook functions. They must be located in the <code>userpatches</code> directory and must be named <code>config-${arg}.conf</code> or <code>config-${arg}.conf.sh</code> (where <code>${arg}</code> is the argument from the command line): one or the other, but not both.</p> <p>Switches set on the commandline override settings from the config files, regardless of the order they appear on the comandline.</p> <p>Comprehensive list of build Commands and Switches</p> <p>Example:</p> Bash<pre><code>./compile.sh build \\\nBOARD=uefi-x86 \\\nBRANCH=current \\\nBUILD_DESKTOP=yes \\\nBUILD_MINIMAL=no \\\nDESKTOP_APPGROUPS_SELECTED='browsers chat desktop_tools' \\\nDESKTOP_ENVIRONMENT=gnome \\\nDESKTOP_ENVIRONMENT_CONFIG_NAME=config_base \\\nKERNEL_CONFIGURE=no \\\nRELEASE=noble\n</code></pre> <p>Or, using config file <code>userpatches/config-myboard.conf</code> that sets all these switches:</p> Bash<pre><code>./compile.sh build \\\nmyboard\n</code></pre> <p>Interpretation?</p> <p>This command will generate Ubuntu 24.04 Noble based Gnome desktop environment image for Intel based hardware (uefi-x86). Besides bare desktop, it will contain packages from browsers and desktop_tool sections and it will use unchanged kernel from current kernel branch.</p>"},{"location":"Developer-Guide_Build-Preparation/#logging","title":"Logging","text":"<p>Logs are written to output/logs. Old logs (all but the current build) are compressed and moved to output/logs/archive.</p> <p>Log formats are:</p> <ul> <li>ANSI - text with ANSI escapes for color coding - *.log.ans</li> <li>ASCII (if ansi2txt is available) - text without color coding escapes - *.log</li> <li>Markdown summary - *.md</li> <li>Raw (if RAW_LOG=yes) - tar file containg all the raw logs - *.raw.tar</li> </ul> <p>For much more verbose logs set switch \u2018DEBUG=yes\u2019.</p>"},{"location":"Developer-Guide_Build-Preparation/#github-actions","title":"GitHub Actions","text":"<p>If you do not have the proper equipment to build images on your own, you can use our GitHub Action.</p>"},{"location":"Developer-Guide_Build-Switches/","title":"Build Switches","text":"<p>These parameters are meant to be applied to the <code>./compile.sh</code> command. They are all optional. They can also be added to your build configuration file to save time. Default values are marked bold if applicable.</p>"},{"location":"Developer-Guide_Build-Switches/#user-space","title":"User space","text":"<p>BOARD ( <code>string</code> )</p> <p>Set the name of the board manually to skip the dialog prompt. Name of the board is a filename without extension.</p> <p>BRANCH ( <code>string</code> )</p> <ul> <li><code>vendor</code></li> <li><code>legacy</code></li> <li><code>current</code> (recommended)</li> <li><code>edge</code></li> </ul> <p>Set kernel and U-Boot branch manually to skip dialog prompt</p> <p>Note</p> <p>Some branches may not be available for all devices.</p> <p>RELEASE ( <code>string</code> )</p> <ul> <li><code>bookworm</code></li> <li><code>trixie</code></li> <li><code>sid</code></li> <li><code>jammy</code></li> <li><code>noble</code></li> </ul> <p>Set packages release base manually to skip dialog prompt. Check here for currently available releases.</p> <p>Note</p> <p>Only stable and/or LTS upstream Debian or Ubuntu releases are officially supported. Others might work or not.</p> <p>BUILD_MINIMAL ( <code>string</code> )</p> <ul> <li><code>yes</code>: build a bare CLI image suitable for application deployment. This option is not compatible with <code>BUILD_DESKTOP=\"yes\"</code></li> <li><code>no</code>: (default)</li> </ul> <p>BSPFREEZE ( <code>string</code> )</p> <ul> <li><code>yes</code>: freeze (from upgrade) armbian firmware packages when building images (U-Boot, kernel, DTB, BSP)</li> <li><code>no</code>: (default)</li> </ul> <p>INSTALL_HEADERS ( <code>string</code> )</p> <ul> <li><code>yes</code>: pre-install kernel headers</li> <li><code>no</code>: (default)</li> </ul>"},{"location":"Developer-Guide_Build-Switches/#networking","title":"Networking","text":"<p>NETWORKING_STACK ( <code>string</code> )</p> <ul> <li><code>network-manager</code></li> <li><code>systemd-networkd</code></li> <li><code>none</code> (to not-add any networking extensions)</li> </ul> <p>Installs desired networking stack. If the parameter is undefined, it sets <code>systemd-networkd</code> for minimal images (MINIMAL=yes) and <code>network-manager</code> for the rest. Time synchronization is also changed; chrony is installed with network-manager, while systemd-timesyncd is used with systemd-networkd. In both cases, we control network settings using Netplan.</p> <p>Build switch example</p> Bash<pre><code>./compile.sh NETWORKING_STACK=\"network-manager\"\n</code></pre>"},{"location":"Developer-Guide_Build-Switches/#host-environment","title":"Host environment","text":"<p>EXPERT ( <code>string</code> )</p> <ul> <li><code>yes</code></li> </ul> <p>Show development features and boards regardless of their support status in interactive mode.</p> <p>CLEAN_LEVEL ( <code>comma-separated list</code> )</p> <p>Defines what should be cleaned. Changing this option can be useful when rebuilding images or building more than one image</p> <ul> <li><code>make-atf</code> = make clean for ATF, if it is built.</li> <li><code>make-uboot</code> = make clean for uboot, if it is built.</li> <li><code>make-kernel</code> = make clean for the kernel if it is built. very slow.</li> <li><code>debs</code>, <code>alldebs</code> = delete all packages in \u201c./output/debs\u201d</li> <li><code>images</code> = delete \u201c./output/images\u201d</li> <li><code>cache</code> = delete \u201c./output/cache\u201d</li> <li><code>sources</code> = delete <code>cache/sources</code> (all downloaded sources)</li> <li><code>oldcache</code> = remove old cached rootfs except for the newest 8 files</li> <li><code>extras</code> = delete additional packages for the current release in <code>output/debs/extra</code></li> </ul> <p>CARD_DEVICE ( <code>string</code> )</p> <ul> <li><code>/dev/sdX</code></li> </ul> <p>Set to the device of your flash media / SD card. The image will be burned and verified.</p> <p>PREFER_DOCKER ( <code>string</code> ) - <code>yes</code> (default) - <code>no</code></p> <p>Docker assisted compilation is on by default. Set to <code>no</code> if you prefer running compilation natively.</p> <p>DOCKER_ARMBIAN_BASE_IMAGE ( <code>string</code> )</p> <ul> <li><code>ubuntu:jammy</code> (default)</li> <li><code>ubuntu:noble</code></li> <li><code>debian:bookworm</code></li> </ul> <p>Defines the build host when using a Docker container (default). Here, you can see which other options are available.</p> <ul> <li>CI ( <code>string</code> )<ul> <li>true</li> <li>false</li> </ul> </li> </ul> <p>If enabled (<code>true</code>), the Docker build container will receive Docker credentials from the host (<code>${HOME}/.docker/config.json</code>) and the <code>OCI_TARGET_BASE</code> environment variable.</p> <ul> <li>OCI_TARGET_BASE ( <code>string</code> )<ul> <li>url/to/container_registry/path</li> <li>${GHCR_SOURCE}/armbian/* (GHCR_SOURCE is defined in <code>lib/functions/configuration/main-config.sh</code>)</li> </ul> </li> </ul> <p>Select the target for pull/push OCI cached images. If not set, default is used.</p> <p>GHCR_MIRROR_ADDRESS ( <code>string</code> )</p> <p>The default mirror address for ghcr.io, set by <code>GHCR_MIRROR=dockerproxy</code>, is ghcr.dockerproxy.com. When this address is unavailable, an alternative address can be set with <code>GHCR_MIRROR_ADDRESS</code>.</p> <p>Example:</p> Bash<pre><code>./compile.sh GHCR_MIRROR=dockerproxy GHCR_MIRROR_ADDRESS=ghcr.libcuda.so\n</code></pre> <p>KERNEL_COMPILER ( <code>string</code> )</p> <p>The compiler used to compile the kernel. Usually, this option is set by the board config, but it can be set to <code>clang</code> to use LLVM to compile the kernel.</p> <p>Example:</p> Bash<pre><code>./compile.sh KERNEL_COMPILER=clang\n</code></pre> <p>OPENSSHD_REGENERATE_HOST_KEYS ( <code>boolean</code> )</p> <p>- false (skip armbian-firstrun\u2019s OpenSSH host keys deletion and regeneration (eg: to let cloud-init set the SSH host keys)   - true (execute armbian-firstrun\u2019s OpenSSH host keys deletion + regeneration)</p> <p>Manage OpenSSH host key regeneration at armbian-firstrun service.</p> <p>Example:</p> Bash<pre><code>./compile.sh OPENSSHD_REGENERATE_HOST_KEYS=false\n</code></pre>"},{"location":"Developer-Guide_Build-Switches/#filesystem","title":"Filesystem","text":"<p>ROOTFS_TYPE ( <code>string</code> )</p> <ul> <li><code>ext4</code> (default)</li> <li><code>f2fs</code></li> <li><code>btrfs</code></li> <li><code>nilfs2</code></li> <li><code>xfs</code></li> <li><code>nfs</code></li> </ul> <p>Create image with different root filesystems instead of default <code>ext4</code>. Requires setting <code>FIXED_IMAGE_SIZE</code> to something smaller than the size of your SD card for <code>F2FS</code></p> <p>BTRFS_COMPRESSION ( <code>string</code> )</p> <ul> <li><code>lzo</code></li> <li><code>none</code></li> <li><code>zlib</code> (default)</li> <li><code>zstd</code></li> </ul> <p>When choosing <code>ROOTFS_TYPE=btrfs</code>, select <code>btrfs</code> filesystem compression method and compression level. By default, the compression is <code>zlib</code>.</p> <p>Note</p> <p>The script does not check the legality of the input variable (compression ratio). Input like <code>zlib:1234</code> is legal to the script but illegal to the kernel. Beware that setting this option does affect image creation only (shrinking disk size) and will not adjust <code>/etc/fstab</code>, so it is up to the user to later edit <code>/etc/fstab</code> if compression in daily operation is also wanted (beware of severe performance penalties with random IO patterns and heavy compression algorithms!).</p> <p>BTRFS_ROOT_SUBVOLUME ( <code>string</code> )</p> <p>When using a BTRFS image as a file system, the volume <code>/</code> is placed on btrfs subvolume <code>@</code>. The same subvolume is set as default for mounting without specifying the <code>subvol=@</code> option at the time the image is mounted.</p> <p>Using <code>BTRFS_ROOT_SUBVOLUME</code>, you can set a different name for the root filesystem subvolume:</p> Bash<pre><code>./compile.sh ROOTFS_TYPE=btrfs BTRFS_ROOT_SUBVOLUME=@root\n</code></pre> <p>CRYPTROOT_ENABLE ( <code>string</code> )</p> <ul> <li>yes</li> <li>no</li> </ul> <p>LUKS (Linux Unified Key Setup) is a specification for block device encryption. It establishes an on-disk format for the data, as well as a passphrase/key management policy. LUKS uses the kernel device mapper subsystem via the dm-crypt module.</p> When enabled, you need to provide additional information:<pre><code>CRYPTROOT_PASSPHRASE=\"MYSECRECTPASS\"             # Mandatory\nCRYPTROOT_SSH_UNLOCK=\"yes\"                       # Default: yes\nCRYPTROOT_SSH_UNLOCK_PORT=\"2222\"                 # Default: 2022\nCRYPTROOT_MAPPER=armbian-root`                   # Default: armbian-root\nCRYPTROOT_PARAMETERS=\"custom cryptsetup options\" # Default: --pbkdf pbkdf2\n</code></pre> <p>Tips and warnings</p> <ul> <li>Private key can be placed in <code>$USERPATCHES_PATH/dropbear_authorized_keys</code> or they will be generated in <code>output/images/*.key</code> file</li> <li>If you want to do the encryption part from scratch, check out this forum post.</li> <li>This function might not work well with all distributions.</li> <li>CRYPTROOT_MAPPER name might affect parallel image building</li> <li>CRYPTROOT_PARAMETERS may not contain <code>=</code>; separate switches with spaces</li> </ul>"},{"location":"Developer-Guide_Build-Switches/#advanced","title":"Advanced","text":"<p>INCLUDE_HOME_DIR ( <code>string</code> )</p> <ul> <li><code>yes</code></li> <li><code>no</code> (default)</li> </ul> <p>Include directories created inside /home in final image.</p> <p>ENABLE_EXTENSIONS ( <code>comma-separated list</code> )</p> <p>Extensions allows to extend the Armbian build system without overloading the core with specific functionality. Extensions, stored in folder <code>extensions</code> are called</p> <p>Build switch example</p> Bash<pre><code>./compile.sh \\\nbuild \\\nBOARD=uefi-x86 \\\nBRANCH=current \\\nBUILD_DESKTOP=no \\\nBUILD_MINIMAL=no \\\nKERNEL_CONFIGURE=no \\\nRELEASE=noble \\\nENABLE_EXTENSIONS=mesa-vpu,nvidia \\\n</code></pre> <p>CONSOLE_AUTOLOGIN ( <code>string</code> )</p> <ul> <li><code>yes</code> (default)</li> <li><code>no</code></li> </ul> <p>Automatically login as root for local consoles at first run. Disable if your security threat model requires.</p> <p>USE_CCACHE ( <code>string</code> )</p> <ul> <li><code>yes</code></li> <li><code>no</code> (default)</li> </ul> <p>Use a C compiler cache.  Generally not needed due to git-worktree .  Can slow performance on clean builds.</p> <p>PRIVATE_CCACHE ( <code>string</code> )</p> <ul> <li><code>yes</code></li> <li><code>no</code> (default)</li> </ul> <p>Use <code>$DEST/ccache</code> as ccache home directory. Setting yes to this will enable CCACHE as well.</p> <p>KERNEL_BTF</p> <ul> <li><code>yes</code></li> <li><code>no</code></li> </ul> <p>Default is to auto-detect based on build host available RAM. If not enough RAM available, use =no to accept building without BTF debug information, or use =yes to force building with BTF even if low RAM. Family code can set this to opt-out of BTF. For more information on BTF see https://docs.kernel.org/bpf/btf.html</p> <p>ARTIFACT_IGNORE_CACHE ( <code>string</code> )</p> <ul> <li><code>yes</code></li> <li><code>no</code>  (default)</li> </ul> <p>Enforce building from source instead of using pre-built artifacts.</p> <p>SKIP_ARMBIAN_REPO ( <code>string</code> )</p> <ul> <li><code>yes</code></li> <li><code>no</code>  (default)</li> </ul> <p>Enforce building without Armbian repository. Suitable for developing new releases or making custom images that doesn\u2019t need Armbian repository.</p> <p>SECTOR_SIZE ( <code>value</code> ) - <code>512</code> (default, for SD/EMMC/\u2026) - <code>4096</code> (for UFS, requires util-linux &gt;2.41. Tested on Debian Trixie host)</p> <p>Enforce sfdisk to align partition sector sizes.</p> <p>SHARE_LOG ( <code>string</code> )</p> <ul> <li><code>yes</code></li> <li><code>no</code> (default)</li> </ul> <p>Automatically upload full build logs for debugging to one of Armbian\u2019s paste servers at the end of the build process.</p> <p>Example:</p> Bash<pre><code>./compile.sh SHARE_LOG=yes\n</code></pre>"},{"location":"Developer-Guide_Build-Switches/#build-options-below-need-to-be-retested-and-added-above-could-be-deprecated","title":"Build options below need to be retested and added above (COULD BE DEPRECATED)","text":"<p> DO NOT USE! Obsolete documentation, new documentation above is in progress.</p> <ul> <li>KERNEL_KEEP_CONFIG ( yes | no ):<ul> <li>yes: use kernel config file from previous compilation for the same branch, device family, and version</li> <li>no: use default or user-provided config file</li> </ul> </li> <li>BUILD_DESKTOP ( yes | no ):<ul> <li>yes: build an image with a minimal desktop environment</li> <li>no: build image with console interface only</li> </ul> </li> <li>CREATE_PATCHES ( yes | no )  Warning: This option is deprecated and may be removed in future releases - use the new <code>kernel-patch</code> / <code>uboot-patch</code> / <code>atf-patch</code> CLI commands instead.<ul> <li>yes: prompt right before the compilation starts to make changes to the source code for both U-Boot and kernel. From these changes, patch files will be created and placed in the <code>output</code> directory. If you want these patches included in a normal run (without CREATE_PATCHES to say), these files must be copied to the appropriate directories. Also, see user-provided patches.</li> </ul> </li> <li>EXT=rkdevflash to flash Rockchip images to eMMC either during image build or separately with flash CLI command (only works bare Linux, not Docker)</li> </ul>"},{"location":"Developer-Guide_Build-Switches/#hidden-options-to-minimize-user-input-for-build-automation","title":"Hidden options to minimize user input for build automation","text":"<ul> <li>ARMBIAN_CACHE_ROOTFS_PATH ( <code>string</code> ): bind mount cache/rootfs to defined folder</li> <li>ARMBIAN_CACHE_TOOLCHAIN_PATH ( <code>string</code> ): bind mount cache/toolchain path to defined folder</li> </ul>"},{"location":"Developer-Guide_Build-Switches/#hidden-options-for-advanced-users-default-values-are-marked-bold","title":"Hidden options for advanced users (default values are marked bold)","text":"<ul> <li>USERPATCHES_PATH ( userpatches/ ): set alternate path for the location of the <code>userpatches</code> folder</li> <li>SKIP_EXTERNAL_TOOLCHAINS ( yes | no ): don\u2019t download and use Linaro toolchains, by default placed in cache/toolchain (and configurable with ARMBIAN_CACHE_TOOLCHAIN_PATH)</li> <li>PROGRESS_DISPLAY ( none | plain | dialog ): way to display output of verbose processes - compilation, packaging, debootstrap</li> <li>PROGRESS_LOG_TO_FILE ( yes | no ): duplicate output, affected by the previous option, to log files <code>output/debug/*.log</code></li> <li>NO_APT_CACHER ( yes | no ): disable usage of APT cache. Default <code>yes</code> in containers, but can be overridden</li> <li>DISABLE_IPV6 ( true | false ): The distant future, the year Two-Thousand. Set false to allow Aria2c to use a modern ip protocol.</li> <li>NO_HOST_RELEASE_CHECK ( yes | no ): overrides the check for a supported host system</li> <li>USE_MAINLINE_GOOGLE_MIRROR ( yes | no ): use the <code>googlesource.com</code> mirror for downloading mainline kernel sources, which may be faster than <code>git.kernel.org</code> depending on your location</li> <li>USE_GITHUB_UBOOT_MIRROR ( yes | no ): use an unofficial GitHub mirror for downloading mainline U-Boot sources, may be faster than <code>git.denx.de</code> depending on your location</li> <li>SYNC_CLOCK ( yes | no ): sync system clock on builder before start image creation process</li> <li>OFFLINE_WORK ( yes | no ): skip downloading and updating sources and time and host check. Set to \u201cyes,\u201d and you can collect packages without accessing the internet</li> <li>FORCE_USE_RAMDISK ( yes | no ): overrides autodetect for using tmpfs in new debootstrap and image creation process</li> <li>FIXED_IMAGE_SIZE ( <code>integer</code> ): create an image file of this size (in megabytes) instead of minimal</li> <li>BOOTSIZE ( <code>integer</code> 96 ): set size (in megabytes) for separate /boot filesystem. Used if ROOTFS_TYPE set to non-ext4</li> <li>COMPRESS_OUTPUTIMAGE (comma-separated list): create a compressed archive with an image file and GPG signature for redistribution<ul> <li>sha: generate SHA256 hash for image</li> <li>gpg: sign image using gpg</li> <li>xz: compress image only using xz format</li> </ul> </li> <li>IMAGE_XZ_COMPRESSION_RATIO ( 1 - 9 ) images compression levels when using xz compressor. Beware of memory consumption when going higher</li> <li>SEVENZIP ( yes | no ): create .7z archive with extreme compression ratio instead of .zip</li> <li>BUILD_KSRC ( yes | no ): create kernel source packages while building\u2026</li> <li>INSTALL_KSRC ( yes | no ): \u2026 and pre-install these kernel sources on the image</li> <li>FORCE_BOOTSCRIPT_UPDATE ( yes | no ):<ul> <li>yes: force bootscript to get updated during bsp package upgrade</li> </ul> </li> <li>NAMESERVER ( <code>IPv4 address</code> ): the DNS resolver used inside the build chroot. Does not affect the final image. Default: <code>1.0.0.1</code></li> <li>DOWNLOAD_MIRROR ( <code>china</code> | <code>bfsu</code> ): select download mirror for <code>toolchain</code> and <code>debian/ubuntu packages</code><ul> <li><code>china</code>: use <code>mirrors.tuna.tsinghua.edu.cn</code>; it will be very fast thanks to Tsinghua University</li> <li><code>bfsu</code>: use <code>mirrors.bfsu.edu.cn</code>, the mirror of Beijing Foreign Studies University</li> <li>leave empty to use official source</li> </ul> </li> <li>ARMBIAN_MIRROR (auto): override automated mirror selection, example \u2018ARMBIAN_MIRROR=\u201dhttps://yourlocalmirror.com\u201d\u2018</li> <li>MAINLINE_MIRROR ( <code>google</code> | <code>tuna</code> | <code>bfsu</code> ): select mainline mirror of <code>linux-stable.git</code><ul> <li><code>google</code>: use the mirror provided by Google, the same as <code>USE_MAINLINE_GOOGLE_MIRROR=yes</code></li> <li><code>tuna</code>: use the mirror provided by Tsinghua University</li> <li><code>bfsu</code>: use the mirror provided by Beijing Foreign Studies University, which is similar to <code>tuna</code></li> <li>leave empty to use the official <code>git.kernel.org</code>, which may be very slow for mainland China users</li> </ul> </li> <li>UBOOT_MIRROR \uff08 <code>github</code> | <code>gitee</code> : select mainline mirror of <code>u-boot.git</code><ul> <li><code>github</code>: use the mirror provided by github, the same as <code>USE_GITHUB_UBOOT_MIRROR=yes</code></li> <li><code>gitee</code>: use the mirror provided by Gitee, a Chinese git services</li> <li>leave empty to use the official <code>source.denx.de</code>, which may be very slow for mainland China users</li> </ul> </li> <li>GITHUB_MIRROR ( <code>fastgit</code> | <code>gitclone</code> | <code>cnpmjs</code> ): select download mirror for GitHub hosted repository<ul> <li><code>fastgit</code>: use the mirror provided by fastgit.org</li> <li><code>gitclone</code>: use the mirror provided by gitclone.com</li> <li><code>cnpmjs</code>: use the mirror provided by cnpmjs.org</li> <li>leave empty to connect directly to GitHub, which may be very slow for mainland China users</li> </ul> </li> <li>REGIONAL_MIRROR ( <code>china</code> ): select mirrors based on regional setting, will not overwrite explicitly specified mirror option<ul> <li><code>china</code>: MAINLINE_MIRROR=<code>tuna</code>, UBOOT_MIRROR=<code>gitee</code>, GITHUB_MIRROR=<code>fastgit</code>, DOWNLOAD_MIRROR=<code>china</code></li> <li>leave empty to use default settings</li> </ul> </li> <li>ROOT_FS_CREATE_ONLY ( yes | no ): set to yes to force local cache creation</li> <li>EXTRAWIFI ( yes | no ): include several drivers for WiFi adapters</li> <li>DISABLE_KERNEL_PATCHES ( yes | no ): Disable all Armbian-specific kernel patches and build a vanilla kernel instead. Also disables <code>EXTRAWIFI</code></li> </ul>"},{"location":"Developer-Guide_Building-with-Docker/","title":"Building with Docker","text":""},{"location":"Developer-Guide_Building-with-Docker/#officially-supported-and-tested-method-for-building-with-docker","title":"Officially supported and tested method for building with Docker","text":"<p>This method works for building u-boot and kernel packages as well as building full OS images. Note!  To write fresh-builded image directly to sdcard or other block device you have to enable  Docker run in <code>privileged</code> mode. Uncomment line <code>DOCKER_FLAGS+=(--privileged)</code> in file <code>userpatches\\config-docker.conf</code> or your own docker-config file.</p> <p>Building additional packages (<code>EXTERNAL_NEW</code>) is not supported.</p>"},{"location":"Developer-Guide_Building-with-Docker/#requirements","title":"Requirements","text":"<ul> <li>x86/x64/aarch64/armhf Linux host that supports running a recent Docker daemon. Refer to Docker documentation for details.</li> <li>Docker version 17.06 CE or newer. </li> <li>Enough free disk space on the storage used for Docker containers and named volumes. Named volumes path can be changed using standard Docker utilites,   refer to Docker documentation for details.</li> </ul> <p>Installation (https://docs.docker.com/engine/install/)</p>"},{"location":"Developer-Guide_Building-with-Docker/#details","title":"Details","text":"<p>There are 3 options to start build process:</p> <p>1. By passing configuration file name (<code>config-&lt;conf_name&gt;.conf</code>), stored in <code>userpatches</code> directory, as an argument: Text Only<pre><code>./compile.sh docker &lt;conf_name&gt;\n</code></pre> 2. By passing addtional line arguments to <code>compile.sh</code> after <code>docker</code>: Text Only<pre><code>./compile.sh docker KERNEL_ONLY=yes BOARD=cubietruck BRANCH=current KERNEL_CONFIGURE=yes\n</code></pre> 3. Interactively run inside docker container Text Only<pre><code>./compile.sh docker-shell BOARD=rockpi-4a BRANCH=edge RELEASE=jammy\n</code></pre></p> <p>The process creates and runs a named Docker container <code>armbian</code> with two named volumes <code>armbian-cache</code> and <code>armbian-ccache</code>, and mounts local directories <code>output</code> and <code>userpatches</code>.</p> <p>Options 1 and 2 compile the same as without Docker but in separate environment to prevent changes to the base system.</p> <p>The dockerfile of the created container is placed in <code>userpatches</code> directory, and all container-related options can be changed in <code>userpatches/config-docker.conf</code> file. Templates of both files are located in the <code>config/templates</code> directory.</p>"},{"location":"Developer-Guide_Building-with-Docker/#docker-shell-interactive-mode","title":"docker-shell interactive mode","text":"<p>The docker-shell interactive mode is useful for when you need to do more than just \u201cmake an image.\u201d This mode allows you to edit U-Boot and kernel sources before and after applying patches, investigate compilation errors, and so on.</p> <p>This mode also allows you to manually run individual steps of the build process.</p> <p>First, start docker-shell on the host build system: Text Only<pre><code>@droid:~/armbian$ ./compile.sh docker-shell RELEASE=bullseye BOARD=rockpi-4a BRANCH=edge\n</code></pre> From there, <code>RELEASE=bullseye BOARD=rockpi-4a BRANCH=edge</code> are passed into shell and will be set into envirounment variables. </p> <p>Next, we can simply start building an image: Text Only<pre><code>root@75ec76203b65:~/armbian# ./compile.sh\n</code></pre> Alternatively, you can run any function defined in the compile.sh script.</p> <p>For example, to compile U-Boot, prepare the environment with: Text Only<pre><code>./compile.sh default prepare_host compile_sunxi_tools install_rkbin_tools\n</code></pre> Then, build U-Boot: Text Only<pre><code>./compile.sh default compile_uboot\n</code></pre> To compile only the source code as it is without patching or modifications, run: Text Only<pre><code>./compile.sh default COMPILE_ONLY=yes compile_uboot\n</code></pre> Note that you must enter docker-shell after a docker build, as you must download all of the required toolchains and sourcecodes beforehand.</p>"},{"location":"Developer-Guide_Building-with-Multipass/","title":"Building with Multipass","text":"<p>In order to build an Armbian image from scratch, whether for development purposes or to apply user customizations on top of a base image, a build environment is required. Per the Armbian documentation, Ubuntu 22.04 is the officially supported build platform. </p> <p>Multipass that is designed for quick and painless provisioning of Ubuntu VMs.</p>"},{"location":"Developer-Guide_Building-with-Multipass/#creating-a-vm-and-preparing-for-build","title":"Creating a VM and preparing for build","text":"<p>Multipass is available for macOS, Windows and Linux platforms.</p> <p>Once you have multipass installed, a Jammy (22.04) instance with 4 CPUs, 4GB of RAM and 25GB of space available can be provisioned with a single command:</p> Bash<pre><code>multipass launch --cpus 4 --disk 25G --mem 4G --name jammy\n</code></pre>"},{"location":"Developer-Guide_Building-with-Multipass/#clone-the-build-repo","title":"Clone the build repo","text":"<p>You can run commands direct on the instance to clone the build repo:</p> Bash<pre><code>multipass exec jammy -- bash -c \"git clone --depth 1 https://github.com/armbian/build\" \n</code></pre>"},{"location":"Developer-Guide_Building-with-Multipass/#use-an-instance","title":"Use an instance","text":"<p>Then you can get a shell to the instance and run the build as needed:</p> Bash<pre><code>C:\\&gt; multipass shell armbian\nWelcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.4.0-48-generic x86_64)\nLast login: Tue Jan 30 12:23:08 2024 from 172.22.111.1\n# Let's get building!  \nubuntu@armbian:~$ cd build\nubuntu@armbian:~/build$ ./compile.sh BOARD=orangepizero ... etc\n</code></pre>"},{"location":"Developer-Guide_Building-with-Multipass/#share-data-with-an-instance","title":"Share data with an instance","text":"<p>The recommended way to share data between your host and an instance with Multipass is the command:mount Bash<pre><code>multipass mount /my/dir jammy\nmultipass info jammy\n</code></pre></p> <p>Mounts:         /my/dir =&gt; /my/dir</p> <p>From this point on will be available inside the instance./my/dir</p>"},{"location":"Developer-Guide_Extensions-Hooks/","title":"Extension Hooks","text":"<ul> <li>This file is autogenerated by the armbian/build repository.</li> </ul>"},{"location":"Developer-Guide_Extensions-Hooks/#hooks","title":"Hooks","text":"<ul> <li>Hooks are listed in the order they are called.</li> </ul>"},{"location":"Developer-Guide_Extensions-Hooks/#post_family_config","title":"<code>post_family_config</code>","text":"<p>give the config a chance to override the family/arch defaults</p> <p>This hook is called after the family configuration (<code>sources/families/xxx.conf</code>) is sourced. Since the family can override values from the user configuration and the board configuration, it is often used to in turn override those.</p> <p>Also known as (for backwards compatibility only):</p> <ul> <li><code>config_tweaks_post_family_config</code></li> </ul>"},{"location":"Developer-Guide_Extensions-Hooks/#user_config","title":"<code>user_config</code>","text":"<p>Invoke function with user override</p> <p>Allows for overriding configuration values set anywhere else. It is called after sourcing the <code>lib.config</code> file if it exists, but before assembling any package lists.</p>"},{"location":"Developer-Guide_Extensions-Hooks/#extension_prepare_config","title":"<code>extension_prepare_config</code>","text":"<p>allow extensions to prepare their own config, after user config is done</p> <p>Implementors should preserve variable values pre-set, but can default values an/or validate them. This runs after user_config. Don\u2019t change anything not coming from other variables or meant to be configured by the user.</p>"},{"location":"Developer-Guide_Extensions-Hooks/#post_aggregate_packages","title":"<code>post_aggregate_packages</code>","text":"<p>For final user override, using a function, after all aggregations are done</p> <p>Called after aggregating all package lists, before the end of <code>compilation.sh</code>. Packages will still be installed after this is called, so it is the last chance to confirm or change any packages.</p> <p>Also known as (for backwards compatibility only):</p> <ul> <li><code>user_config_post_aggregate_packages</code></li> </ul>"},{"location":"Developer-Guide_Extensions-Hooks/#post_determine_cthreads","title":"<code>post_determine_cthreads</code>","text":"<p>give config a chance modify CTHREADS programatically. A build server may work better with hyperthreads-1 for example.</p> <p>Called early, before any compilation work starts.</p> <p>Also known as (for backwards compatibility only):</p> <ul> <li><code>config_post_determine_cthreads</code></li> </ul>"},{"location":"Developer-Guide_Extensions-Hooks/#add_host_dependencies","title":"<code>add_host_dependencies</code>","text":"<p>run before installing host dependencies</p> <p>you can add packages to install, space separated, to ${EXTRA_BUILD_DEPS} here.</p>"},{"location":"Developer-Guide_Extensions-Hooks/#fetch_sources_tools","title":"<code>fetch_sources_tools</code>","text":"<p>fetch host-side sources needed for tools and build</p> <p>Run early to fetch_from_repo or otherwise obtain sources for needed tools.</p>"},{"location":"Developer-Guide_Extensions-Hooks/#build_host_tools","title":"<code>build_host_tools</code>","text":"<p>build needed tools for the build, host-side</p> <p>After sources are fetched, build host-side tools needed for the build.</p>"},{"location":"Developer-Guide_Extensions-Hooks/#pre_install_distribution_specific","title":"<code>pre_install_distribution_specific</code>","text":"<p>give config a chance to act before install_distribution_specific</p> <p>Called after <code>create_rootfs_cache</code> (prepare basic rootfs: unpack cache or create from scratch) but before <code>install_distribution_specific</code> (install distribution and board specific applications).</p> <p>Also known as (for backwards compatibility only):</p> <ul> <li><code>config_pre_install_distribution_specific</code></li> </ul>"},{"location":"Developer-Guide_Extensions-Hooks/#pre_install_kernel_debs","title":"<code>pre_install_kernel_debs</code>","text":"<p>called before installing the Armbian-built kernel deb packages</p> <p>It is not too late to <code>unset KERNELSOURCE</code> here and avoid kernel install.</p>"},{"location":"Developer-Guide_Extensions-Hooks/#post_install_kernel_debs","title":"<code>post_install_kernel_debs</code>","text":"<p>allow config to do more with the installed kernel/headers</p> <p>Called after packages, u-boot, kernel and headers installed in the chroot, but before the BSP is installed. If <code>KERNELSOURCE</code> is (still?) unset after this, Armbian-built firmware will not be installed.</p>"},{"location":"Developer-Guide_Extensions-Hooks/#post_family_tweaks","title":"<code>post_family_tweaks</code>","text":"<p>customize the tweaks made by $LINUXFAMILY-specific family_tweaks</p> <p>It is run after packages are installed in the rootfs, but before enabling additional services. It allows implementors access to the rootfs (<code>${SDCARD}</code>) in its pristine state after packages are installed.</p>"},{"location":"Developer-Guide_Extensions-Hooks/#pre_customize_image","title":"<code>pre_customize_image</code>","text":"<p>run before customize-image.sh</p> <p>This hook is called before <code>customize-image.sh</code> is executed and before the overlay is mounted. It thus can be used for the same purposes as <code>customize-image.sh</code> without the overlay.</p> <p>Also known as (for backwards compatibility only):</p> <ul> <li><code>image_tweaks_pre_customize</code></li> </ul>"},{"location":"Developer-Guide_Extensions-Hooks/#post_customize_image","title":"<code>post_customize_image</code>","text":"<p>post customize-image.sh hook</p> <p>Run after the customize-image.sh script is run, and the overlay is unmounted.</p> <p>Also known as (for backwards compatibility only):</p> <ul> <li><code>image_tweaks_post_customize</code></li> </ul>"},{"location":"Developer-Guide_Extensions-Hooks/#post_post_debootstrap_tweaks","title":"<code>post_post_debootstrap_tweaks</code>","text":"<p>run after removing diversions and qemu with chroot unmounted</p> <p>Last chance to touch the <code>${SDCARD}</code> filesystem before it is copied to the final media. It is too late to run any chrooted commands, since the supporting filesystems are already unmounted.</p> <p>Also known as (for backwards compatibility only):</p> <ul> <li><code>config_post_debootstrap_tweaks</code></li> </ul>"},{"location":"Developer-Guide_Extensions-Hooks/#pre_prepare_partitions","title":"<code>pre_prepare_partitions</code>","text":"<p>allow custom options for mkfs</p> <p>Good time to change stuff like mkfs opts, types etc.</p> <p>Also known as (for backwards compatibility only):</p> <ul> <li><code>prepare_partitions_custom</code></li> </ul>"},{"location":"Developer-Guide_Extensions-Hooks/#prepare_image_size","title":"<code>prepare_image_size</code>","text":"<p>allow dynamically determining the size based on the $rootfs_size</p> <p>Called after <code>${rootfs_size}</code> is known, but before <code>${FIXED_IMAGE_SIZE}</code> is taken into account. A good spot to determine <code>FIXED_IMAGE_SIZE</code> based on <code>rootfs_size</code>. UEFISIZE can be set to 0 for no UEFI partition, or to a size in MiB to include one. Last chance to set <code>USE_HOOK_FOR_PARTITION</code>=yes and then implement create_partition_table hook_point.</p> <p>Also known as (for backwards compatibility only):</p> <ul> <li><code>config_prepare_image_size</code></li> </ul>"},{"location":"Developer-Guide_Extensions-Hooks/#post_create_partitions","title":"<code>post_create_partitions</code>","text":"<p>called after all partitions are created, but not yet formatted</p>"},{"location":"Developer-Guide_Extensions-Hooks/#format_partitions","title":"<code>format_partitions</code>","text":"<p>if you created your own partitions, this would be a good time to format them</p> <p>The loop device is mounted, so ${LOOP}p1 is it\u2019s first partition etc.</p>"},{"location":"Developer-Guide_Extensions-Hooks/#pre_update_initramfs","title":"<code>pre_update_initramfs</code>","text":"<p>allow config to hack into the initramfs create process</p> <p>Called after rsync has synced both <code>/root</code> and <code>/root</code> on the target, but before calling <code>update_initramfs</code>.</p> <p>Also known as (for backwards compatibility only):</p> <ul> <li><code>config_pre_update_initramfs</code></li> </ul>"},{"location":"Developer-Guide_Extensions-Hooks/#pre_umount_final_image","title":"<code>pre_umount_final_image</code>","text":"<p>allow config to hack into the image before the unmount</p> <p>Called before unmounting both <code>/root</code> and <code>/boot</code>.</p> <p>Also known as (for backwards compatibility only):</p> <ul> <li><code>config_pre_umount_final_image</code></li> </ul>"},{"location":"Developer-Guide_Extensions-Hooks/#post_umount_final_image","title":"<code>post_umount_final_image</code>","text":"<p>allow config to hack into the image after the unmount</p> <p>Called after unmounting both <code>/root</code> and <code>/boot</code>.</p> <p>Also known as (for backwards compatibility only):</p> <ul> <li><code>config_post_umount_final_image</code></li> </ul>"},{"location":"Developer-Guide_Extensions-Hooks/#post_build_image","title":"<code>post_build_image</code>","text":"<p>custom post build hook</p> <p>Called after the final .img file is built, before it is (possibly) written to an SD writer.</p> <ul> <li>NOTE: this hook used to take an argument ($1) for the final image produced.     - Now it is passed as an environment variable <code>${FINAL_IMAGE_FILE}</code>       It is the last possible chance to modify <code>$CARD_DEVICE</code>.</li> </ul>"},{"location":"Developer-Guide_Extensions-Hooks/#run_after_build","title":"<code>run_after_build</code>","text":"<p>hook for function to run after build, i.e. to change owner of <code>$SRC</code></p> <p>Really one of the last hooks ever called. The build has ended. Congratulations.</p> <ul> <li>NOTE: this will run only if there were no errors during build process.</li> </ul>"},{"location":"Developer-Guide_Extensions-Hooks/#extension_metadata_ready","title":"<code>extension_metadata_ready</code>","text":"<p>meta-Meta time!</p> <p>Implement this hook to work with/on the meta-data made available by the extension manager. Interesting stuff to process:</p> <ul> <li><code>\"${EXTENSION_MANAGER_TMP_DIR}/hook_point_calls.txt\"</code> contains a list of all hook points called, in order.</li> <li>For each hook_point in the list, more files will have metadata about that hook point.     - <code>${EXTENSION_MANAGER_TMP_DIR}/hook_point.orig.md</code> contains the hook documentation at the call site (inline docs),       hopefully in Markdown format.     - <code>${EXTENSION_MANAGER_TMP_DIR}/hook_point.compat</code> contains the compatibility names for the hooks.     - <code>${EXTENSION_MANAGER_TMP_DIR}/hook_point.exports</code> contains exported environment variables.     - <code>${EXTENSION_MANAGER_TMP_DIR}/hook_point.vars</code> contains all environment variables.</li> <li><code>${defined_hook_point_functions}</code> is a map of all the defined hook point functions and their extension information.</li> <li><code>${hook_point_function_trace_sources}</code> is a map of all the hook point functions that were really called during the   build and their BASH_SOURCE information.</li> <li><code>${hook_point_function_trace_lines}</code> is the same, but BASH_LINENO info. After this hook is done,   the <code>${EXTENSION_MANAGER_TMP_DIR}</code> will be removed.</li> </ul>"},{"location":"Developer-Guide_Extensions/","title":"Extensions","text":"<p>\u201cI\u2019m gonna create a <code>prepare_bootloader</code> hook [in core] so we can refactor <code>u-boot</code> [into an extension]\u201d</p> <p>The extensions framework allows the board/family developers, extension authors, and users to extend the Armbian build system without overloading the core with specific functionality.</p> <p>It\u2019s a simple framework, written in Bash, that works based on function naming conventions. It provides the core and the extensions with tracing and debugging, (error control,?) inline documentation and very simple dependency resolution.</p>"},{"location":"Developer-Guide_Extensions/#terminology","title":"Terminology","text":"<ul> <li>The \u201ccore\u201d is everything that\u2019s in <code>lib/</code> directory plus <code>compile.sh</code> and some others. It\u2019s the spine of the build system.</li> <li>An \u201cextension\u201d is a separate Bash source file that contains exclusively functions. Extensions live in <code>extensions/</code> or <code>userpatches/extensions/</code> directory, but could one day be in a separate repository too.</li> <li>An \u201cextension method\u201d (a.k.a \u201chook\u201d) is used by the core to call extensions, via <code>call_extension_method()</code>. This will discover all enabled extension methods implementations, order them, and call them one by one.     - The Armbian core already has quite a few of these in strategic spots.     - More are coming as they\u2019re identified.</li> <li>An \u201cextension method implementation\u201d is a function that will be called when it\u2019s extension method is called. It can be defined in extensions, but also in board config, family config, user config, etc.</li> </ul>"},{"location":"Developer-Guide_Extensions/#example","title":"Example","text":""},{"location":"Developer-Guide_Extensions/#core-calls-extensions","title":"Core calls extensions","text":"<p>The Armbian core build system has an extension method called <code>run_after_build</code>, also known as the \u201c<code>run_after_build</code> hook\u201d. You can find it in <code>lib/main.sh</code> around line 546.</p> Bash<pre><code># in lib/main.sh:546\ncall_extension_method \"run_after_build\" [...]\n</code></pre>"},{"location":"Developer-Guide_Extensions/#extension-method-implementation","title":"Extension method implementation","text":"<p>Consider the following function:</p> Bash<pre><code>function run_after_build__say_congratulations() { \n  echo \"Congrats, the build is finished!\"\n}\n</code></pre> <p>Such a function is an \u201cextension method implementation\u201d called <code>say_congratulations</code> for the extension method <code>run_after_build</code>.</p>"},{"location":"Developer-Guide_Extensions/#extension-file","title":"Extension file","text":"<p>A file <code>userpatches/extensions/be-festive.sh</code> containing the above function is an \u201cextension\u201d called <code>be-festive</code>.</p>"},{"location":"Developer-Guide_Extensions/#using-it","title":"Using it","text":"<p>An user of the build system can enable that extension by adding a call to <code>enable_extension \"be-festive\"</code> on his configuration file, or by passing <code>ENABLE_EXTENSIONS=be-festive</code> as a parameter to the build.</p>"},{"location":"Developer-Guide_Extensions/#naming-conventions-and-ordering","title":"Naming conventions and ordering","text":"<p>An extension method implementation is just a Bash function that follows the pattern <code>run_after_build__say_congratulations</code> where</p> <ul> <li><code>run_after_build</code> is the name of the extension method.</li> <li><code>__</code> is a marker/separator \u2013 very important \u2013 two underscores, not one, not three.</li> <li><code>say_congratulations</code> is the name of the extension method implementation, and should be unique.</li> </ul> <p>The system will \u201cmagically\u201d compose a single <code>run_after_build()</code> function, based on all the hook functions that begin with <code>run_after_build__</code>.</p> <p>Hook functions will be sorted by their numerical value; hook functions that do not begin with a number will receive <code>500_</code> prefix automatically.</p> <p>So the examples <code>run_after_build__do_this</code> and <code>run_after_build__500_do_this</code> are equivalent, and will run</p> <ul> <li>sooner than <code>run_after_build__900_do_smth_else</code></li> <li>later than <code>run_after_build__300_do_even_another_thing</code></li> </ul>"},{"location":"Developer-Guide_Extensions/#what-is-an-extension","title":"What is an extension?","text":"<p>A extension is Bash source file that contains exclusively:</p> <ul> <li>function definitions:     - extension method implementation definitions (with <code>__</code> separator)     - other internal functions (for structure and clarity if needed)</li> <li>calls to <code>enable_extension \"another-extension\"</code> at the top of the file.     - that\u2019s a very simple dependency system, one extension can enable another.</li> </ul> <p>Specifically, extension files should not contain any code outside of functions \u2013 they should do nothing when sourced.</p> <p>Extensions can be official Armbian fragments and live in <code>/extensions</code>, or can be user-specific in <code>/userpatches/extensions</code>.</p> <p>An extension could be implemented in any of the following file/dir structures:</p> <ul> <li><code>/extensions/our-ext.sh</code> - an official, single-file extension.</li> <li><code>/userpatches/extensions/my-ext.sh</code> - a user-specific, single-file extension.</li> <li><code>/extensions/our-dir-ext/our-dir-ext.sh</code> - an official, directory-based extension.</li> <li><code>/userpatches/extensions/my-dir-ext/my-dir-ext.sh</code> - a user-specific, directory-based extensions.</li> </ul> <p>The official extensions can be used by boards, family includes, etc, while the user-specific extensions can only be used by userpatches code or via <code>ENABLE_EXTENSIONS=my-ext,my-dir-ext</code> build parameter.</p>"},{"location":"Developer-Guide_Extensions/#single-file-vs-directory-based","title":"Single-file vs Directory-based","text":"<p>They\u2019re the same, except:</p> <ul> <li>Directory-based extensions will be passed a <code>${EXTENSION_DIR}</code> environment variable.</li> <li>That is useful if there are other files/assets that belong together with that extension. An example would be a template file, some configuration file, or other static asset that is directly related to the extension.</li> <li>Using directory-based extensions and <code>${EXTENSION_DIR}</code> allows for easy moving and PR\u2019ing of user extensions.</li> </ul>"},{"location":"Developer-Guide_Overview/","title":"Overview","text":""},{"location":"Developer-Guide_Overview/#what-it-does","title":"What it does?","text":"<ul> <li>Builds custom kernel, image or a Debian based Linux distribution optimized for low-resource hardware,</li> <li>Include filesystem generation, low-level control software, kernel image and bootloader compilation,</li> <li>Provides a consistent user experience by keeping system standards across different platforms.</li> </ul> <pre><code>graph LR\n  A[./compile.sh] --&gt; B{Change&lt;br&gt;kernel&lt;br&gt;config};\n  B ---&gt; |yes| C[\"HW\"];\n  B ---&gt; |no| C[\"HW\"];\n  C ---&gt; |branch| D[\"legacy&lt;br&gt;vendor&lt;br&gt;current&lt;br&gt;edge\"];\n  D --&gt; |base| E[\"Debian&lt;br&gt;Ubuntu\"];\n  E ---&gt; |type| F[\"CLI\"];\n  F ---&gt; |type| G[\"Server\"];\n  F ---&gt; |type| H[\"Minimal\"];\n  E ---&gt; I[\"Desktop\"];\n  I ---&gt; K[\"XFCE\"];\n  I ---&gt; L[\"Gnome\"];\n  I ---&gt; M[\"Cinammon\"];\n  I ---&gt; N[\"KDE Neon\"];</code></pre>"},{"location":"Developer-Guide_Overview/#key-advantages","title":"Key Advantages","text":"<ul> <li>Simplicity with interactive graphical interface.</li> <li>Generates widely recognized and well maintained userspace</li> <li>Fast learning curve for complex operations</li> </ul> <p>Check other similarities, advantages and disadvantages compared with leading industry standard build software.</p> Function Armbian Yocto Buildroot Target general purpose embedded embedded / IOT U-boot and kernel compiled from sources compiled from sources compiled from sources Board support maintenance \u00a0 complete outside outside Root file system Debian or Ubuntu based custom custom Package manager APT any none Configurability limited large large Initramfs support yes yes yes Getting started quick very slow slow Cross compilation yes yes yes"},{"location":"Developer-Guide_User-Configurations/","title":"User Configuration","text":""},{"location":"Developer-Guide_User-Configurations/#user-provided-patches","title":"User provided patches","text":"<p>You can add your own patches outside the build script. Place your patches inside the appropriate directory, for kernel or u-boot. There are no limitations except that all patches must have the file name extension <code>.patch</code>. <code>userpatches</code> directory structure mirrors directory structure of <code>patch</code>. Look for the hint at the beginning of patching process to select the proper directory for patches. Example:</p> Text Only<pre><code>[ o.k. ] Started patching process for [ kernel sunxi-edge 4.4.0-rc6 ]\n[ o.k. ] Looking for user patches in [ userpatches/kernel/sunxi-edge ]\n</code></pre> <p>Patches with the same file name and path in the <code>userpatches</code> directory tree override those in the <code>patch</code> directory. To replace a patch provided by Armbian maintainers, copy it from <code>patch</code> to the corresponding directory in <code>userpatches</code> and edit it to your needs. To disable a patch, create an empty file in the corresponding directory in <code>userpatches</code>.</p>"},{"location":"Developer-Guide_User-Configurations/#user-provided-configuration","title":"User provided configuration","text":"<p>A configuration file named <code>userpatches/config-&lt;something&gt;.conf.sh</code> (<code>.conf</code> also allowed) is a bash script that is sourced during the build if <code>./compile.sh something</code> is issued. All parameters which normally are passed via command line can be used (<code>PARAM1=value1</code> <code>PARAM2=value</code>) by using the same syntax, one separate line per <code>PARAM</code>. Command-line parameters still can override what is the config file. More advanced use cases can use conditionals, define functions to implement hooks, source other/common config files, etc. A few, quite complex, examples can be found here.</p>"},{"location":"Developer-Guide_User-Configurations/#legacy-user-provided-configuration-deprecated-support-for-this-will-be-removed-at-some-point","title":"Legacy user provided configuration (deprecated, support for this will be removed at some point)","text":"<p>If the file <code>userpatches/lib.config</code> exists, it will be called and can override the particular kernel and u-boot versions. For a comprehensive list of available variables, look through  <code>lib/functions/configuration/main-config.sh</code>. Some examples of what you can change:</p> Text Only<pre><code>[[ $LINUXFAMILY == sunxi64 &amp;&amp; $BRANCH == edge ]] &amp;&amp; BOOTBRANCH='tag:v2017.09' # conditionally change u-boot git branch/tag\nKERNELBRANCH=\"tag:v5.4.28\" #always change to this kernel tag\n</code></pre>"},{"location":"Developer-Guide_User-Configurations/#user-provided-kernel-config","title":"User provided kernel config","text":"<p>If the file <code>userpatches/linux-$LINUXFAMILY-$BRANCH.config</code> exists, it will be used instead of the default one from <code>config</code>. Look for the hint at the beginning of the kernel compilation process to select the proper config file name. Example:</p> Text Only<pre><code>[ o.k. ] Compiling current kernel [ 5.10.47 ]\n[ o.k. ] Using kernel config provided by user [ userpatches/linux-rockchip64-current.config ]\n</code></pre>"},{"location":"Developer-Guide_User-Configurations/#user-provided-sources-config-overrides","title":"User provided sources config overrides","text":"<p>If file <code>userpatches/sources/$LINUXFAMILY.conf</code> exists, it will be used in addition to the default one from <code>config/sources</code>. Look for the hint at the beginning of the compilation process to select the proper config file name. Please note that there are some exceptions for LINUXFAMILY like <code>sunxi</code> (32-bit mainline sunxi) and <code>sunxi64</code> (64-bit mainline sunxi)</p> <p>Example:</p> Text Only<pre><code>[ o.k. ] Adding user provided sunxi64 overrides\n</code></pre>"},{"location":"Developer-Guide_User-Configurations/#user-provided-image-customization-script","title":"User provided image customization script","text":"<p>You can run additional commands to customize the created image. Edit this file:</p> Text Only<pre><code>userpatches/customize-image.sh\n</code></pre> <p>and place your code here. You may test the values of variables noted in the file to use different commands for different configurations. Those commands will be executed in a chroot environment just before finalizing the image.</p> <p>To add files to the image easily, put them in <code>userpatches/overlay</code> and access them in <code>/tmp/overlay</code> from <code>customize-image.sh</code></p> <p>Be advised that even though you are compiling an image on an amd64 machine, any additional apt packages you configure or commands you run in customize-image.sh will be automatically installed/executed/virtualized for the architecture of the build target SBC.</p>"},{"location":"Developer-Guide_User-Configurations/#partitioning-of-the-sd-card","title":"Partitioning of the SD card","text":"<p>In case you define <code>$FIXED_IMAGE_SIZE</code> at build time the partition containing the rootfs will be made of this size. Default behaviour when this is not defined is to shrink the partition to minimum size at build time and expand it to the card\u2019s maximum capacity at boot time (leaving an unpartitioned spare area of ~5% when the size is 4GB or less to help the SD card\u2019s controller with wear leveling and garbage collection on old/slow cards).</p> <p>You can prevent the partition expansion from within <code>customize-image.sh</code> by a <code>touch /root/.no_rootfs_resize</code> or configure the resize operation by either a percentage or a sector count using <code>/root/.rootfs_resize</code> (<code>50%</code> will use only half of the card\u2019s size if the image size doesn\u2019t exceed this or <code>3887103s</code> for example will use sector 3887103 as partition end. Values without either <code>%</code> or <code>s</code> will be ignored).</p>"},{"location":"Developer-Guide_Welcome/","title":"Welcome to the Armbian build framework documentation!","text":"<p>Overview:</p>"},{"location":"Developer-Guide_Welcome/#ansi-logging","title":"(ANSI) Logging","text":"<p>Log output is stored in <code>output/logs</code> and provided in a few different formats. ANSI coloring is applied to both the screen and the log files themselves. Please add <code>SHARE_LOG=yes</code> to automatically upload logs to our paste service and provide us with the given url when reporting issues. That will allows us to check the logs on a web browser and keep to correct formatting.</p>"},{"location":"Developer-Guide_Welcome/#command-line-syntax-has-changed","title":"Command line syntax has changed","text":"<p>General CLI syntax: <code>./compile.sh PARAM=value OTHER_PARAM=other_value [&lt;configfile&gt; &lt;configfile&gt; ...] [&lt;command&gt;]</code></p> <ul> <li>where <code>command</code> defaults to <code>build</code> if not specified; could also be <code>kernel-config</code> or <code>u-boot</code> etc\u2026</li> <li>config file names must not have the same name as a possible <code>&lt;command&gt;</code> (system will check &amp; bomb if so)</li> <li>also: there is no more <code>default</code> config \u2013 you have to be explicit</li> <li>also: there is no more <code>docker</code> config \u2013 Docker is fully auto-managed now. The system will complain if you have one.</li> <li>parameters like <code>PARAM=value</code>, <code>&lt;configfile&gt;</code> or <code>&lt;command&gt;</code> can be applied in any order.</li> </ul>"},{"location":"Developer-Guide_Welcome/#no-more-config-defaultconf-config-file-name-needs-to-be-specified-in-the-command-line","title":"No more <code>config-default.conf</code>, config file name needs to be specified in the command line","text":"<ul> <li>No \u201cdefault\u201d config is auto-loaded anymore. Default config lead to unreproducible failing builds and was a source of   confusion.</li> <li>The configs still go to the same place, <code>userpatches/config-xyz.conf</code> \u2013 but the name has to be provided to the build system to,   like <code>./compile.sh BOARD=xxx xyz</code>; otherwise works the same.</li> </ul>"},{"location":"Developer-Guide_Welcome/#artifacts-cache-what-the","title":"Artifacts, cache, what the \u2026?","text":"<p>The <code>armbian/build</code> system is currently undergoing refactoring to improve its structure. Previously, the build system was a single, very complex bash script that mixed the building of <code>.deb</code> packages with the creation of images.</p> <p>This was reworked into a <code>1-to-N</code> image-to-artifact dependency tree; a certain image build will depend on N possible \u201cartifacts\u201d. Artifacts are either <code>.deb</code> packages, a <code>.tar</code> of multiple <code>.deb</code> packages, or a <code>rootfs.tar.zstd</code>. Each artifact can be individually built, and has a specific name and a version.</p> <p>Each artifact is also now cached by default using OCI storage at ghcr.io (GitHub Container Registry). To achieve consistent caching, each artifact produces a version that includes hashes of its composing files, variables, patches, hooks, external git SHA1 references, etc. That way we can consistently check the remote OCI cache for previously-built artifacts, and possibly save image builders from having to build heavy packages just to produce an image.</p>"},{"location":"Developer-Guide_Welcome/#tldr-about-artifacts-and-caching","title":"TL;DR about artifacts and caching:","text":"<ul> <li><code>KERNEL_ONLY=yes</code> and <code>KERNEL_ONLY=no</code> are deprecated. Use the <code>kernel</code> CLI command instead.</li> <li><code>ARTIFACT_IGNORE_CACHE=yes</code> can help with false positives. Please also report the problem, with a complete logfile.</li> </ul>"},{"location":"Developer-Guide_Welcome/#automatic-dockersudo-launcher","title":"Automatic Docker/sudo launcher","text":"<ul> <li><code>compile.sh</code> will prefer to use Docker if it detects Docker is installed and working.     - This handles Docker Desktop and Rancher Desktop (in Docker emulation mode) under macOS/Darwin, including Apple       M1/M2.     - You don\u2019t need and actually can\u2019t have the old docker config file.</li> <li>If Docker is not installed, it will try to use <code>sudo</code> to run the build as root.</li> <li>If you run directly as root, it will give a warning and asks to run without <code>sudo</code>.</li> </ul>"},{"location":"Developer-Guide_Welcome/#kernel-git-trees-shallow-vs-full","title":"Kernel Git Trees: shallow vs full","text":"<p>During the build, depending on which local or remote caches are hit, it might be necessary to build the Linux Kernel from scratch.</p> <p>The kernel\u2019s git repo is huge. Most build systems resort to fetching \u201cshallow\u201d trees directly from upstream git servers, to save bandwidth. Unfortunately that creates immense extra CPU load on the git servers. To avoid this problem, Armbian produces daily automated git tree exports cached in ghcr.io OCI repositories, and only uses <code>git fetch</code> to update the relatively small new changes from the upstream git server.</p> <p>There are two types of cached Kernel git trees:</p> <ul> <li><code>full</code> is a complete git tree, including all of Torvald\u2019s <code>master</code> and all of the currently-supported <code>stable</code>   branches.     - <code>full</code> is very large download and requires a lot of disk space.     - <code>full</code> is more useful over time and when building multiple different kernels on the same machine, like for CI       servers or developer workstations.</li> <li><code>shallow</code> is a shallow tree for a specific <code>stable</code> branch     - <code>shallow</code> is a much smaller download and requires less disk space     - <code>shallow</code> is appropriate for restricted devices like SBCs which will build a single kernel</li> </ul> <p>**TL;DR: ** <code>KERNEL_GIT=full</code> or <code>KERNEL_GIT=shallow</code> or let the system decide for you.</p>"},{"location":"Developer-Guide_Welcome/#consider-forking-before-cloning-the-repo","title":"Consider forking before cloning the repo","text":"<p>Before cloning the repo, consider forking it first. This will allow you to make changes and submit pull requests. You will need a GitHub account to do this; see GitHub\u2019s documentation for more information. If you fork, make sure to keep your fork up-to-date with the main repo, by rebasing your fork.</p>"},{"location":"Developer-Guide_Welcome/#some-really-confusing-stuff-still-remains","title":"Some really confusing stuff still remains","text":"<p>This is (by far) not a complete list:</p> <ul> <li>wifi/other kernel drivers are still using pre-armbian-next code, and are very hard to work with. it is not only the   contents are a mess, the way the whole thing works leads to more and more compounding work. To make it worse, family   patches sometimes need to patch driver code, leading to a cycle of sadness for developers. We are still coming up with   a plan to completely replace this lest most of us go insane.</li> <li>although \u201caggregation\u201d has been rewritten in Python, it still mostly works using the legacy principle, by scanning   directories and files in a very complex and error-prone way. This is a source of many bugs and confusion. We plan to   replace this with pure extensions eventually.</li> <li>we have mostly working kernel headers (linux-headers pkg) for 5.10+ including some vendor kernels</li> </ul>"},{"location":"Developer-Guide_Welcome/#multiple-u-boots-for-same-board","title":"Multiple u-boot\u2019s for same board","text":"<p>We can build u-boot twice, using <code>UBOOT_TARGET_MAP</code>. Some example I did in https://github.com/armbian/build/blob/main/config/boards/odroidhc4.conf#L15-L20 may help.</p>"},{"location":"Development-Code_Review_Procedures_and_Guidelines/","title":"Development Code Review Procedures and Guidelines","text":""},{"location":"Development-Code_Review_Procedures_and_Guidelines/#Development-Code-Review-Procedures-and-Guidelines","title":"Development Code Review Procedures and Guidelines","text":"<p>     This topic should give you as a developer a brief overview about what you should do, must do, aswell as can and can not do. What you as devepoler can expect from Armbian and what we expect from you. </p><p> </p>"},{"location":"Development-Code_Review_Procedures_and_Guidelines/#Requirements","title":"Requirements:","text":"<p>     Even though you may already be a developer, just to make sure, here is an outline of the expectations for this process: </p> Review Approve Merge Github ID Armbian Github Organisation Collaborator Armbian Github Organisation Member <p>Armbian Organization Members are required to have:</p><ul> <li>An account on Armbian Community Forums</li> <li>An account on Armbian Jira</li> <ol> <li>Register Atlassian account</li> <li>Request R/W access to Armbian Jira</li> </ol> <li>Enabled 2FA for their GitHub account</li> </ul><p>You should know development basics like how to get an Armbian image running on your hardware, do basic debugging, building a kernel and how to use the Armbian build system.</p><p> </p>"},{"location":"Development-Code_Review_Procedures_and_Guidelines/#Code-Review","title":"Code Review:","text":"<p> Some helpful guidelines for pull requests and code reviews </p><p>     It has often been said that programming is part art, part science - that is because lots of times there is no single, simple solution to a problem. Or if there is, we might not know about it. There is also an infamous joke that if there are n developers in the room, then there are n+1 opinions on how things should be done. That being said, here are some guidelines that should prevent friction when submitting or reviewing code. </p>"},{"location":"Development-Code_Review_Procedures_and_Guidelines/#The-most-important-thing","title":"The most important thing","text":"The code has to work.<p>Unless you open a PR (\u201cpull request\u201d) as a work in progress, the code should be built and tested on a device or emulator. Do not rely on CI test automation!</p><p>If you have touched the build files and changed build setup, it is useful to test the whole build from scratch (clean build) and all of the types and flavours. If you updated external libraries, test the pertaining features. If you changed the build version, make a build and test that the version is correct.</p><p>Having people review your code is one thing, but you should not expect them to also test the code for you when not explicitly asked for.</p><p></p>"},{"location":"Development-Code_Review_Procedures_and_Guidelines/#Context","title":"Context","text":"<p>One important thing that lots of guidelines forget to mention is the context of the pull request: Sometimes it is a big refactor, sometimes it is a new feature, sometimes it is a bugfix. Some of those might be more urgent than others, and sometimes you might be under pressure to ship ASAP so the code might not be perfect or there will not be any tests or code might not be extendable. That is ok.</p>"},{"location":"Development-Code_Review_Procedures_and_Guidelines/#Everyone","title":"Everyone","text":"<li>There is no perfect code: good enough is usually good enough. That being said, try to keep the number of WTFs per minute to a minimum.</li><li>Accept that many programming decisions are opinions. Discuss trade-offs, which you prefer, and reach a resolution quickly.</li><li>Ask for clarification. (\"I didn't understand. Can you clarify?\")</li><li>Offer clarification, explain the decisions you made to reach a solution in question.     Avoid using terms that could be seen as referring to personal traits. (\"dumb\", \"stupid\"). Assume everyone is intelligent and well-meaning.</li><li>Be humble. (\"I'm not sure - let's look it up.\")</li><li>Do not use hyperbole (\"always\", \"never\", \"endlessly\", \"nothing\"). Avoid sarcasm.</li><li>Remember that you are both on the same side - the goal is to make the code better. Understand that sometimes your ideas will be overruled. Even if you do turn out to be right, do not take revenge or say, \"I told you so\".</li><li>Talk synchronously (e.g. chat, screensharing, in person) if there are too many \"I didn't understand\" or \"Alternative solution:\" comments. Pull requests should not be the place for long discussions, architectural or otherwise. </li><li>Put notes on what is missing or could be improved in the PR description or comments. You can also make a Jira ticket with discussions points and possible problems or things to do and discuss it offline.</li>"},{"location":"Development-Code_Review_Procedures_and_Guidelines/#As-a-Code-Submitter","title":"As a Code Submitter","text":"<li>PRs should be about one thing. If you do multiple things in one PR, it is hard to review. If you are fixing stuff as you go, you might want to make atomic commits and then cherry-pick those commits into separate branches, leaving the PR clean.</li><li>Try to keep the PRs small. </li><li>Having a PR description is useful. Additionally, you can also link to the Jira ticket. </li><li>Ideally, the PR should be finished when submitted. If the PR is work in progress, add (WIP) or [WIP] to the title.</li><li>You should have tests that at least cover the logic, and ideally also cover the input/output parameters and methods. (depends on context)</li><li>Make sure to add a documentation PR when needed https://github.com/armbian/documentation</li>"},{"location":"Development-Code_Review_Procedures_and_Guidelines/#As-a-Reviewer","title":"As a Reviewer","text":"<li>Reviewing code is part of a normal workday. You should check for open/updated PRs / Jira ticket as often as you can.</li><li>Ask, do not tell. (\u201cWhat do you think about trying\u2026?\u201d rather than \u201cDon\u2019t do\u2026\u201d)</li><li>Offer ways to simplify or improve code.</li><li>Code beautification and refactoring ought to be tasks in the next sprint, except for obvious and easy-to-fix things.</li><li>Communicate which ideas you feel strongly about and those you do not. Explain your reasons why code should be changed. (Not in line with the style guide? A personal preference?)</li><li>If you disagree strongly, consider giving it a few minutes before responding; think before you react.</li><li>Offer alternative implementations, but assume the author already considered them. (\"What do you think about using a custom validator here?\")</li><li>If discussions turn too theoretical or touch big architectural questions, move the discussion offline. In the meantime, let the author make the final decision on alternative implementations.</li><li>Do not keep the code hostage. Keep in mind the context and the most important thing - does it work?</li>"},{"location":"Development-Code_Review_Procedures_and_Guidelines/#Merging-a-merge-request","title":"Merging a merge request","text":""},{"location":"Development-Code_Review_Procedures_and_Guidelines/#Before-making-the-decision-to-merge","title":"Before making the decision to merge:","text":"<li>Set a milestone.</li><li>Consider warnings and errors from Github CI bots, code quality bots, and other reports. Unless a strong case can be made for the violation, these should be resolved before merging. A comment must be posted if the PR is merged with any failed job.</li><li>If the PR contains both quality and non-quality-related changes, the PR should be merged by the relevant maintainer or senior software engineer after the quality related changes are approved by more then one software engineer.</li><p>If a pull request is fundamentally ready, but needs only trivial fixes (such as typos), consider demonstrating a bias for action by making those changes directly without going back to the author. You can do this by using the suggest changes feature to apply your own suggestions to the pull request.</p><p>Note that:</p><li>merging is limited to Armbian Github Organization members, you can  apply here to become one, if you have not already been invited.</li><li>If the changes are not straightforward, please prefer allowing the author to make the change.</li><li>Before applying suggestions, edit the pull request to make sure squash and merge is enabled</li><p>Authors are not authorized to merge their own pull requests and need to seek approval from another maintainer / developer to merge.</p>"},{"location":"Development-Code_Review_Procedures_and_Guidelines/#Armbians-Assistance","title":"Armbian's Assistance","text":"<p>If you have questions about being a developer or want to learn more and deeper insights about the build framework, Armbian will try to guide you to the appropriate documentation or information in a best-effort fashion. If time allows, at our descrection, we will try our best to explain and teach you personally various aspects about our processes. If best effort guidance is not enough, contact us for professional assistance.</p><p>If you have any concerns please do not hesitate to reach out via forums, IRC or Discord. Armbian cares about the people who care about Armbian </p>"},{"location":"Development-Code_Review_Procedures_and_Guidelines/#References--Sources","title":"References / Sources:","text":"<ul> <li>https://github.com/thoughtbot/guides/tree/master/code-review</li> <li>https://github.com/blog/1943-how-to-write-the-perfect-pull-request</li> <li>https://blog.codinghorror.com/the-ten-commandments-of-egoless-programming/</li> <li>https://hackernoon.com/tagged/code-review</li> <li>https://hackernoon.com/the-art-of-pull-requests-6f0f099850f9</li> <li>https://gist.github.com/mrsasha/8d511770ad9b282f3a5d0f5c8acdd10e</li> <li>https://docs.gitlab.com/ee/development/code_review.html#everyone</li> </ul>"},{"location":"Mirrors/","title":"How the Armbian Mirror System Works","text":""},{"location":"Mirrors/#introduction","title":"Introduction","text":"<p>The Armbian mirror system is designed to efficiently distribute files, ensuring users get the best available server based on geographic proximity and server availability. This document outlines the mirroring system\u2019s operational flow, technical specifications for mirrors, and how to contribute a new server.</p> <p></p>"},{"location":"Mirrors/#operational-flow","title":"Operational Flow","text":"<ol> <li> <p>User Request </p> <ul> <li>A user initiates a file download (system image, package, etc.) from Armbian using a standard URL (e.g., <code>https://dl.armbian.com</code>).  </li> </ul> </li> <li> <p>Redirector Server Processing </p> <ul> <li>The redirector server processes the request and determines the best available mirror based on:  <ul> <li>User\u2019s geographic location  </li> <li>Mirror server status and load  </li> <li>Availability of the requested files  </li> </ul> </li> </ul> </li> <li> <p>Mirror Assignment </p> <ul> <li>The redirector server provides a direct URL to the most suitable mirror.  </li> <li>The user is automatically redirected to the designated server.  </li> </ul> </li> <li> <p>Download from Assigned Mirror </p> <ul> <li>The user downloads the file directly from the assigned mirror, optimizing speed and reducing load on the main infrastructure.  </li> </ul> </li> </ol>"},{"location":"Mirrors/#benefits-of-the-mirroring-system","title":"Benefits of the Mirroring System","text":"<ul> <li>Load balancing: Requests are distributed across multiple servers to prevent congestion.  </li> <li>Faster downloads: Users are served by the closest available mirror.  </li> <li>Redundancy and reliability: If a mirror is unavailable, the redirector automatically assigns an alternative.  </li> </ul>"},{"location":"Mirrors/#how-to-contribute-a-mirror","title":"How to Contribute a Mirror","text":"<p>If you would like to contribute to the Armbian project by providing a mirror, follow these steps:  </p>"},{"location":"Mirrors/#1-choose-the-target-and-set-up-an-httphttps-hostname","title":"1. Choose the target and set up an HTTP/HTTPS hostname","text":"<p>- The mirror must be accessible via HTTP, and HTTPS is preferred.  </p>"},{"location":"Mirrors/#2-set-up-synchronization-via-rsync","title":"2. Set up synchronization via <code>rsync</code>","text":"<p>- Sync files from one of the official repositories using the following commands:  </p> Content Command Required Space Current images <code>rsync -av rsync://rsync.armbian.com/dl</code> 556G Packages <code>rsync -av rsync://rsync.armbian.com/apt</code> 84G Archived images <code>rsync -av rsync://rsync.armbian.com/archive</code> 1.9T Very old images <code>rsync -av rsync://rsync.armbian.com/oldarchive</code> 5.4T <p>- Set up a cron job to sync every 2-4 hours.  </p>"},{"location":"Mirrors/#3-inform-us-about-your-mirror","title":"3. Inform us about your mirror","text":"<p>- Once your server is configured, contact us via the contact form to integrate it into the official redirector system.  </p> <p>Contributing a mirror helps improve Armbian\u2019s file distribution, ensuring faster and more reliable downloads for the global community.  </p>"},{"location":"Mirrors/#current-mirrors","title":"Current Mirrors","text":"Site Time Zone Flag Speed Packages Images Archive Rsync Atomo\u00a0Networks Europe/Rome 2500\u00a0Mbps Auroradev\u00a0Chicago America/Chicago 1000\u00a0Mbps Auroradev\u00a0Las\u00a0Vegas America/Los_Angeles 10000\u00a0Mbps Nardol Europe/Paris 1000\u00a0Mbps Systemonachip Europe/Vienna 1000\u00a0Mbps TNA\u00a0Hosting America/New_York 1000\u00a0Mbps Naho.moe\u00a0Australia Australia/Sydney 10000\u00a0Mbps SBC\u00a0mirror\u00a0Australia Australia/Sydney 1000\u00a0Mbps Naho.moe\u00a0Germany Europe/Berlin 1000\u00a0Mbps Fast\u00a0Mirror Europe/Kiev 1000\u00a0Mbps SBC\u00a0mirror\u00a0Spain Europe/Madrid 1000\u00a0Mbps Hetzner\u00a0Germany Europe/Berlin 1000\u00a0Mbps Imola Europe/Ljubljana 1000\u00a0Mbps Naho.noe\u00a0India Asia/Kolkata 1000\u00a0Mbps Naho.moe\u00a0Japan Asia/Tokyo 10000\u00a0Mbps Naho.moe\u00a0Korea Asia/Seoul 1000\u00a0Mbps Kspace\u00a0Estonia Europe/Tallinn 10000\u00a0Mbps Albony Asia/Kolkata 1000\u00a0Mbps Macarne\u00a0LLC Europe/Amsterdam 50000\u00a0Mbps SteeMan America/Chicago 1000\u00a0Mbps Airframes\u00a0Europe Europe/Berlin 1000\u00a0Mbps Hostiko Europe/Kiev 20000\u00a0Mbps ISCAS Asia/Shanghai 10000\u00a0Mbps OSS\u00a0Planet Asia/Taipei 1000\u00a0Mbps Alibaba\u00a0Mirrors Asia/Shanghai 10000\u00a0Mbps BFSU Asia/Shanghai 10000\u00a0Mbps c0urier.net Europe/Copenhagen 1000\u00a0Mbps dotsrc.org Europe/Copenhagen 20000\u00a0Mbps Jevin\u00a0Canders\u00a0LLC America/New_York 10000\u00a0Mbps SJTU Asia/Shanghai 10000\u00a0Mbps Lahansons America/Los_Angeles 10000\u00a0Mbps Nanjing\u00a0University Asia/Shanghai 10000\u00a0Mbps Shandong\u00a0University Asia/Shanghai 10000\u00a0Mbps Shanghai\u00a0Tech\u00a0University Asia/Shanghai 10000\u00a0Mbps SUSTech Asia/Shanghai 10000\u00a0Mbps Tsinghua\u00a0University Asia/Shanghai 10000\u00a0Mbps USTC Asia/Shanghai 10000\u00a0Mbps xTom Europe/Berlin 10000\u00a0Mbps Digital\u00a0Streaming\u00a0Co. Asia/Taipei 50000\u00a0Mbps Airframes\u00a0Phoenix America/Phoenix 1000\u00a0Mbps Airframes\u00a0Seattle America/Los_Angeles 1000\u00a0Mbps Airframes\u00a0Seattle America/Los_Angeles 1000\u00a0Mbps Airframes\u00a0St\u00a0Louis America/Chicago 1000\u00a0Mbps VineHost.NET Europe/London 1000\u00a0Mbps Yandex Europe/Moscow 10000\u00a0Mbps Netcup\u00a0Germany Europe/Berlin 2500\u00a0Mbps Netcup\u00a0Germany Europe/Berlin 2500\u00a0Mbps Netcup\u00a0Germany Europe/Berlin 2500\u00a0Mbps Netcup\u00a0Germany Europe/Berlin 2500\u00a0Mbps Netcup\u00a0Germany Europe/Berlin 2500\u00a0Mbps Jing\u00a0Rocks Asia/Tokyo 10000\u00a0Mbps Naho.moe\u00a0Singapore Asia/Singapore 1000\u00a0Mbps SBC\u00a0mirror\u00a0Singapore Asia/Singapore 1000\u00a0Mbps JetHome Europe/Moscow 2000\u00a0Mbps Naho.moe\u00a0UK Europe/London 1000\u00a0Mbps Naho.noe\u00a0USA\u00a0west America/New_York 1000\u00a0Mbps Xogium Europe/Paris 500\u00a0Mbps"},{"location":"Process_Armbian-Task-Tracking/","title":"Armbian Task Management","text":""},{"location":"Process_Armbian-Task-Tracking/#overview","title":"Overview","text":"<p>TLDR; Keep task discussions in the forum. GitHub Issues are just for task metadata.</p> <p>Tasks associated with code will have an issue created in GitHub, but all dialog regarding tasks will reside on the forum in a topic containing the github Issue ID of the task.</p>"},{"location":"Process_Armbian-Task-Tracking/#what-is-a-task","title":"What is a task?","text":"<p>A task is something actionable that results in some sort of tangible output. ex: code, documentation, QA findings.</p> <p>Example sources of tasks include: feature requests, bugs, QA, general following of development roadmap.</p> <p>Not all support issues are tasks, but a support issue can generate a task.</p>"},{"location":"Process_Armbian-Task-Tracking/#task-creation-procedure","title":"Task Creation Procedure","text":"<ol> <li>Create issue in Armbian GitHub Repo under appropriate milestone     - </li> <li>Copy the numeric ID of issue created</li> <li>Create new topic under the Tasks subforum on the Armbian Forums     - Use the the naming convention of <code>[ISSUE_ID] - Issue Name</code>     - </li> <li>Copy the URL of task subforum topic just created</li> <li> <p>Create comment on GitHub Issue with the following Content: </p> Text Only<pre><code>  Please keep all discussion for this issue on the forum topic available below:\n\n  [URL](URL)\n</code></pre> <p>- </p> </li> <li> <p>Lock comments on GitHub Issue</p> </li> </ol>"},{"location":"Process_Armbian-Task-Tracking/#task-tracking-with-github-issues","title":"Task tracking with GitHub Issues","text":"<p>GitHub Issues provide an easy method to track and filter tasks by using tags and milestones.  Issues also make it easy to easily associate commits and merge requests with a task.  Effectively we just use GitHub issues for the metadata for reporting.</p>"},{"location":"Process_Armbian-Task-Tracking/#labels","title":"Labels","text":"<p>Use labels identify the purpose of a task.</p> <ul> <li><code>bug</code> is used to tag tasks that address Armbian-level bugs</li> <li><code>not-our-bug</code> is used to identify tasks that are bugs in upstream code.  They are not Armbian bugs, but may impact Armbian.</li> <li><code>enhancement</code> is used to identify tasks that are new features for Armbian.</li> </ul>"},{"location":"Process_Armbian-Task-Tracking/#milestones","title":"Milestones","text":"<p>Use milestones to divide tasks into claimed and unclaimed work.</p> <ul> <li><code>claimed tasks</code> milestone contains tasks which have been assigned.</li> <li><code>unclaimed tasks</code> milestone contains tasks that need an owner.</li> </ul>"},{"location":"Process_Armbian-Task-Tracking/#forum-tasks","title":"Forum Tasks","text":""},{"location":"Process_Armbian-Task-Tracking/#converting-a-topic-to-a-task","title":"Converting a topic to a task","text":"<p>Sometimes support discussions can become tasks.   A forum admin can assist in moving the topic to Tasks forum group.  A cooresponding issue will need to be created.</p>"},{"location":"Process_Armbian-Task-Tracking/#future-process-improvements","title":"Future Process Improvements","text":"<p>Enhancements desired for this process (This should be a task!)</p>"},{"location":"Process_Armbian-Task-Tracking/#issue-hook","title":"Issue Hook","text":"<p>Ideally we can have a forum topic created upon issue creation.  This will save some time.</p>"},{"location":"Process_CI/","title":"Automation for developers and maintainers","text":"<p>Core automation for generating images for release are held at armbian/os</p>"},{"location":"Process_CI/#prepare-build-lists","title":"Prepare build lists","text":""},{"location":"Process_CI/#recommended-images","title":"Recommended images","text":"<p>Recommended images on download pages are defined via regular expression mapping file https://github.com/armbian/os/blob/main/exposed.map (for changes sent PR to this file)</p> <p>Example:</p> Text Only<pre><code>bananapim7/archive/Armbian_[0-9].*Bananapim7_noble_vendor_[0-9]*.[0-9]*.[0-9]*_gnome-kisak_desktop.img.xz\nbananapim7/archive/Armbian_[0-9].*Bananapim7_bookworm_vendor_[0-9]*.[0-9]*.[0-9]*_minimal.img.xz\n</code></pre> <p></p>"},{"location":"Process_CI/#build-templates","title":"Build templates","text":"<p>They have definitions on what kind of images we want to build - for section or for one specific board:</p> YAML<pre><code>userpatches/targets-release-apps.template\nuserpatches/targets-release-community-maintained.template\nuserpatches/targets-release-nightly.template\nuserpatches/targets-release-standard-support.template\n</code></pre> <p>From those templates we are autogenerating YAML files, which are passed to build matrix as input. Make sure to review generated YAML files if they have wanted build targets with correct exensions enabled.</p>"},{"location":"Process_CI/#grouping-logic","title":"Grouping logic","text":"<p>Boards are automatically divided into sections and each section is appendend to certain build scenario (minimal Debian image, Ubuntu testing with KDE, \u2026), which is defined in template.</p> Section Condition standard-support-slow-hdmi HAS_VIDEO_OUTPUT = yes AND ARCH = armhf standard-support-fast-hdmi HAS_VIDEO_OUTPUT = yes AND ARCH = arm64 standard-support-headless HAS_VIDEO_OUTPUT = no standard-support-riscv64 ARCH = riscv64 <p>Example: if you want automated images without a desktop, add <code>HAS_VIDEO_OUTPUT=no</code> in board config file. Automation will only build two CLI images, Ubuntu server and Debian minimal. Which is suitable for hardware that will most likely be used headless.</p>"},{"location":"Process_CI/#blacklisting","title":"Blacklisting","text":"<p>Autogeneration is excluded for boards that are on blacklists:</p> YAML<pre><code>userpatches/targets-automation.blacklist\nuserpatches/targets-automation-nightly.blacklist\n</code></pre> <p>We do this if we are not happy with the automation outcomes and want to define build targets in the template.</p>"},{"location":"Process_CI/#extensions","title":"Extensions","text":"<p>Each board variant can have additional extensions and they are defined in this file:</p> Text Only<pre><code>userpatches/targets-extensions.map\n</code></pre> <p>Example:</p> Text Only<pre><code>khadas-edge2,legacy:vendor:,ENABLE_EXTENSIONS=\"image-output-oowow,v4l2loopback-dkms,mesa-vpu\"\n</code></pre>"},{"location":"Process_CI/#testing","title":"Testing","text":"<p>Unfortunatelly this part does not have testing at PR stage.</p>"},{"location":"Process_CI/#prepare-standard-support-images-for-release","title":"Prepare Standard Support images for release","text":"Info <p>Manual executing permissions are tied to release manager role.</p> <p></p> <p>This build workflow is executed manually when making:</p> <ul> <li>a set of images for specific device</li> <li>a set of images for specific maintainer</li> <li>a full set of stable release images (default)</li> </ul> <p>Notes:</p> <ul> <li>this process prepares images for release without pushing them to the download pages</li> <li>you can only generate images that are defined in targets-release-standard-support.yaml build lists!</li> <li>images generation workflows are compiled and are pretty much the same, just with different defaults</li> </ul>"},{"location":"Process_CI/#1-open-workflow-and-click","title":"1. Open workflow and click","text":""},{"location":"Process_CI/#2-select-board","title":"2. Select board","text":"<p>Bump version: Select if you want to trigger system wide version bump. Version override: Set version under which you want to release images.</p> <p>Images versions are stored in JSON files: - https://github.com/armbian/os/blob/main/stable.json - https://github.com/armbian/os/blob/main/nightly.json</p>"},{"location":"Process_CI/#3-run-workflow","title":"3. Run workflow","text":"<p>(Workflow takes around 15 minutes to complete. In case of network issues it can also take hours)</p> <p>Generated images are uploaded to incoming folder https://rsync.armbian.com/incoming/ under your GitHub username and once they are confirmed working, please notify @igorpecovnik to move them to official download pages. Once images are moved to main download section, automation refreshes download pages index within 15-30 minutes.</p>"},{"location":"Process_CI/#aditional-options","title":"Aditional options","text":"<p>Generates stable images defined in targets-release-standard-support.yaml. </p> <p>We are generating several images for each download / hardware target. They are automatically sorted by sections:</p> <ul> <li>Desktop releases</li> <li>Server and IOT releases</li> <li>Dedicated applications</li> </ul> <p>Images generation can be customized:</p> <ul> <li>Framework build branch<ul> <li>main (make images from trunk)</li> <li>vXX.X (previous stable release)</li> </ul> </li> <li>Bump Version (system wide version bump)</li> <li>Version override (in case you don\u2019t want to use latest)</li> <li>Board (make images for one board only)</li> <li>Maintainer (make images for selected maintainer)</li> </ul>"},{"location":"Process_CI/#prepare-application-images-for-release-release-manager","title":"Prepare application images for release (release manager)","text":"<p>This build workflow is executed manually when making:</p> <ul> <li>a set of application images for specific device</li> <li>a set of application images for specific maintainer</li> <li>a full set of application images (default)</li> </ul> <p>Notes:</p> <ul> <li>application images are released 10-15 minutes after build finishes succesfully</li> <li>you can only generate images for applications that are defined in targets-release-apps.yaml build lists!</li> <li>images generation workflows are compiled and are pretty much the same, just with different defaults</li> </ul>"},{"location":"Process_CI/#1-open-workflow-and-click_1","title":"1. Open workflow and click","text":""},{"location":"Process_CI/#2-select-board_1","title":"2. Select board","text":"<p>Version override: Use this feature if you want to keep them under the same version, but not lower then last released.</p>"},{"location":"Process_CI/#3-run-workflow_1","title":"3. Run workflow","text":"<p>(Workflow takes around 15 minutes to complete. In case of network issues it can also take hours)</p> <p>Generated images are hosted at GitHub https://github.com/armbian/distribution/releases and released at once. Automation refreshes download pages within 15-30 minutes after/if workflow finished succesfully.</p> <p></p>"},{"location":"Process_CI/#aditional-options_1","title":"Aditional options","text":"<p>Generates dedicated application images defined in targets-release-apps.yaml. This file is autogenerated from targets-release-apps.template. (You always edit template)</p> <p>Images generation can be customized:</p> <ul> <li>framework build branch<ul> <li>main (make images from trunk)</li> <li>vXX.X (previous stable release)</li> </ul> </li> <li>Bump Version (system wide version bump)</li> <li>Version override (in case you don\u2019t want to use latest)</li> <li>board (make images only for one board)</li> <li>maintainer (make images for selected maintainer)</li> </ul>"},{"location":"Process_CI/#repository-update-cronjobrelease-manager","title":"Repository update (cronjob/release manager)","text":"<p>This pulls packages from build framework OCI cache located at GitHub and from various 3rd party repositories such as Chrome, Chromium, Code, Discord, (latest) ZFS, Thunderbird, Zoom, \u2026 and pushes them to:</p> <ul> <li><code>apt.armbian.com</code> (only new packages are added)</li> <li><code>beta.armbian.com</code> (whole repository is recreated from scratch)</li> </ul>"},{"location":"Process_CI/#1-open-workflow-and-click_2","title":"1. Open workflow and click","text":"<p>Action is executed automatically when artifact generations completes. Or manually.</p>"},{"location":"Process_CI/#2-include-artifacts-from-generated-images","title":"2. Include artifacts from generated image(s)","text":"<p>When - [ ] Add https://netcup.armbian.com/partial/ to stable repo</p> <p>is selected.</p>"},{"location":"Process_CI/#3-run-workflow_2","title":"3. Run workflow","text":"<p>(Workflow takes around 60 minutes to complete)</p>"},{"location":"Process_CI/#build-all-artifacts-cronjob","title":"Build all artifacts (cronjob)","text":"<p>Generates all build artifacts cache for targets defined in targets-all-not-eos.yaml. This build job runs every 8 hours and can also be run manually when needed. </p> <p>This build job needs to be successfully completed in order to proceed generating any OS images!</p>"},{"location":"Process_CI/#build-rolling-release-images-cronjob","title":"Build Rolling Release Images (cronjob)","text":"<p>Generates all nighly (Rolling Release) images defined in targets-release-nightly.yaml.  This file is autogenerated from targets-release-nightly.template. </p> <p>This build job runs every day at 9 a.m. UTC and can also be run manually when needed. Download pages are refreshed automatically after successful build.</p> <p></p>"},{"location":"Process_CI/#watchdog-cronjob","title":"Watchdog (cronjob)","text":"<p>Runs every 15 minutes and re-trigger failed builds six (6) times before finally gives out. This addresses various instabilities when building many artifacts on different hardware: </p> <ul> <li>network timeouts</li> <li>artifact download failure</li> <li>loop devices allocation failure</li> <li>runner running low on space</li> </ul>"},{"location":"Process_CI/#smoke-tests-on-hardware-devices-release-manager","title":"Smoke tests on hardware devices (release manager)","text":"<p>Smoke testing is preliminary testing to reveal simple failures severe enough to, for example, reject a prospective software release. Our test case is constructed of three steps:</p> <p></p> <ul> <li>powering test equipment, consistent from several network switches, power supplies and dozens of hardware platforms</li> <li>running upgrade, reboot, repository switch, reboot, \u2026 tests in parallel</li> <li>uploading a test report as build artifact followed by powering the devices off.</li> </ul>"},{"location":"Process_CI/#automatic-pull-requests-labeler-pr","title":"Automatic Pull Requests Labeler (PR)","text":"<p>Automatically label new pull request based on the paths of files which are being changed. Configuration file can be found in:</p> Text Only<pre><code>    .github/labeler.yml\n</code></pre>"},{"location":"Process_CI/#full-distro-test-builds-cronjobrelease-manager","title":"Full distro test builds (cronjob/release manager)","text":"<p>Generates all supported build combinations (minimal, cli, desktops) for x86 architecture to check package level changes inconsistency and dependencies.</p> <p>Options:</p> <ul> <li>Framework build branch<ul> <li>main</li> <li>testing_branch (string)</li> </ul> </li> </ul>"},{"location":"Process_CI/#build-all-artifacts-adminpr","title":"Build all artifacts (admin/PR)","text":"<p>Generates artifacts at Pull Requests code. Build starts when label of Pull Request is set to \u201cBuild\u201d. Requires administration privileges.</p>"},{"location":"Process_CI/#lint-on-shell-scripts-pr","title":"Lint on shell scripts (PR)","text":"<p>Run ShellCheck on changed shell scripts and report problems within. Linting runs automatically on pull requests.</p>"},{"location":"Process_CI/#update-tools-in-build-scripts-cronjobadmin","title":"Update tools in build scripts (cronjob/admin)","text":"<p>Some of our scripts download tools from a repo. These cannot be bumped by Dependabot, so this workflow is a self-created Dependabot to bump versions of those tools to stay up-to-date. This workflow only creates a PR if the version was actually updated. To add a new tool, it just needs to be added to the matrix in the script by filling out all the variables.</p>"},{"location":"Process_CI/#scorecards-security-scan-pr","title":"Scorecards security scan (PR)","text":"<p>Scorecards is an automated tool that assesses a number of important heuristics (\u201cchecks\u201d) associated with software security and assigns each check a score of 0-10. You can use these scores to understand specific areas to improve in order to strengthen the security posture of your project. You can also assess the risks that dependencies introduce, and make informed decisions about accepting these risks, evaluating alternative solutions, or working with the maintainers to make improvements.</p>"},{"location":"Process_CI/#kernel-hardening-analysis-pr","title":"Kernel hardening analysis (PR)","text":"<p>This analysis checks kernel configs and run if changed. There are plenty of security hardening options for the Linux kernel. A lot of them are not enabled by the major distros. We have to enable these options ourselves to make our systems more secure.</p>"},{"location":"Process_Contribute/","title":"Collaborate on the project","text":""},{"location":"Process_Contribute/#overview","title":"Overview","text":"<ol> <li>Fork the project.</li> <li>Make one or more well commented and clean commits to the repository. </li> <li>Perform a pull request in Github\u2019s web interface.</li> </ol> <p>If it is a new feature request, do not start the coding first. Remember to open an issue to discuss the new feature. If you want to add code to someone else pull request. Also check collection of git tips which will make your life easier.</p> <p>If you are struggling, check WEB or CLI step-by-step guide on contributing.</p>"},{"location":"Process_Contribute/#source-code","title":"Source code","text":"<ul> <li>Armbian build framework: armbian/build</li> <li>Armbian configuration utility: armbian/configng</li> <li>Armbian documentation: armbian/documentation</li> </ul>"},{"location":"Process_Contribute/#adding-a-new-board","title":"Adding a new board?","text":"<p>There are no detailed instructions on how to add a new board or even a whole new board family to the build script yet. However there are a few commits / pull requests that give clues how to achieve that like</p> <ul> <li>https://github.com/armbian/build/pull/3176/files</li> <li>https://github.com/armbian/build/pull/3138/files</li> </ul>"},{"location":"Process_Contribute/#board-maintainer","title":"Board maintainer","text":"<p>If you are interested in being a maintainer please review Board Support Rules. Then apply here and wait for acceptance. Once accepted you will be added to our infrastructure. For this reason we need additional information to complete your registration process.</p> <p>Requirements?</p> <ul> <li>You must have access to the hardware you applied to maintain</li> <li>You must have a Github ID which should be listed in the documentation</li> <li>You must have a forums account</li> <li>You must have an Jira account and keep track of issues filed for your board</li> <li>You must make sure Armbian management has been informed of all of the above IDs for our documentation</li> <li>You should know Armbian basics like how to get an Armbian image run on your hardware and do basic debugging, ideally via serial console</li> <li>Knowledge in development, writing code and so on is optional but welcome</li> </ul>"},{"location":"Process_Contribute/#expectations","title":"Expectations","text":"<p>Maintainers must not necessarily be persons with development experience. They act as a intersection between end-users and the development team and serve the developers in best-effort manner. They are encouraged to answer basic/simple user questions (if possible, also best effort) without having to bother the development team. They are allowed to record bugs but are not allowed to escalate bugs. Team leaders do.</p> <p>Take note that it is still up to development team\u2019s discretion what gets attention since Armbian has to plan carefully how to spend its very limited resources.</p> <ul> <li>You must participate in release process. Ideally you attend meetings related to releases. On that occasion you are given the chance to point out critical issues with your board.</li> <li>You must sign-off that device has been tested, is stable, and ready for release during release process. This basically means you test images that are getting prepared for release https://rsync.armbian.com/incoming/</li> </ul> <p>What are we looking for?</p> <ul> <li>does the board boot to both CLI and Desktop?</li> <li>is the desktop usable?</li> <li>does USB work? (at all or partially)</li> <li>other things such as wireless, audio</li> </ul> <p>If something does not work, this is fine and normal. The important part is that it is documented and we get notified about the issues. Known problems should be placed into the Jira ticket and link placed to the board download page. While not required, you should have a build environment setup so you can build images with the most recent images and test them right away. Your feedback, either positive or negative, is very welcome. You are free to add comments to every commit and pull request.</p> <p>Ideally you have multiple microSD cards laying around to test regular updates on current releases and nightly without having to re-flash the same card every time to switch between branches.</p> <p>Alternatively you can use auto-built images - they are placed at the ever end of each board download pages under \u201cRolling releases\u201d.</p> <ul> <li>You must provide \u201cbest effort\u201d support in the forum. Do not let that wording intimidate you. This is not a complicated task. Regarding forums this can include things like answering obvious questions (for example by pointing to our documentation, ideally directly to the solution page), let the questioner know that additional information is needed for further debugging (e.g. request \u201carmbianmonitor -u\u201d output) or for upgrade issues, ask if they can recreate the issue with a fresh untouched image from: https://www.armbian.com/download/</li> </ul> <ul> <li>You must provide \u201cbest effort\u201d support in Jira. Review submitted issues for you board made by Armbian\u2019s contributors</li> </ul>"},{"location":"Process_Contribute/#release-manager","title":"Release manager","text":"<p>This role has additional permission that allows preparation of images for release.</p> <p>Release managers: https://github.com/orgs/armbian/teams/release-manager</p>"},{"location":"Process_Managing_Workflow/","title":"Jira","text":"<p>Jira where development work is entered and prioritized. https://armbian.atlassian.net/</p>"},{"location":"Process_Managing_Workflow/#issue-types","title":"Issue Types","text":"<p>When creating issues, try to assign issue type most appropriate.   Issue type can be changed later so don\u2019t worry too much.  If possible assign to a \u201cFix Version\u201d aka Release.</p> <ul> <li>Epic - useful as placeholders for large requirements. Common objective, overall goals, contains several stories.</li> <li>Story - Smallest units of functionality that can be achieved in one or two weeks. Non-technical language.</li> <li>Task - Work that is clearly defined usually by people that will do the work. Specific, technical language.</li> </ul> <p></p>"},{"location":"Process_Managing_Workflow/#special-issue-type","title":"Special Issue Type","text":"<ul> <li>Bug - malfunction of the system, an error, flaw, or a default in the system, that causes an incorrect result.</li> </ul>"},{"location":"Process_Managing_Workflow/#work-queue","title":"Work Queue","text":"<p>The easiest way to follow the work queue Upcoming Release Kanban Board.  This board lists only work select for the upcoming release.</p> <p></p> <p>Use the filter buttons at top to quickly see unassigned work, work assigned to you, bugs, and work recently updated.</p> <p>Work is listed in 3 columns, and sorted by priority.</p> <p>Columns: * Todo     * Work prioritized to be done next     * Pick up any task from this column * In Progress     * Work In Progress * Done     * Shows recently completed work.  Has time limit to keep board clean</p>"},{"location":"Process_Managing_Workflow/#managing-work","title":"Managing Work","text":"<p>All issues for an upcoming release are assigned a \u201cFix Version\u201d to indicate release number.</p>"},{"location":"Process_Managing_Workflow/#backlog","title":"Backlog","text":"<p>With the Kanban Board, there are 2 states for the Upcoming Release backlog.</p> <ul> <li>Todo - These tasks are visible the Todo column of the Kanban board. To keep things simple, there shouldnt be more than 5-10 issues in Todo</li> <li>Backlog \u2013 Other tasks seleceted for release, but not are not visible on the Kanban board.  The purpose of this is to keep the Todo column clean and easy to work from.  As the Todo column clears, prioritize next tasks in backlog by moving them to todo.</li> </ul> <p>All issues for an upcoming release are assigned a \u201cFix Version\u201d to indicate release number.</p>"},{"location":"Process_Managing_Workflow/#mobile-access","title":"Mobile access","text":"<p>You can download the app for Android or iOS. </p>"},{"location":"Process_Release-Model/","title":"Release Model","text":""},{"location":"Process_Release-Model/#rolling-releases","title":"Rolling releases","text":"<p>Armbian provides automated daily rolling releases of small selection of images for all supported targets. Images are available at respective board download pages: https://www.armbian.com/download. Armbian also populates its own packages repository so updates are available as an upgrade for existing installations.</p>"},{"location":"Process_Release-Model/#point-releases","title":"Point releases","text":"<p>Armbian runs \u201ctrain\u201d based point releases. Whatever is ready to board the train, does so. Whatever is not has to wait for the next train. This enables us to have a predictable release cycles making it easy to plan. It also puts the responsibility on developers to make sure they have features ready on time. </p> <p>Armbian releases quarterly at the end of February, May, August, November. Offset is because we all know that nothing happens for half of December. At the beginning of a release cycle, we have a planning meeting and two weeks before the end of the release we freeze integration of new features.</p>"},{"location":"Process_Release-Model/#release-cycle","title":"Release Cycle","text":"<p>Releases last three months. Each release starts with a meeting for planning. After planning, developers and development teams build their deliverable using whatever methods (scrum, kanban, waterfall, \u2026 ) they want but shall commit their code frequently, leading up to the last 2 weeks. The project does not accept \u201cdumps\u201d of code at the end. Commit early and often on master. Two weeks before the release date, we halt feature integration and only allow bug fixes. At some point during those two weeks, we start the release candidate process. This process starts by pulling a branch off master that will become the release branch. That frees up master for development on the next release. On the release candidate branch we work on bug fixes, and choose \u201crelease candidate\u201d, RC, tags. The software at that tag is a candidate for release, and it is submitted to automated and manual tests on real hardware. If automated tests are passing, we can officially tag it as the release. If it does not, we enter another bug fix cycle and create a new release candidate. We iterate until we have a candidate that can be the formal release. Usually, this takes 2-3 cycles and 1-3 weeks of time.</p> <p>Development epics, stories and bugs for each release are tracked through Jira.</p>"},{"location":"Process_Release-Model/#release-branching-versioning-and-tags","title":"Release Branching, Versioning and Tags","text":"<p>Branches in Armbian follow this convention: </p> <ul> <li>Main branch (main): Main development will happen on the <code>main</code> branch. This is the latest and greatest branch, but is always \u201cstable\u201d and \u201cdeployable\u201d. All tests always pass on this branch.</li> <li>Release branch (v24.08 for example): This is a branch per release with frozen external sources.</li> </ul> <p>Each Armbian release will have the following version format:</p> <p>Format: <code>&lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;</code></p> <p><code>&lt;major&gt;</code> and <code>&lt;minor&gt;</code> version are incremented at the end of the release cycles while <code>&lt;revision&gt;</code> is incremented for a fix.</p>"},{"location":"Process_Release-Model/#release-naming","title":"Release Naming","text":"version codename release month work 19.11 Vaquita November done 20.02 Chiru February done 20.05 Kagu May done 20.08 Caple August done 20.11 Tamandua November done 21.02 Urubu February done 21.05 Jerboa May done 21.08 Caracal August done 21.11 Sambar November cancelled 22.02 Pig February done 22.05 Jade May done 22.08 Yapok August done 22.11 Goral November done 23.02 Quoll February done 23.05 Suni May done 23.08 Colobus August done 23.11 Topi November done 24.02 Kereru February done 24.05 Havier May done 24.08 Yelt August done 24.11 Stirk November planned 25.02 Iiwi February planned 25.05 Caiman May planned 25.08 Dunnart August planned 25.11 Brach November planned 26.02 Goa February planned <p>by https://www.codenamegenerator.com from unusual animals</p>"},{"location":"Process_Release-Model/#release-coordinating","title":"Release Coordinating","text":""},{"location":"Process_Release-Model/#summary","title":"Summary","text":"<p>A release starts as a RC branch cut from <code>main</code> at freeze time. Once a RC branch is cut, <code>main</code> can be unfrozen and development can continue. RC branch is a rolling release that accepts bug fixes. The bug fixes should be cherry-picked back to <code>main</code> branch. Once the RC is stable, a final release as a branch named after its version. A release is never merged to <code>main</code>. Once a release is complete, it only should be updated for severe bugs and security vulnerabilities. A release is only maintained until the next release.</p>"},{"location":"Process_Release-Model/#1-forum-communication","title":"1. Forum Communication","text":"<ul> <li>Create a new thread in the Armbian Project Administration forum<ul> <li>Ex topic name: <code>Armbian 24.02 (Kereru) Release Thread</code></li> </ul> </li> <li>Tag the post with relase, release version, and codename</li> <li>Use the following template to begin the body of the release thread:</li> </ul> <p>Text Only<pre><code>Release Candidate Code Freeze Date: YYYY-MM-DD\nRelease Date: YYYY-MM-DD\nRelease Candidate Branch Link: URL\nRelease Changelog: URL\nRelease Coordinator: @yourname\nTesting Tracking Sheet: https://example.com/link  (google sheets)\n\nThe goal of this thread is to discuss testing, bugfixes, and the overall quality of the release.  Once the release is complete, this thread should be locked and unpinned. \n</code></pre> - Before Code Freeze \u2013 Make note in the thread the incomplete Jira issues tagged for the release example - After test images are procuded, engage in community for assistants wih testing.. forums, Twitter, etc.  share this tool</p>"},{"location":"Process_Release-Model/#2-release-candidate-branch-management","title":"2. Release Candidate Branch Management","text":"<ul> <li>For code freeze \u2013 create a RC branch as <code>version-rc</code> ex: <code>v20.02.0-rc</code></li> <li>If possible, create Jira tickets for major changes in github that were not tracked in Jira</li> <li>Begin testing process. See Release Testing</li> <li>Do not modify branch directy. Only accept PRs</li> <li>Only accept PRs for bug fixes. No features</li> <li>Update <code>main</code> branch version to the NEXT release version with <code>-trunk</code>  ex. If RC is v20.02.0-rc <code>main</code> becomes v20.05.0-trunk</li> <li>CI testing should pass on PR</li> <li>Test images should automatically be built via Igor\u2019s script</li> <li>Repeat build, test, and bugfix process until release is stable</li> <li>Cherry-pick bug fixes back into master</li> <li>Create Final release branch from RC</li> </ul>"},{"location":"Process_Release-Model/#3-release","title":"3. Release","text":"<ul> <li>In Github create a release from final release branch Enable source freezing for this branch Text Only<pre><code>./compile.sh targets\ncp output/info/git_sources.json config/sources/\n</code></pre> following by commiting this code to build framework.</li> <li>Copy release notes generated by Jira release into Github form</li> <li>Add other appropriate information into release Github release notes</li> <li>Point Armbian build system to new release</li> <li>Update Armbian documentation to reflect current release</li> <li>Celebrate</li> </ul>"},{"location":"Quick_facts/","title":"Quick Facts","text":""},{"location":"Quick_facts/#what-is-armbian-linux","title":"What is Armbian Linux?","text":"<p>Armbian Linux provides optimized Debian and Ubuntu Linux images for ARM-based SBCs. There is an incredible ecosystem of small computing platforms that are powerful alternatives to the Raspberry Pi. Armbian\u2019s mission is to provide a uniform system offering that is trustworthy to run on any of the dozens of OS-neglected ARM single board computers.</p>"},{"location":"Quick_facts/#challenges","title":"Challenges","text":""},{"location":"Quick_facts/#armbian-is-the-opposite-of-raspbian","title":"Armbian is the opposite of Raspbian","text":"<p>Raspbian has dozens of contributors to focus on a single SBC platform. Armbian has a dozen contributors to focus on 100+ SBCs spread over 30 platforms.</p>"},{"location":"Quick_facts/#balancing-development-and-support","title":"Balancing Development and Support","text":"<p>Given the point above, resources are thin. Armbian developers have to focus on the core mission of maintaining the Armbian Build Platform. We heavily rely on other members of the community to support each other.  Although Armbian does provide a lot of user friendly features, the reality is that Armbian is for more advanced users. If you are really struggling with your SBC, you may want to consider first getting more comfortable with Raspbian Linux on the Raspberry Pi.  </p>"},{"location":"Quick_facts/#more-sbcs-continuously-coming-to-market","title":"More SBCs continuously coming to market","text":"<p>SBC and TV Box manufacturers love to design and ship new products. Unfortunately they do not like to spend time on software and instead rely on community projects such as Armbian to fill in the gaps.</p>"},{"location":"Quick_facts/#benefits","title":"Benefits","text":""},{"location":"Quick_facts/#simple","title":"Simple","text":"<p>BASH or ZSH shell, standard Debian/Ubuntu utilities. Common and specific features can be with minimalistic menu-driven utility. Login is possible via serial, HDMI/VGA or SSH. </p>"},{"location":"Quick_facts/#light","title":"Light","text":"<p>No bloatware or spyware. Special utilities are completely optional. Suitable for newcomers and professionals. </p>"},{"location":"Quick_facts/#optimized","title":"Optimized","text":"<p>A distributed image is compacted to real data size and starts at around of 1G. Size is optimized for SD card usage. Bigger is better. Installing applications later severely reduces the life of your SD card. They were not designed for this type of usage.</p>"},{"location":"Quick_facts/#fast","title":"Fast","text":"<p>Boards are optimized on kernel and userspace level. DVFS optimization, memory log caching, browser profile memory caching, swap usage tuning, garbage commit delay. Our system runs almost read-only and is one of the the fastest Linux for many development boards in just about every case.</p>"},{"location":"Quick_facts/#secure","title":"Secure","text":"<p>Security level is on a stock Debian/Ubuntu level and can be hardened with the configuration utility. It provides a good starting point for industrial or home usage. The system is regularly inspected by professionals within the community. Each official stable build is thoroughly tested. Images are a direct base for all 3rd party builders.</p>"},{"location":"Quick_facts/#supported","title":"Supported","text":"<p>Providing long term updates, security fixes, documentation, user support.</p>"},{"location":"Quick_facts/#smart","title":"Smart","text":"<p>Deep understanding how boards work, how operating system work and how hardware should be designed to run better. Involved in board design. Experience in Linux since early 90\u2019. Specialized in ARM development boards since 2013. </p>"},{"location":"Quick_facts/#open","title":"Open","text":"<p>Open source build script and kernel development, maintenance and distribution for more than 30 different ARM and ARM64 Linux kernels. Powerful build and software development tools. Can run in fully parallel mode. Can run under Docker.</p>"},{"location":"Release_Board-Maintainers/","title":"Board Maintainers","text":""},{"location":"Release_Board-Maintainers/#how-to-become-a-maintainer","title":"How to become a maintainer?","text":"<p>If you are interested in being a maintainer please review Board Support Rules. Then apply here and wait for acceptance. Once accepted you will be added to our infrastruture. For this reason we need additional information to complete your registration process.</p> <p>Requirements?</p> <ul> <li>You must have access to the hardware you applied to maintain</li> <li>You must have a Github ID which should be listed in the documentation</li> <li>You must have a forums account</li> <li>You must have an Jira account and keep track of issues filed for your board</li> <li>You must make sure Armbian management has been informed of all of the above IDs for our documentation</li> <li>You should know Armbian basics like how to get an Armbian image run on your hardware and do basic debugging, ideally via serial console</li> <li>Knowledge in development, writing code and so on is optional but welcome</li> </ul>"},{"location":"Release_Board-Maintainers/#expectations","title":"Expectations","text":"<p>Maintainers must not necessarily be persons with development experience. They act as a intersection between end-users and the development team and serve the developers in best-effort manner. They are encouraged to answer basic/simple user questions (if possible, also best effort) without having to bother the development team. They are allowed to record bugs but are not allowed to escalate bugs. Team leaders do.</p> <p>Take note that it is still up to development team\u2019s discretion what gets attention since Armbian has to plan carefully how to spend its very limited resources.</p> <ul> <li>You must participate in release process. Ideally you attend meetings related to releases. On that occasion you are given the chance to point out critical issues with your board.</li> <li>You must sign-off that device has been tested, is stable, and ready for release during release process. This basically means you test images that are getting prepared for release https://rsync.armbian.com/incoming/</li> </ul> <p>What are we looking for?</p> <ul> <li>does the board boot to both CLI and Desktop?</li> <li>is the desktop usable?</li> <li>does USB work? (at all or partially)</li> <li>other things such as wireless, audio</li> </ul> <p>If something does not work, this is fine and normal. The important part is that it is documented and we get notified about the issues. Known problems should be placed into the Jira ticket and link placed to the board download page. While not required, you should have a build environment setup so you can build images with the most recent images and test them right away. Your feedback, either positive or negative, is very welcome. You are free to add comments to every commit and pull request.</p> <p>Ideally you have multiple microSD cards laying around to test regular updates on current releases and nightly without having to re-flash the same card every time to switch between branches.</p> <p>Alternatively you can use auto-built images - they are placed at the ever end of each board download pages under \u201cRolling releases\u201d.</p> <ul> <li>You must provide \u201cbest effort\u201d support in the forum. Do not let that wording intimidate you. This is not a complicated task. Regarding forums this can include things like answering obvious questions (for example by pointing to our documentation, ideally directly to the solution page), let the questioner know that additional information is needed for further debugging (e.g. request \u201carmbianmonitor -u\u201d output) or for upgrade issues, ask if they can recreate the issue with a fresh untouched image from: https://www.armbian.com/download/</li> </ul> <ul> <li>You must provide \u201cbest effort\u201d support in Jira. Review submitted issues for you board made by Armbian\u2019s contributors</li> </ul>"},{"location":"Release_Changelog/","title":"Changelog","text":"<ul> <li>Note: If a new sub-version is released this does not necessarily mean all boards receive a new version number since most of the time these fixes are targeting a specific board or board family only.</li> </ul>"},{"location":"Release_Changelog/#whats-changed","title":"What\u2019s Changed","text":""},{"location":"Release_Changelog/#v2551-2025-5-26","title":"v25.5.1 (2025-5-26)","text":"<ul> <li>[Bugfix] Fixed Non supported OS warning message.  by @Tearran in armbian/configng!498</li> <li>[Bugfix] feature array names,  by @Tearran in armbian/configng!305</li> <li>[Bugfix] Unexpected command executed when config overlays #349 by @Tearran in armbian/configng!355</li> <li>Activate the specified network interface, before applying IP stack by @igorpecovnik in armbian/configng!411</li> <li>Add out of date notice to example config by @EvilOlaf in armbian/build!8106</li> <li>Add a collection of applications for downloading by @igorpecovnik in armbian/configng!270</li> <li>Add arch to the module template by @igorpecovnik in armbian/configng!471</li> <li>Add armbian-router to software section by @efectn in armbian/configng!429</li> <li>Add bananapim7 description - interactive build fix by @Grippy98 in armbian/build!8155</li> <li>Add BeagleY &amp; K3 Kernel Updates by @Grippy98 in armbian/build!7950</li> <li>Add buttons for editing or adding header and footer by @igorpecovnik in armbian/configng!602</li> <li>Add code style checking exception for Prometheus by @igorpecovnik in armbian/configng!477</li> <li>Add configurable EFI partition alignment to support UFS devices by @FantasyGmm in armbian/build!8053</li> <li>Add e2fspros as it fell out of default dependency by @igorpecovnik in armbian/build!7894</li> <li>Add GPG key download for 3rd party distro by @igorpecovnik in armbian/configng!381</li> <li>Add initial support for BeagleBoard PocketBeagle2 by @Grippy98 in armbian/build!7897</li> <li>Add initial support for BeagleBone AI-64 by @Grippy98 in armbian/build!7918</li> <li>Add initial support for BeaglePlay by @Grippy98 in armbian/build!7917</li> <li>Add initial support for TI SK-AM69 board by @glneo in armbian/build!7885</li> <li>Add lcd panel of hinlink-h88k support to rockchip64 current and edge by @amazingfate in armbian/build!7901</li> <li>Add Mediatek Genio Family + Radxa Nio-12L by @HeyMeco in armbian/build!8006</li> <li>Add missing cockpit module by @Tearran in armbian/configng!342</li> <li>Add missing deps for generating deb file by @igorpecovnik in armbian/configng!314</li> <li>Add Odroid board selection by @GeoffClements in armbian/configng!298</li> <li>Add option to disable kernel patching by @timsurber in armbian/build!8149</li> <li>Add Qcom Robotics RB5 Support by @FantasyGmm in armbian/build!8017</li> <li>Add Radxa Cubie A5E (sun55i-a527) by @juanesf in armbian/build!7852</li> <li>Add reset and power down support for both ODROID SM1 units by @pyavitz in armbian/build!7900</li> <li>Add sandboxed SSH server port [2222] to the menu by @igorpecovnik in armbian/configng!514</li> <li>Add Scheduled Workflow to Clean Old GitHub Action Logs by @igorpecovnik in armbian/configng!569</li> <li>Add screenshot for several section of auto-made documentation by @igorpecovnik in armbian/configng!486</li> <li>add SMART AM40 support by @retro98boy in armbian/build!8002</li> <li>Add software package: Home Assistant by @igorpecovnik in armbian/configng!235</li> <li>Add support for MOTD logo colors by @igorpecovnik in armbian/build!8018</li> <li>Add support for NanoPi R2S Plus by @ig3 in armbian/build!7913</li> <li>Add VENDOR color to BSP and artifacts hashing by @igorpecovnik in armbian/build!8026</li> <li>Add wrapper for package manipulation by @dimitry-ishenko in armbian/configng!320</li> <li>Add wrapper for service manipulation by @dimitry-ishenko in armbian/configng!323</li> <li>Add Zerotier into configng by @jnovos in armbian/configng!470</li> <li>Add ZeroTier short description to fit menu by @igorpecovnik in armbian/configng!580</li> <li>Adding a warning to welcome screen by @Tearran in armbian/configng!276</li> <li>Adding schematic for network settings by @igorpecovnik in armbian/configng!280</li> <li>AdGuardHome and unbound DNS by @igorpecovnik in armbian/configng!415</li> <li>Adjust condition to use proper if then fi style by @igorpecovnik in armbian/configng!510</li> <li>Adjust images and markdown files by @igorpecovnik in armbian/configng!570</li> <li>Adjust keywords for displaying links with ports in the menu by @igorpecovnik in armbian/configng!547</li> <li>Adjust software module options to match recent changes by @igorpecovnik in armbian/configng!332</li> <li>After changing apt lists methodology, we need to rebuild rootfs cache by @igorpecovnik in armbian/build!7877</li> <li>Allow NetworkManager and systemd-networkd by @ig3 in armbian/build!7961</li> <li>Allwinner: bump to latest tags - booted on H5 by @igorpecovnik in armbian/build!8100</li> <li>Application logos: fix some of images by @igorpecovnik in armbian/configng!564</li> <li>Apply several fixes to NFS service by @igorpecovnik in armbian/configng!313</li> <li>Armbian internal: deploy Armbian qemu KVM instances by @igorpecovnik in armbian/configng!365</li> <li>Armbian internal: GitHub runners deployment script by @igorpecovnik in armbian/configng!364</li> <li>Armbian kernel: add ZRAM and DOCKER configurations by @igorpecovnik in armbian/build!8014</li> <li>Armbian rsyncd: fix port used in the module by @igorpecovnik in armbian/configng!463</li> <li>Armbian runners deploy: fixing bugs by @igorpecovnik in armbian/configng!369</li> <li>Armbian system: manage rsyncd server for armbian download instances by @igorpecovnik in armbian/configng!457</li> <li>Automation: automatically close issues marked as \u201cCan be closed?\u201d  by @igorpecovnik in armbian/configng!387</li> <li>BananaPi BPI-M4-Zero: <code>Enable GPU and add Audio nodes</code> by @pyavitz in armbian/build!8191</li> <li>BananaPi BPI-M4-Zero: <code>sunxi: mmc: Improve reset procedure</code> by @pyavitz in armbian/build!7943</li> <li>BananaPi SM1: <code>Fixup patch name association</code> by @pyavitz in armbian/build!8099</li> <li>BigTreeTech CB2: use mainline device tree on edge (6.14) by @JohnTheCoolingFan in armbian/build!7892</li> <li>board: youyeetoo-r1 v3  by @amazingfate in armbian/configng!299</li> <li>manage_overlayfs: Keep the default value of overlayroot_cfgdisk by @slowpeek in armbian/configng!372</li> <li>Match JSON and modules in order to read data stored in modules by @igorpecovnik in armbian/configng!584</li> <li>MBa8MPxL:  add Pi Camera support, fix config | fix in armbian-firstlogin by @schmiedelm in armbian/build!8010</li> <li>mekotronics-rk3588: u-boot: back to radxa\u2019s v2024.03, as .10 breaks GMAC stable MAC patch by @rpardini in armbian/build!7971</li> <li>Mekotronics: move two boards from community supported to supported by @igorpecovnik in armbian/build!8187</li> <li>Meson64: adjust patch to match upstream changes by @igorpecovnik in armbian/build!7989</li> <li>mksklipad50: add DT overlays for edge kernel by @torte71 in armbian/build!7983</li> <li>mksklipad50: Switch to u-boot v2025.01 (resend) by @torte71 in armbian/build!7936</li> <li>Module Docker: Check if SUDO_USER variable is defined by @igorpecovnik in armbian/configng!366</li> <li>Module ZSH: update package before installing ZSH package by @igorpecovnik in armbian/configng!456</li> <li>Move Armbian related services in dedicated section by @igorpecovnik in armbian/configng!581</li> <li>Move Domoticz logo to the correct location by @igorpecovnik in armbian/configng!399</li> <li>Move wireguard to software section VPN by @igorpecovnik in armbian/configng!578</li> <li>Multiple sources fix: after changing to deb822 we forgot on leftovers by @igorpecovnik in armbian/build!7909</li> <li>mvebu: bootscript fixes &amp; enhancements by @djurny in armbian/build!8189</li> <li>nanopi-r3s, radxa-zero3, rock-3a: board config cleanup &amp; maint by @EvilOlaf in armbian/build!8045</li> <li>nanopi-r3s: bump uboot to v2025.04 by @EvilOlaf in armbian/build!8070</li> <li>Navidrom: fix problems that are popping up on unit tests by @igorpecovnik in armbian/configng!426</li> <li>Network config: Show the \u201cdisable hotspot\u201d dialog only if there is an active hotspot on the selected interface. by @fvalasiad in armbian/configng!596</li> <li>NFS: several fixes to improve handling by @igorpecovnik in armbian/configng!396</li> <li>Odroid XU4: fix broken patch by @igorpecovnik in armbian/build!8146</li> <li>odroidm2: use standard <code>v2025.04</code> (drop <code>-rc4</code>) from u-boot patch folder name; bump <code>v2025.04-rc4</code> -&gt; <code>v2025.04-rc5</code> by @rpardini in armbian/build!8035</li> <li>odroidxu4: fix uboot compilation for Noble hosts by @EvilOlaf in armbian/build!8168</li> <li>officially support Banana Pi M2+ by @leggewie in armbian/build!8127</li> <li>Opi5max - remove <code>current</code> builds by @EvilOlaf in armbian/build!7993</li> <li>Optimize JSON Validation Workflow by @igorpecovnik in armbian/configng!568</li> <li>Optimizing images - no other changes by @igorpecovnik in armbian/configng!582</li> <li>Oracular Ubuntu is no more, switching to Plucky by @igorpecovnik in armbian/configng!392</li> <li>orangepi-5-max: switch <code>edge</code> u-boot to mainline by @EvilOlaf in armbian/build!8082</li> <li>Orangepi5 maintenance by @EvilOlaf in armbian/build!7893</li> <li>orangepi5b: split opi5b board from opi5 board config by @efectn in armbian/build!8126</li> <li>orangepi5pro: Fix uboot compilation by @EvilOlaf in armbian/build!8181</li> <li>Orangepi5PRO: move to EOS as it has broken u-boot compilation on Noble by @igorpecovnik in armbian/build!8172</li> <li>Overlay management: disable showing this option where its not supported by @igorpecovnik in armbian/configng!285</li> <li>Overlayfs: refactor module structure by @igorpecovnik in armbian/configng!378</li> <li>partitioning: Add BTRFS_ROOT_SUBVOLUME switch by @kageurufu in armbian/build!8144</li> <li>Pi-hole and adguardhome: addressing small bugs, hardening by @igorpecovnik in armbian/configng!417</li> <li>qemu arm64: bump u-boot and fix wrong boot script parameter by @igorpecovnik in armbian/build!7994</li> <li>Radxa Nio 12l: dropping vendor kernel as its broken and generally in bad shape by @igorpecovnik in armbian/build!8093</li> <li>radxa-zero3: bump mainline uboot by @EvilOlaf in armbian/build!8071</li> <li>radxa-zero3: enable wifi extension by default by @EvilOlaf in armbian/build!8049</li> <li>RaspberryPi: add support for managing overlays by @igorpecovnik in armbian/configng!451</li> <li>RaspberryPi: add brcm firmware package to fix missing wireless support by @igorpecovnik in armbian/build!8118</li> <li>RaspberryPi: suppress warnings for missing firmware by @igorpecovnik in armbian/build!8116</li> <li>Raspbery Pi: legacy kernel is missing support for CONFIG_FW_LOADER_COMPRESS by @igorpecovnik in armbian/build!7916</li> <li>Refactor and cleanup of documentation making code by @igorpecovnik in armbian/configng!544</li> <li>Refactor conditions to use if then fi otherwise tests cases are failing by @igorpecovnik in armbian/configng!506</li> <li>Refactor patches for NanoPC T6 &amp; LTS by @SuperKali in armbian/build!7980</li> <li>Refactoring Desktop installation by @igorpecovnik in armbian/configng!436</li> <li>Remove <code>lib.config</code> from README.me, create proper example by @EvilOlaf in armbian/build!8090</li> <li>Remove deprecated CM3588 devicetree by @timsurber in armbian/build!8150</li> <li>Remove escape character from runtime by @Tearran in armbian/configng!341</li> <li>Remove mainlined patch in 6.14.5 by @timsurber in armbian/build!8148</li> <li>Remove OMV after test install by @igorpecovnik in armbian/configng!594</li> <li>Remove wrong unit test definitions by @igorpecovnik in armbian/configng!318</li> <li>Remove Xiaomi umi Support by @FantasyGmm in armbian/build!7932</li> <li>Repository consistency: rename armbian-development to armbian-config.list by @igorpecovnik in armbian/configng!383</li> <li>RESEND - Add initial support for Orangepi 5 Ultra by @EvilOlaf in armbian/build!7902</li> <li>RFC: Networking - add simple way without using bridge by @igorpecovnik in armbian/configng!394</li> <li>RK3588 add HDMI sound, add support for OPi5 Max by @palachzzz in armbian/build!7884</li> <li>rock-3a: bump mainline uboot to v2025.04 by @EvilOlaf in armbian/build!8072</li> <li>Rock5 mainline hs400 mode fix by @amazingfate in armbian/build!7921</li> <li>Rockchip - Adjustin broken patch for EDGE kernel by @igorpecovnik in armbian/build!8107</li> <li>Rockchip RK3588: Adjust mainlined patch by @igorpecovnik in armbian/build!8064</li> <li>rockchip-rk3308-current: fix uart dma by @ssp97 in armbian/build!8074</li> <li>rockchip/64: bump rk322x-box and rk3318-box to u-boot v2025.01 by @paolosabatino in armbian/build!7895</li> <li>rockchip64-6.12: fix compatible for CPU regulator on BTT PI2/CB2 by @anarsoul in armbian/build!7974</li> <li>rockchip64-6.14: Add HDMI audio support and missing stuff on Youyeetoo R1 v3 by @SuperKali in armbian/build!7934</li> <li>rockchip64-6.14: Add missing opp nodes by @SuperKali in armbian/build!8048</li> <li>rockchip64-6.14: Add patch to fix USB 3.0 A on NanoPC T6 by @SuperKali in armbian/build!7969</li> <li>rockchip64-6.14: Enabled HDMI1 video and audio on NanoPC T6/LTS by @SuperKali in armbian/build!7933</li> <li>rockchip64-6.14: rewrite rock5b hdmi audio patch by @SuperKali in armbian/build!7929</li> <li>rockchip64-6.14: Set dma mask to 64 bit by @SuperKali in armbian/build!7924</li> <li>rockchip64-edge: bump to 6.14 by @amazingfate in armbian/build!7835</li> <li>rockchip64: add multiple SPI images support to armbian-install by @efectn in armbian/build!8123</li> <li>rockchip64: bump orangepi4 lts uboot to v2025.01 by @paolosabatino in armbian/build!7964</li> <li>rockchip64: bump rockpi-e to u-boot v2025.01 by @paolosabatino in armbian/build!7965</li> <li>rockchip64: Enable CAN FD driver MCP251XFD by @mickeprag in armbian/build!8136</li> <li>rockchip64: fix atf build by @EvilOlaf in armbian/build!8097</li> <li>rockchip64: fix OrangePi 4 LTS boot with BTF, bump uboot to 2024.10 by @paolosabatino in armbian/build!7887</li> <li>rockchip64: rk3318-box: fix wifi with alternate sdio bus by @paolosabatino in armbian/build!7959</li> <li>rockchip64: rk356x: add PLL rate for 33.3MHz by @anarsoul in armbian/build!7970</li> <li>rockchip64: uboot: fix stable mac address for rk3318-box by @paolosabatino in armbian/build!7930</li> <li>rockchip: bump tinkerboard and xt-q8l-v10 u-boot to v2025.01 by @paolosabatino in armbian/build!7967</li> <li>Rpi bugfix: Split Debian and Ubuntu packages  by @igorpecovnik in armbian/build!8087</li> <li>Runner install: add missing dependencies by @igorpecovnik in armbian/configng!606</li> <li>sakurapi-rk3308b: several updates for the board by @TheSnowfield in armbian/build!8047</li> <li>Sandboxed SSH server: add rsync to the Docker container by @igorpecovnik in armbian/configng!357</li> <li>Software title: Actual budget by @igorpecovnik in armbian/configng!419</li> <li>Software title: ANSI hastebin docker instance by @efectn in armbian/configng!461</li> <li>Software title: Immich as a self-hosted photo/video backup option by @igorpecovnik in armbian/configng!575</li> <li>Software title: NetBox full Docker module with automated configuration by @igorpecovnik in armbian/configng!559</li> <li>Software title: Redis Module Support by @igorpecovnik in armbian/configng!561</li> <li>Software title: Duplicati backup service by @igorpecovnik in armbian/configng!555</li> <li>Software title: File browser by @igorpecovnik in armbian/configng!590</li> <li>Software title: Grafana monitoring dashboards by @igorpecovnik in armbian/configng!351</li> <li>Software title: NetAlertX - scan, monitor and visualize your networks by @igorpecovnik in armbian/configng!479</li> <li>Software title: NetData by @igorpecovnik in armbian/configng!289</li> <li>Software title: OMV (openmediavault) by @igorpecovnik in armbian/configng!588</li> <li>Software title: Samba module by @Tearran in armbian/configng!529</li> <li>Software title: Add PostgreSQL Module Support by @igorpecovnik in armbian/configng!560</li> <li>Software title: Add prometheus by @efectn in armbian/configng!469</li> <li>Software title: Armbianrouter: add cdn.armbian.com container  by @efectn in armbian/configng!460</li> <li>Software title: Switch hastebin to golang version by @efectn in armbian/configng!481</li> <li>SpacemiT: Defconfig: <code>Add CONFIG_NFT_FLOW_OFFLOAD=m</code> by @pyavitz in armbian/build!7951</li> <li>SpacemiT: Defconfig: <code>Add CONFIG_TUN=m</code> by @pyavitz in armbian/build!8162</li> <li>SpacemiT: Defconfig: <code>Enable PPPoe Module</code> by @pyavitz in armbian/build!8073</li> <li>Standardize naming in Kernel/firmware upgrades by @squassina in armbian/configng!574</li> <li>Starfive: bump kernel to v6.6 for starfive2 by @libiunc in armbian/build!8033</li> <li>station-m3: delete the redundant function. by @chainsx in armbian/build!8068</li> <li>station-p2: bump u-boot to 2025.04 by @chainsx in armbian/build!8081</li> <li>station: Clean firmware by @chainsx in armbian/build!8084</li> <li>Stop altering global git config file and set safe per cloned repository by @igorpecovnik in armbian/build!7910</li> <li>sunxi 6.12: Switch to v6.12.16, Add HDMI support by @The-going in armbian/build!7752</li> <li>sunxi 6.13: Switching to v6.13.11; Add pwm, dma, fix hardware decoding video, audio by @The-going in armbian/build!8086</li> <li>sunxi-6.12: BUGFIX: Remove the incomplete patch. by @The-going in armbian/build!7947</li> <li>sunxi-6.12: sunxi:  by @The-going in armbian/build!8004</li> <li>sunxi-6.13: Add all patches by @The-going in armbian/build!7705</li> <li>sunxi-6.14: Add all patches by @The-going in armbian/build!8147</li> <li>sunxi64: bump ATF to latest LTS tag by @EvilOlaf in armbian/build!8111</li> <li>switch <code>current</code> u-boot to v2025.01 by @EvilOlaf in armbian/build!8012</li> <li>Switch adguard home to network host for accurate client ip address logging by @aancw in armbian/configng!537</li> <li>Switch CM3588 to mainline A-TF by @timsurber in armbian/build!7898</li> <li>Switch from rkr5 to rkr5.1 by @HeyMeco in armbian/build!8089</li> <li>Switch Netdata to host network for proper metrics and accessibility by @fbernier in armbian/configng!516</li> <li>System: add NFS daemon install and manipulation by @igorpecovnik in armbian/configng!292</li> <li>System: add ZFS compilation support by @igorpecovnik in armbian/configng!282</li> <li>Transmission: add docker subnet to the whitelist by @igorpecovnik in armbian/configng!346</li> <li>uboot: mainline board: youyeetoo r1 add uboot patches by @SuperKali in armbian/build!8175</li> <li>Unattended Upgrade Manager module - reconfiguring automatic updates by @igorpecovnik in armbian/configng!459</li> <li>Unit tests: drop several old test cases by @igorpecovnik in armbian/configng!380</li> <li>Unit tests: improve configuration and fix bugs by @igorpecovnik in armbian/configng!442</li> <li>Unit tests: upgrade unit tests components to mitigate deprecation by @igorpecovnik in armbian/configng!347</li> <li>Update all missing connections between JSON and modules by @igorpecovnik in armbian/configng!585</li> <li>Update boot-mvebu.cmd by @djurny in armbian/build!8166</li> <li>Update IMM001-footer.md for immich by @hartraft in armbian/configng!600</li> <li>Update issue template by @igorpecovnik in armbian/configng!386</li> <li>Update K3 Family to use Github Mirror over TI Cgit by @Grippy98 in armbian/build!7952</li> <li>Update kernel configs with enabled wifi drivers from rtw88/9 by @igorpecovnik in armbian/build!8051</li> <li>Update linux-sun55iw3-dev.config by @juanesf in armbian/build!8058</li> <li>Update Odin2 Config by @FantasyGmm in armbian/build!7946</li> <li>Update odroidxu4-current to 6.6.81 by @belegdol in armbian/build!7931</li> <li>Update odroidxu4-current to 6.6.88 by @belegdol in armbian/build!8135</li> <li>Update prepare-host.sh to use ntpsec-ntpdate by @squassina in armbian/build!8177</li> <li>Update README.md by @leggewie in armbian/configng!464</li> <li>Update the version of U-boot used with Radxa rock 4 se to v2025.04 by @trappiz in armbian/build!8115</li> <li>Updating maintainers: switch to new location of JSON file by @igorpecovnik in armbian/build!8179</li> <li>Upgrade Cherryba-m1 to latest u-boot, move patch to new folder by @igorpecovnik in armbian/build!8131</li> <li>Userspace status changes to EOS for bullseye, focal and jammy by @igorpecovnik in armbian/build!8114</li> <li>V2 - Update the version of U-boot used with Radxa rock 4 se to v2025.04 by @trappiz in armbian/build!8129</li> <li>We need to escape $ otherwise this will be executed on host by @igorpecovnik in armbian/build!8060</li> <li>Webserver &amp; reverse proxy with php and SSL support by @igorpecovnik in armbian/configng!329</li> <li>Wireless discovery hardening by @igorpecovnik in armbian/configng!302</li> <li>Wireless networking: retry 3 times for getting stations by @igorpecovnik in armbian/configng!286</li> <li>ZFS: define architecture for ZFS module by @igorpecovnik in armbian/configng!410</li> </ul>"},{"location":"Release_Changelog/#v2522-2025-2-25","title":"v25.2.2 (2025-2-25)","text":"<ul> <li>Adjusting aml-s9xx as armbian-install was moved to another location by @igorpecovnik in armbian/build!7499</li> <li><code>Automatic</code> board configs status synchronise by @github-actions in armbian/build!7496</li> <li>thinkpad-x13s: bump to jhovold\u2019s wip/sc8280xp-6.12 final by @rpardini in armbian/build!7498</li> <li>meson64: bump <code>edge</code> from <code>6.11</code> to <code>6.12</code> via rename by @rpardini in armbian/build!7490</li> <li>apt-utils.sh: get base-files package version from GHA by @amazingfate in armbian/build!7473</li> <li>sunxi-6.6: Switch to v6.6.62 by @The-going in armbian/build!7503</li> <li>sunxi-6.11: Switch to v6.11.9; Fix build dtb package by @The-going in armbian/build!7502</li> <li>mainline-kernel.conf.sh: bump 6.12 to final by @rpardini in armbian/build!7497</li> <li>rk3576: use boot_merger to generate idbloader.img by @amazingfate in armbian/build!7500</li> <li>Add Rockchip u-boot \u201cbinman\u201d BOOT_SCENARIO by @brentr in armbian/build!7505</li> <li>Adjust build target statuses by @igorpecovnik in armbian/build!7513</li> <li>Enable CONFIG_VHOST_VSOCK on rockchip64 by @halfa in armbian/build!7512</li> <li>rockchip64-edge: enable rtw89 driver by @amazingfate in armbian/build!7511</li> <li>shellfmt: no changes by @rpardini in armbian/build!7510</li> <li>Retro* CM5: Enable display and touchscreen by @ginkage in armbian/build!7506</li> <li>Add another paste server by @EvilOlaf in armbian/build!7493</li> <li>rockchip64: rk3308 tidy up and rockpi-s fixes by @paolosabatino in armbian/build!7519</li> <li>Reduce the size of the Rock S0 CMA to match Rock PI-S + include fixMACaddress script by @brentr in armbian/build!7522</li> <li>Add new device Retroid Pocket RP5 and RPMini by @tjstyle in armbian/build!7521</li> <li>nanopi-r6s: fix mmc0/mmc1 ordering by @efectn in armbian/build!7528</li> <li>rockchip: bump edge kernel to 6.12 by @paolosabatino in armbian/build!7526</li> <li>radxa-e20c - <code>WIREGUARD</code> is deprecated by @EvilOlaf in armbian/build!7520</li> <li>rk35xx-vendor: bump to 6.1 rkr4.1 sdk kernel by @amazingfate in armbian/build!7531</li> <li>extension: mesa-vpu: remove adding chromium ppa by @amazingfate in armbian/build!7515</li> <li>hinlink-h88k: edge: add rfkill nodes to devicetree for m.2 wifi and b\u2026 by @amazingfate in armbian/build!7516</li> <li>Add support for rk3588 based GenBook by @andyshrk in armbian/build!7530</li> <li>build(deps): bump setuptools from 75.3.0 to 75.6.0 by @dependabot in armbian/build!7518</li> <li><code>Automatic</code> board configs status synchronise by @github-actions in armbian/build!7508</li> <li>BananaPi BPI-CM4: <code>Enable i2c2 via overlay</code> by @pyavitz in armbian/build!7540</li> <li>rockchip: various fixes (usb, alsa, \u2026) for rk3288/rk322x by @paolosabatino in armbian/build!7539</li> <li>fix: add some patch to repair eMMC startup issues by @CodeChenL in armbian/build!7538</li> <li>sm8250: bump current and edge to 6.12 by @amazingfate in armbian/build!7532</li> <li><code>Automatic</code> board configs status synchronise by @github-actions in armbian/build!7534</li> <li>BigTreeTech CB2/Pi2 config by @JohnTheCoolingFan in armbian/build!6860</li> <li>mixtile-edge2: bump vendor to <code>branch:rk-6.1-rkr4.1</code> by @rpardini in armbian/build!7546</li> <li>feat: add ST7796 kernel module (fbtft) by @redrathnure in armbian/build!7550</li> <li>fix: ST7796 kernel module patch by @redrathnure in armbian/build!7552</li> <li><code>Automatic</code> board configs status synchronise by @github-actions in armbian/build!7545</li> <li>add community support for LonganPi 3H by @chainsx in armbian/build!7547</li> <li>u-boot: check the produced <code>platform_install.sh</code> (created from functions like write_uboot_platform) for shellcheck errors by @rpardini in armbian/build!7509</li> <li>bootscripts: Allwinner: Bugfix: Remove \u201callwinner/\u201d from 3 boards configurations by @The-going in armbian/build!7535</li> <li>Temporally disable BPI F3 as it has broken way of compiling u-boot by @igorpecovnik in armbian/build!7557</li> <li>extensions: image-output-abl: set rootfs image larger for kde by @amazingfate in armbian/build!7558</li> <li><code>Automatic</code> board configs status synchronise by @github-actions in armbian/build!7561</li> <li><code>Automatic</code> board configs status synchronise by @github-actions in armbian/build!7564</li> <li>Add missing deps for armbian-config by @dimitry-ishenko in armbian/build!7562</li> <li>Improvements and Fixes for Youyeetoo R1 Board by @SuperKali in armbian/build!7565</li> <li>Add Radxa Zero GPIO names to support libgpiod by @way5 in armbian/build!7563</li> <li>H6xk boards: toggle to mainline kernel instead of vendor by @amazingfate in armbian/build!7559</li> <li>Rpi: update RPi config - merge with upstream, rewrite patches by @igorpecovnik in armbian/build!7569</li> <li>Bump VERSION by @EvilOlaf in armbian/build!7571</li> <li>Keep old key management support for Focal and Bullseye by @igorpecovnik in armbian/build!7524</li> <li>Feat add MKS-PI, SKIPR and few other boards  by @redrathnure in armbian/build!7553</li> <li>rockchip64: rk3399 fix pcie being stuck at 1x width after a warm phy reset by @walmis in armbian/build!7572</li> <li>Github Action fix for  newer build version ,make release tag configurable as action input  &amp;  checkout build branch directly by @pykpkg47 in armbian/build!7570</li> <li>Allwinner A10 DTS fix for ARM PMU IRQ and EMAC DMA by @Ryzer58 in armbian/build!7567</li> <li>Revert \u201cshellfmt: config/sources; no changes\u201d by @The-going in armbian/build!7554</li> <li>fix lvm extension and fs-cryptroot extension by @swissiety in armbian/build!7527</li> <li>BananaPi BPI-M4-Zero: <code>Add overlay support and pin ctrl</code> by @pyavitz in armbian/build!7568</li> <li>Repository management: disable broken and not needed functionality <code>Acquire-By-Hash</code> by @igorpecovnik in armbian/build!7574</li> <li>Disable ROCKCHIP_THUNDER_BOOT_DEFER_FREE_MEMBLOCK by @nyanmisaka in armbian/build!7580</li> <li>Add KERNEL_TEST_TARGET Variable to Rock-5B-Plus by @HeyMeco in armbian/build!7582</li> <li>Update odroidxu4-current to 6.6.65 by @belegdol in armbian/build!7578</li> <li>rockchip: remove mainlined patches by @paolosabatino in armbian/build!7583</li> <li>meson64 kernels HDMI patch is obsolete by @way5 in armbian/build!7579</li> <li>Starfive: fix broken patch due to kernel upgrade by @igorpecovnik in armbian/build!7585</li> <li>Starfive: adjust kernel config and fix UART driver by @igorpecovnik in armbian/build!7588</li> <li>avaota-a1: fix typo by @chainsx in armbian/build!7589</li> <li><code>Automatic</code> board configs status synchronise by @github-actions in armbian/build!7573</li> <li>Fix BigTreetech CB1 tsc2007 ghost touches by @JohnTheCoolingFan in armbian/build!7584</li> <li>Add neofetch to fastfetch alias by @JohnTheCoolingFan in armbian/build!7575</li> <li>apt-utils: fix hard-coded GHPROXY_ADDRESS by @amazingfate in armbian/build!7592</li> <li>sm8250: clean up patches for old version of kernel 6.9 and 6.10 by @amazingfate in armbian/build!7591</li> <li>sunxi-6.6: Switch to v6.6.65, re-export patches by @The-going in armbian/build!7587</li> <li>Add new TVBox aml-c400-plus: Magicsee C400 Plus by @jomadeto in armbian/build!7581</li> <li>merge rockchip64 and rockchip-rk3588 by @amazingfate in armbian/build!7566</li> <li>rk35xx-vendor: enable CONFIG_DRM_PANEL_MIPI_DBI by @amazingfate in armbian/build!7597</li> <li>ghproxy: update GHPROXY_ADDRESS to ghgo.xyz by @amazingfate in armbian/build!7596</li> <li>rk35xx-vendor: build DRM_PANEL_MIPI_DBI as builtin by @amazingfate in armbian/build!7599</li> <li>coolpi-cm5: fix uboot patch dir by @amazingfate in armbian/build!7600</li> <li>longanpi-4b: fix typo. by @chainsx in armbian/build!7595</li> <li><code>Automatic</code> board configs status synchronise by @github-actions in armbian/build!7594</li> <li>rockchip64: revert rk3308 analog codec to vendor code by @paolosabatino in armbian/build!7598</li> <li>Odroid XU4: remove deprecated patches by @igorpecovnik in armbian/build!7609</li> <li>build(deps): bump actions/upload-artifact from 4.4.3 to 4.5.0 by @dependabot in armbian/build!7605</li> <li>add community support for DShanPI-R1 by @chainsx in armbian/build!7610</li> <li>Fix orangepizero wifi and usb otg by @ArendJan in armbian/build!7614</li> <li>JetHome: update JetHub D2 support for current revision by @adeepn in armbian/build!7611</li> <li>rootfs-to-image: preserve sparse files when moving artefacts to final destination with rsync by @alex3d in armbian/build!7492</li> <li>Fix uwe5622 \u201cspanning-writes\u201d warning messages in dmesg by @paolosabatino in armbian/build!7615</li> <li>hinlink-h88k: add spi lcd firmware to bsp package by @amazingfate in armbian/build!7601</li> <li>Add support on Rock 5 ITX kernel edge and current by @SuperKali in armbian/build!7618</li> <li>rockchip: enable 8189es kernel module by @paolosabatino in armbian/build!7617</li> <li>build(deps): bump jinja2 from 3.1.4 to 3.1.5 by @dependabot in armbian/build!7606</li> <li>sunxi-6.6: add NextThing C.H.I.P (PocketChip) initial support by @TheSnowfield in armbian/build!7602</li> <li>fixed tinker-edge-r HDMI 4K display bug, bump to linux6.12 branch by @ARC-MX in armbian/build!7608</li> <li>bump rockchip64 edge to 6.13 by @amazingfate in armbian/build!7604</li> <li>rock-3a:add u-boot image for sata boot on m.2 e.key by @pykpkg47 in armbian/build!7254</li> <li>sunxi/sunxi64: bump <code>edge</code> to 6.12 via copy by @The-going in armbian/build!7577</li> <li>rockchip64 - egde - bump mainline to 6.13-rc5 by @EvilOlaf in armbian/build!7626</li> <li>remove patches disabling sched_ext clean in tools for 6.12 and later kernels by @amazingfate in armbian/build!7625</li> <li>armbian-kernel: enable BTF (and CO-RE) for all kernels by @rpardini in armbian/build!7629</li> <li>kernel-config: switch to exporting defconfig\u2019s for all .config files by @rpardini in armbian/build!7628</li> <li>thinkpad-x13s: bump to jhovold\u2019s wip/sc8280xp-6.13-rc4 by @rpardini in armbian/build!7627</li> <li><code>Automatic</code> board configs status synchronise by @github-actions in armbian/build!7624</li> <li>Enable odroid-c4 i2c-0 by @janvolck in armbian/build!7622</li> <li>don\u2019t ship qemu binary in rootfs cache + armhf image/rootfs building on non-armhf-capable-arm64 hosts (Apple M1+) by @rpardini in armbian/build!7621</li> <li>cli: kernel-dtb: don\u2019t output preprocessed dts unless BOOT_FDT_FILE is in <code>&lt;vendor&gt;/&lt;board&gt;.dtb</code> format by @rpardini in armbian/build!7620</li> <li>Bump oras-project/oras from 1.2.0 to 1.2.1 in <code>lib/functions/general/oci-oras.sh</code> by @github-actions in armbian/build!7586</li> <li>RTW88: Add RTL88XXAU support to 6.12.y by @pyavitz in armbian/build!7634</li> <li>Disable boards in Visionfive2 family as kernel compilation breaks by @igorpecovnik in armbian/build!7636</li> <li>Update linux-uefi-arm64-edge.config by @bmilde in armbian/build!7635</li> <li>rockchip: bump current kernel to 6.12 and edge to 6.13 by @paolosabatino in armbian/build!7633</li> <li>riscv64: enable support in Debian Trixie, enable UEFI grub by @igorpecovnik in armbian/build!7632</li> <li>Debian SID: drop broken package by @igorpecovnik in armbian/build!7630</li> <li>BananaPi BPI-F3: <code>Update kernel to 6.6.y and other fixups</code> by @pyavitz in armbian/build!7616</li> <li>rootfs: fix: don\u2019t try to use chroot binaries after qemu was undeployed by @rpardini in armbian/build!7638</li> <li>rockchip64-6.13: add missing patch to fix rk356x pcie2 for rc5 by @amazingfate in armbian/build!7640</li> <li>rockchip64-6.13: fix mbox formatting of <code>rk356x-fix-pcie2-reset.patch</code> by @rpardini in armbian/build!7645</li> <li>cli-docker: avoid <code>argument list too long</code> errors when too many git changes present; fixes #6993 by @rpardini in armbian/build!7644</li> <li>runners: fix <code>if_error_find_files_sdcard</code> if looking for full paths (shows DKMS log correctly) by @rpardini in armbian/build!7653</li> <li>fix typo by @marcone in armbian/build!7649</li> <li>rewrite all kernel patches and configs by @rpardini in armbian/build!7651</li> <li>add hdmi rx configuration for friendlyelec cm3588 by @timsurber in armbian/build!7648</li> <li>v4l2loopback-dkms: do not restrict to desktops only by @rpardini in armbian/build!7655</li> <li>kernel-debs: headers: postinst: switch from <code>oldconfig</code> to <code>olddefconfig</code> for less messy output; better logging by @rpardini in armbian/build!7654</li> <li>add typec role switch and pd negotiation support to oneplus 8T by @amazingfate in armbian/build!7657</li> <li><code>rock-s0</code> / <code>rockpi-s</code>: quote board vars by @rpardini in armbian/build!7650</li> <li>Bump arm-trusted-firmware to 2.12 for rockchip64 by @timsurber in armbian/build!7646</li> <li>uboot: completely clean before building each target; slower but correct by @rpardini in armbian/build!7659</li> <li>rpi5b: drop <code>LINUXFAMILY=bcm2712</code> as it is exactly the same as <code>bcm2711</code> by @rpardini in armbian/build!7642</li> <li><code>rk35xx</code>/<code>legacy</code>: rewrite-kernel-patches &amp; rewrite-kernel-config, no changes by @rpardini in armbian/build!7658</li> <li>Add Sweet Potato to xorg conf in family config by @Tonymac32 in armbian/build!7668</li> <li>Bump setuptools from 75.6.0 to 75.7.0 by @dependabot in armbian/build!7665</li> <li>Bump gitpython from 3.1.43 to 3.1.44 by @dependabot in armbian/build!7664</li> <li>Sm8250: build abl boot recovery image by @amazingfate in armbian/build!7663</li> <li>nanopct6(-lts): edge: bump u-boot to 2025.01-rc6; enable UMS and fix non-LTS dtsi by @rpardini in armbian/build!7662</li> <li>RPi CM5: Enable DWC2 host mode support by default by @AaronDewes in armbian/build!7660</li> <li>nanopi-m6: add support for SPI flash boot by @efectn in armbian/build!7652</li> <li>sunxi-6.6: NextThing C.H.I.P (PocketChip) community support by @TheSnowfield in armbian/build!7647</li> <li>cm3588-nas: u-boot: 2025.01-rc6 with working UMS by @rpardini in armbian/build!7667</li> <li><code>Automatic</code> board configs status synchronise by @github-actions in armbian/build!7669</li> <li>nanopct6(-lts): u-boot: edge: bump to 2025.01 final by @rpardini in armbian/build!7670</li> <li>cm3588-nas: u-boot: bump to 2025.01 final by @rpardini in armbian/build!7671</li> <li>Orange Pi Zero: Fix usb otg after 6.12 update by @ArendJan in armbian/build!7661</li> <li>xiaomi-elish: fix bsp package build by @amazingfate in armbian/build!7674</li> <li>PocketChip: removing patch also from series by @igorpecovnik in armbian/build!7673</li> <li>BananaPi BPI-M4-Zero: REV1 uart1 support via overlay by @pyavitz in armbian/build!7672</li> <li>K3: Use sfdisk instead of parted for setting flag in boot partition by @3V3RYONE in armbian/build!7677</li> <li>Partition process: fix handling loop devices by @igorpecovnik in armbian/build!7679</li> <li>AIC wifi and v4l2 extensions: disable them for kernel 6.12 and higher by @igorpecovnik in armbian/build!7680</li> <li>UEFI-arm64: disable broken Phytium network driver patch by @igorpecovnik in armbian/build!7684</li> <li>BananaPi BPI-F3: <code>Update to linux-6.6.70 &amp; overclock to 1.8GHz</code> by @pyavitz in armbian/build!7685</li> <li>rockchip64: fix rkvenc dtbo build by @amazingfate in armbian/build!7689</li> <li>rockpro64: u-boot: bump to 2025.01 by @rpardini in armbian/build!7688</li> <li>odroidm1: u-boot: bump to 2025.01; kernel: add nodes for overlays by @rpardini in armbian/build!7686</li> <li>rockchip64-6.13: NanoPi R6C/R6S SD card detect patch by @rpardini in armbian/build!7681</li> <li>sunxi 6.12: Switch to v6.12.9 by @The-going in armbian/build!7691</li> <li>sunxi-6.6: Switch to v6.6.70 by @The-going in armbian/build!7690</li> <li>armbian-install UEFI: EFI partition generation, hiding non Linux partitions by @igorpecovnik in armbian/build!7631</li> <li>RaspberryPi BCM2711: <code>Enable FW_LOADER_COMPRESS support</code> by @pyavitz in armbian/build!7694</li> <li>Firstlogin: run provision script if it does exists by @igorpecovnik in armbian/build!7696</li> <li>update rtl8822cs driver link to latest commit (update for kernel 6.13+) by @adeepn in armbian/build!7699</li> <li>not enable BTF for rk35xx vendor kernel by @amazingfate in armbian/build!7697</li> <li>ghproxy: update GHPROXY_ADDRESS to ghfast.top by @amazingfate in armbian/build!7702</li> <li>dockerproxy: update GHCR_MIRROR_ADDRESS by @amazingfate in armbian/build!7713</li> <li>BananaPI BPI-F3: <code>Pull branch instead of commit</code> by @pyavitz in armbian/build!7722</li> <li>Nanopi R5S: proper pci phy reset - fixing missing LAN1 by @lanefu in armbian/build!7721</li> <li>Bump uboot to youyeetoo r1 v3 to the next release by @SuperKali in armbian/build!7720</li> <li>hooks: introduce <code>post_armbian_repo_customize_image</code> and <code>post_repo_customize_image</code> by @rpardini in armbian/build!7719</li> <li>Family Visionfive: seems unmaintained, disabling targets by @igorpecovnik in armbian/build!7718</li> <li>UEFI kernels, legacy = 6.6, current 6.12 &amp; edge 6.13 by @igorpecovnik in armbian/build!7717</li> <li>WIP sunxi 6.6: Cleaning up the patches before the changes. Swith to v6.6.72 by @The-going in armbian/build!7714</li> <li>enable current kernel for hinlink-h6xk boards by @amazingfate in armbian/build!7711</li> <li>MBa8MPxL: update linux-tqma-current to 6.12 by @schmiedelm in armbian/build!7704</li> <li>build(deps): bump actions/upload-artifact from 4.5.0 to 4.6.0 by @dependabot in armbian/build!7700</li> <li>3rd party wifi: partially revert rtl8811cu driver as it breaks on K6.6 by @igorpecovnik in armbian/build!7723</li> <li>Macchiatobin: move board to eos so we don\u2019t build this family kernel anymore by @igorpecovnik in armbian/build!7724</li> <li>Refactor armbian-config into install as external package by @igorpecovnik in armbian/build!7716</li> <li>meson: remove tag defined in KERNELBRANCH for 6.6 mainline kernel by @amazingfate in armbian/build!7712</li> <li>coolpi-genbook: bump u-boot to 2025.01 by @andyshrk in armbian/build!7734</li> <li>Moving Odroid C1 and OneCloud to EOS since kernel is not assembling anymore by @igorpecovnik in armbian/build!7733</li> <li>Rk35xx btf back by @amazingfate in armbian/build!7732</li> <li>kernel: call oldconfig after kernel config hooks; add hook for <code>CONFIG_CFG80211=m</code> and <code>CONFIG_MAC80211=m</code> on 6.13+ by @rpardini in armbian/build!7728</li> <li>mainline-kernel.conf.sh: bump 6.13 to final by @rpardini in armbian/build!7726</li> <li>git: squash spurious warning when checking safe.directory by @rpardini in armbian/build!7725</li> <li>actions(update-tools): avoid notifying our outdated deps everywhere by @akinomyoga in armbian/build!7709</li> <li>meson64: current 6.6 -&gt; 6.12; edge 6.12 -&gt; 6.13 by @rpardini in armbian/build!7727</li> <li>Bump oras-project/oras from 1.2.1 to 1.2.2 in <code>lib/functions/general/oci-oras.sh</code> by @github-actions in armbian/build!7707</li> <li>Bump sharkdp/bat from 0.24.0 to 0.25.0 in <code>lib/functions/general/bat-cat.sh</code> by @github-actions in armbian/build!7706</li> <li>build(deps): bump setuptools from 75.7.0 to 75.8.0 by @dependabot in armbian/build!7701</li> <li><code>Automatic</code> board configs status synchronise by @github-actions in armbian/build!7735</li> <li>wireless: fix build with kernel 6.13 by @amazingfate in armbian/build!7736</li> <li>wifi drivers: update commit id of rtl8811cu and rtl88x2bu by @amazingfate in armbian/build!7737</li> <li>disable ccache in a friendly way by @lanefu in armbian/build!7730</li> <li>fix cpu internal ethernet on nanopi-r4se standard version without EEPROM by @jpy794 in armbian/build!7739</li> <li>Add upstream release as csc target: Ubuntu plucky 25.04, Oracular to EOS by @igorpecovnik in armbian/build!7738</li> <li>Ubuntu Plucky: disable missing packages by @igorpecovnik in armbian/build!7740</li> <li>nanopi-r6s: u-boot: bump to 2025.01 final, with working UMS and SD -&gt; NVMe -&gt; eMMC boot order by @rpardini in armbian/build!7683</li> <li>nanopi-r6c: u-boot: bump to 2025.01 final, with working UMS and SD -&gt; NVMe -&gt; eMMC boot order by @rpardini in armbian/build!7682</li> <li>Ubuntu Plucky: fixing remaining problem. by @igorpecovnik in armbian/build!7741</li> <li>Update Odin2 Config by @FantasyGmm in armbian/build!7742</li> <li><code>Automatic</code> board configs status synchronise by @github-actions in armbian/build!7743</li> <li>BigTreeTech CB1 patches adjustments by @JohnTheCoolingFan in armbian/build!7745</li> <li>h96max-v56: u-boot: bump to 2025.01 by @hqnicolas in armbian/build!7746</li> <li>Rockpi-S: enable automatic u-boot flashing upon package install by @igorpecovnik in armbian/build!7750</li> <li>thinkpad-x13s: bump to jhovold\u2019s wip/sc8280xp-6.13 final by @rpardini in armbian/build!7749</li> <li>Limit curl execution time to 2s to find WAN IP by @WiseLord in armbian/build!7755</li> <li>MBa8MPxL: cleanup board configs by @schmiedelm in armbian/build!7751</li> <li>Switch linux-rockchip to from rkr4.1 to rkr5 by @HeyMeco in armbian/build!7758</li> <li>TI K3 updates by @glneo in armbian/build!7762</li> <li>nanopc t4: fix sdram unstable by @msdos03 in armbian/build!7761</li> <li>MBa8MPxL: cleanup fix X11 settings by @schmiedelm in armbian/build!7759</li> <li>aml-c400-plus: Remove duplicated code present in meson-gx-p23x-q20x.dtsi by @jomadeto in armbian/build!7760</li> <li>Add support for NanoPi R3S by @EvilOlaf in armbian/build!7556</li> <li>nanopi-m6: add support for edge, current kernels by @efectn in armbian/build!7763</li> <li>helios64: restore hs400 support after enabling strobe line internal p\u2026 by @prahal in armbian/build!7756</li> <li>sm8250-current: enable CONFIG_USB_SERIAL_CH341 by @amazingfate in armbian/build!7764</li> <li>Add missing firmware package for build-in driver cfg80211 by @igorpecovnik in armbian/build!7766</li> <li>nanopct6(-lts): bump u-boot to 2025.04-rc1 by @rpardini in armbian/build!7774</li> <li>rock-3a: bump <code>edge</code> u-boot to 2025.01 by @EvilOlaf in armbian/build!7770</li> <li>helios64: fix helios64-heartbeat-led.service by @prahal in armbian/build!7765</li> <li>BananaPI BPI-F3: <code>Update DTS and Defconfig</code> by @pyavitz in armbian/build!7773</li> <li>BananaPi BPI-F3: <code>patch fail fixup</code> by @pyavitz in armbian/build!7777</li> <li>Mesa VPU: allow package downgrading at apt upgrade by @igorpecovnik in armbian/build!7778</li> <li>mesa-vpu: only add kisak ppa for jammy by @amazingfate in armbian/build!7779</li> <li>BananaPi BPI-F3: U-Boot: <code>Update to tag k1-bl-v2.1-release</code> by @pyavitz in armbian/build!7780</li> <li>Add support for MKS-KLIPAD50 by @torte71 in armbian/build!7771</li> <li>nanopi-r3s: add support for <code>current</code> by @EvilOlaf in armbian/build!7768</li> <li><code>Automatic</code> board configs status synchronise by @github-actions in armbian/build!7781</li> <li>feat: Use deb822 APT source for armbian-config by @blieque in armbian/build!7782</li> <li>Armbian-config sources lists - remove double quotes from EOT by @igorpecovnik in armbian/build!7785</li> <li>Rock-S0: enable automatic u-boot flashing upon package install by @brentr in armbian/build!7784</li> <li>rockchip/64: fix pl330 cyclic dma transfers by @paolosabatino in armbian/build!7695</li> <li>imx6: move current to 6.12.y by @igorpecovnik in armbian/build!7786</li> <li>BananaPi CM4/M2S: <code>Update u-boot to v2025.01</code> by @pyavitz in armbian/build!7788</li> <li>Amper Gateway AM-GZ80x: <code>Update u-boot to v2025.01</code> by @pyavitz in armbian/build!7789</li> <li>IMX8: switch u-boot sources to last known working commit  by @igorpecovnik in armbian/build!7793</li> <li>rockchip: fix tinkerboard out-of-the-box pulseaudio configuration by @paolosabatino in armbian/build!7796</li> <li>Update rock-5c.conf - add KERNEL_TEST_TARGET by @schwar3kat in armbian/build!7799</li> <li>Revert commit that breaks compilation by @igorpecovnik in armbian/build!7804</li> <li>firstlogin: bring up wifi device before scanning by @torte71 in armbian/build!7803</li> <li>Update odroidxu4-current to 6.6.75 by @belegdol in armbian/build!7787</li> <li>Add board config for MXQ TV box by @domin144 in armbian/build!7501</li> <li>meson: kernel update: legacy -&gt; 6.6, current -&gt; 6.12 by @domin144 in armbian/build!7801</li> <li>UX / cosmetics: MOTD ip display needs some limiting by @igorpecovnik in armbian/build!7798</li> <li>Fix orangepi 3b audio jack boot download \u2018button\u2019 by @ArendJan in armbian/build!7794</li> <li>hinlink-h88k: fix usb dr_mode by @qbisi in armbian/build!7797</li> <li>armbian-kernel.sh: introduce <code>KERNEL_BTF=no</code> to opt-out of BTF/CO-RE type-info on low-RAM machines by @rpardini in armbian/build!7675</li> <li>nanopi-r3s: set <code>HAS_VIDEO_OUTPUT</code> by @EvilOlaf in armbian/build!7810</li> <li>extensions: fix outdated ghproxy mirror address by @amazingfate in armbian/build!7816</li> <li><code>Automatic</code> board configs status synchronise by @github-actions in armbian/build!7806</li> <li>Chore mkspi cli only images by @redrathnure in armbian/build!7809</li> <li>mksklipad50: Build only CLI images by @torte71 in armbian/build!7807</li> <li>Meson: drop (long) broken legacy code which is also breaking CI by @igorpecovnik in armbian/build!7808</li> <li>rockchip64: disable pl330 patch due to pulseaudio issues by @paolosabatino in armbian/build!7813</li> <li>build(deps): bump dtschema from 2024.11 to 2025.2 by @dependabot in armbian/build!7818</li> <li>MBa8MPxL update uboot patch and fix firmware installation by @schmiedelm in armbian/build!7817</li> <li>Bugfix: Remove directories from sha files by @igorpecovnik in armbian/build!7814</li> <li>Bump radxa rk35xx uboot to next-dev-v2024.10 by @amazingfate in armbian/build!7776</li> <li>Radxa uboot 202410 fix by @amazingfate in armbian/build!7819</li> <li>Cosmetical: switch edge and current kernel order by @igorpecovnik in armbian/build!7821</li> <li>Revert \u201cfxblox-rk1: add missing patch for latest radxa uboot\u201d by @amazingfate in armbian/build!7822</li> <li>Odroid XU4: disable BTF as it crashes kernel load by @igorpecovnik in armbian/build!7824</li> <li>Revert \u201cimx6: move current to 6.12.y\u201d by @igorpecovnik in armbian/build!7825</li> <li>rockchip64: remove patch to fix rockpi-e gigabit eth by @paolosabatino in armbian/build!7823</li> <li>Radxa Zero, fix for overlay prefix name by @way5 in armbian/build!7826</li> <li>BananaPi BPI-F3: <code>General update to improve overall support</code> by @pyavitz in armbian/build!7833</li> <li>add spi flash overlay for NanoPi M6 edge, current kernels by @efectn in armbian/build!7837</li> <li>Bump two leftover radxa rk35xx uboot to next-dev-v2024.10 by @nyanmisaka in armbian/build!7832</li> <li>Odroid M2: initial support by @mlegenovic in armbian/build!7828</li> <li>remove software-properties-common/gtk for trixie and sid by @amazingfate in armbian/build!7827</li> <li>Add Support for Rock 5T by @HeyMeco in armbian/build!7841</li> <li>rockchip64: fix rocks0 patch breaking current compilation by @paolosabatino in armbian/build!7815</li> <li>Orangepi 5 MAX -  add support for <code>current</code> by @EvilOlaf in armbian/build!7842</li> <li>mesa-vpu: add chromium back for debian and noble by @amazingfate in armbian/build!7839</li> <li>Ubuntu Plucky: add architecture dependent packages by @igorpecovnik in armbian/build!7847</li> <li>Magicsee C400-Plus: Switch to standard support by @jomadeto in armbian/build!7846</li> <li>RPi family: read board name from DT and bump CURRENT to 6.12.y by @igorpecovnik in armbian/build!7845</li> <li>station-p2: delete the redundant function. by @chainsx in armbian/build!7844</li> <li>station-m2: delete the redundant function. by @chainsx in armbian/build!7843</li> <li>Hinlink-h88k: some fix to dts by @qbisi in armbian/build!7840</li> <li>Add support for Rock 2A and 2F by @CodeChenL in armbian/build!7820</li> <li>ssv6051 and panel-dsi-simple driver patch for kernel 6.6, 6.9, 6.12 and 6.13 by @qbisi in armbian/build!7795</li> <li>odroidm1: u-boot: enable <code>setexpr</code>; patch 2025.01 for <code>fileenv</code>; enable squashfs support by @rpardini in armbian/build!7769</li> <li>Bump VERSION by @EvilOlaf in armbian/build!7791</li> <li>Raspberry PI: move EDGE kernel from 6.14 to 6.13 as it doesn\u2019t build by @igorpecovnik in armbian/build!7848</li> <li>Plucky: drop non existing packages by @igorpecovnik in armbian/build!7849</li> <li>station-m2: use mainline devicetree name by @chainsx in armbian/build!7858</li> <li>MKS-Klipad50: Switch to standard support by @torte71 in armbian/build!7851</li> <li>SM8250: drop upstreamed patch as it breaks compilation by @igorpecovnik in armbian/build!7860</li> <li>kernel: fix for 6.14 make clean fail at tools dir due to upstream dir change by @amazingfate in armbian/build!7850</li> <li>export-logs: use multiple paste servers in order until one works by @rpardini in armbian/build!7861</li> <li>sun55iw3-syterkit: update kernel config by @chainsx in armbian/build!7855</li> <li>rockchip64-6.6/6.12/6.13: rk3308b: add vop and internal rgb lcdc output by @TheSnowfield in armbian/build!7866</li> <li>sunxi-6.6: Switch to v6.6.75. Add BananaPi M4 Berry board as WIP by @The-going in armbian/build!7865</li> <li>Bump Vim1-2 u-boot binaries (stopgap) by @Tonymac32 in armbian/build!7871</li> <li>BananaPi BPI-F3: <code>BOARD_MAINTAINER=\"pyavitz\"</code> by @pyavitz in armbian/build!7870</li> <li>rockchip64:loaderimage: fix rk3308 uboot loader offset by @TheSnowfield in armbian/build!7867</li> <li>rockchip64: fix wrong GPIO direction in DP virtual extcon driver by @retro98boy in armbian/build!7857</li> <li>rockchip/64: fix again periodic dma and audio stuttering by @paolosabatino in armbian/build!7853</li> <li>small cleanup Meson64 by @Tonymac32 in armbian/build!7868</li> <li>rockchip64: RK3588 update DDR &amp; BL31 blobs by @HeyMeco in armbian/build!7872</li> <li>generate_CODEOWNERS.sh: fix issues and support BOOTPATCHDIR and ATFPATCHDIR by @hzyitc in armbian/build!7869</li> <li>Move Meson GX to LibreElec FIP by @Tonymac32 in armbian/build!7875</li> <li>arm64: dts: rockchip: fix gpio-line-names to radxa-rock-3a by @EvilOlaf in armbian/build!7874</li> <li>python3: do not rely on hostdeps python3-pip nor python3-dev; deploy pip via get-pip.py by @rpardini in armbian/build!7873</li> <li>Status changes: csc to conf and vice versa by @igorpecovnik in armbian/build!7854</li> <li>feat: Use deb822 APT sources by @blieque in armbian/build!7790</li> </ul>"},{"location":"Release_Changelog/#v24111-2024-11-28","title":"v24.11.1 (2024-11-28)","text":"<ul> <li><code>6.1-rkr3</code>: sync FriendlyElec\u2019s DTs from vendor (common, R6S, R6C, T6, CM3588) + add T6-LTS DT by @rpardini in armbian/linux-rockchip!209</li> <li>A collection of fixes and new drivers for the Retro*CM5 devices by @ginkage in armbian/linux-rockchip!267</li> <li>Add a label \u201cnot armbian-config\u201d bug by @igorpecovnik in armbian/configng!245</li> <li>Add a warning when tool runs with outdated BSP package by @igorpecovnik in armbian/configng!254</li> <li>Add BananaPi <code>BPI-M4-Zero</code> updates, fixups and rev2 support by @pyavitz in armbian/build!7317</li> <li>add board mekotronics r57 rk3576 by @monkaBlyat in armbian/linux-rockchip!257</li> <li>Add community support for Cyber Aib RK3588 by @chainsx in armbian/build!7404</li> <li>Add community support for Rock5B+ by @HeyMeco in armbian/build!7445</li> <li>Add contribute information to the About app and show it on the exit by @igorpecovnik in armbian/configng!189</li> <li>Add dedicated CONTRIBUTION.md and adjust README.md by @igorpecovnik in armbian/configng!220</li> <li>Added device tree overlays files for armsom-sige7 board:two OV13850 c\u2026 by @itlhd in armbian/linux-rockchip!244</li> <li>Added support of core3566 by @btbxbob in armbian/build!7018</li> <li>Add hexagonrpc service to xiaomi-elish by @amazingfate in armbian/build!7394</li> <li>Adding missing udev audio rules for NanoPC T6 &amp; LTS by @SuperKali in armbian/build!7323</li> <li>Adding OVERLAYDIR variable to hash calculating mechanisms by @igorpecovnik in armbian/build!7256</li> <li>Adding USB ports on Youyeetoo R1 v3 by @SuperKali in armbian/linux-rockchip!227</li> <li>Adding Youyeetoo R1 v3 on current &amp; edge kernel by @SuperKali in armbian/build!7173</li> <li>add itc type to hdmirx by @benhoff in armbian/linux-rockchip!262</li> <li>Additional cosmetic fixes to MOTD by @igorpecovnik in armbian/build!7306</li> <li>Add JSON generation to the docs generation by @igorpecovnik in armbian/configng!194</li> <li>Add link to adding new feature by @igorpecovnik in armbian/configng!257</li> <li>Add missing node for youyeetoo r1 on current kernel by @SuperKali in armbian/build!7472</li> <li>add new board armsom-cm5-io by @amazingfate in armbian/build!7211</li> <li>add new board armsom-cm5-rpi-cm4-io by @amazingfate in armbian/build!7436</li> <li>add new board armsom-sige3 by @amazingfate in armbian/build!7196</li> <li>add new board orangepi5 max by @amazingfate in armbian/build!7262</li> <li>Add new device OnePlus 8T by @amazingfate in armbian/build!7386</li> <li>Add ok3568-c by @amazingfate in armbian/linux-rockchip!273</li> <li>Add Radxa E20C board by @mattx433 in armbian/build!7157</li> <li>Add Radxa Rock5B+ device tree by @HeyMeco in armbian/linux-rockchip!277</li> <li>Add repository list to the Debian package by @igorpecovnik in armbian/configng!261</li> <li>Add reserved-memory node for hdmirx-controller on Youyeetoo R1 v3 by @SuperKali in armbian/linux-rockchip!241</li> <li>Add software package: Pi-hole DNS blocker by @igorpecovnik in armbian/configng!238</li> <li>Add <code>sun50i-h616-light</code> dt overlay fix to 6.10 by @JohnTheCoolingFan in armbian/build!7204</li> <li>Add support for changing / spoofing MAC address by @igorpecovnik in armbian/configng!191</li> <li>Add support for dln2 in orangepi zero and orangepi zero 3 by @MrSuicideParrot in armbian/build!7336</li> <li>Add support for NanoPi M6 by @efectn in armbian/build!7341</li> <li>Add support for Radxa CM5 on RPi CM4 IO by @AaronDewes in armbian/build!7470</li> <li>Add support for Retro Lite CM5 device by @ginkage in armbian/linux-rockchip!211</li> <li>Add support for webp images and fix path for them by @igorpecovnik in armbian/configng!197</li> <li>Add timeout on check wan address on motd by @SuperKali in armbian/build!7297</li> <li>add: -t \u201ctest\u201d and -p \u201cproduction\u201d option to json assembiling by @Tearran in armbian/configng!202</li> <li>Add TV Box Magicsee C400 Plus Linux support by @jomadeto in armbian/build!7469</li> <li>Adjust patches due to kernel bump by @igorpecovnik in armbian/build!7316</li> <li>Align KERNEL_TARGET_TEST from edge to vendor for Youyeetoo R1 board by @SuperKali in armbian/build!7222</li> <li>arch: arm64: add new board armsom-sige3 by @amazingfate in armbian/linux-rockchip!236</li> <li>arch: arm64 board: armsom sige5 add Display 10 HD by @itlhd in armbian/linux-rockchip!233</li> <li>arch: arm64: dts: add board orangepi5 max by @amazingfate in armbian/linux-rockchip!240</li> <li>arch: arm64: dts: delete ufs nodes from armsom cm5-io by @amazingfate in armbian/linux-rockchip!278</li> <li>arch: arm64: dts: fix armsom sige1 sd card boot by @amazingfate in armbian/linux-rockchip!218</li> <li>arch: arm64: dts: fix sdio wifi clk for armsom-sige1 by @amazingfate in armbian/linux-rockchip!239</li> <li>arch: arm64: dts: rework devicetree of armsom-sige7 by @amazingfate in armbian/linux-rockchip!222</li> <li>arch: arm64: rockchip: use panfrost driver for gpu of rk3576 by @amazingfate in armbian/linux-rockchip!249</li> <li>arm64: dts:  Add DTS for Cyber Aib RK3588 device by @chainsx in armbian/linux-rockchip!268</li> <li>arm64: dts: DTS for Luckfox Core3566 by @buldo in armbian/linux-rockchip!254</li> <li>arm64: dts: rk3566-orangepi-3b-v2.1: Rework USB fix by @dust-7 in armbian/linux-rockchip!256</li> <li>arm64: dts: rk3568-mixtile-edge2: add Mixtile Edge 2 by @rpardini in armbian/linux-rockchip!245</li> <li>arm64: dts: rk3588-blade3-v101-linux: fixes by @rpardini in armbian/linux-rockchip!251</li> <li>arm64: dts: rock-3a:  add overlay to enable sata on m.2 e-key slot by @pykpkg47 in armbian/linux-rockchip!237</li> <li>arm64: dts:  rock 3a  add spi flash, disable rk809 rtc and enable rockchip crypto device by @pykpkg47 in armbian/linux-rockchip!235</li> <li>arm64: dts: rockchip: add armsom-aim7-io by @amazingfate in armbian/linux-rockchip!214</li> <li>arm64: dts: rockchip: add armsom-cm5-io by @amazingfate in armbian/linux-rockchip!215</li> <li>arm64: dts: rockchip: add armsom-sige5 by @amazingfate in armbian/linux-rockchip!212</li> <li>arm64: dts: rockchip: Add Orange Pi 3B v2.1 by @dust-7 in armbian/linux-rockchip!234</li> <li>arm64: dts: rockchip: add radxa-e20c by @mattx433 in armbian/linux-rockchip!231</li> <li>arm64: dts: rockchip: add support for NanoPi M6 by @efectn in armbian/linux-rockchip!258</li> <li>arm64: dts: rockchip: Adopt mainline naming for Friendlyelec CM3588 NAS by @ColorfulRhino in armbian/linux-rockchip!220</li> <li>arm64: dts: rockchip: fix gmac PHY attach error on ROCK Pi E by @RadxaNaoki in armbian/build!7202</li> <li>arm64: rockchip: add YX35 LCD overlays for NanoPi M6 by @efectn in armbian/linux-rockchip!259</li> <li>armbian-bsp-cli-deb: fix shellcheck breakage; fixes #7303 by @rpardini in armbian/build!7321</li> <li>armbian-firstrun: Optionally skip OpenSSH host key regeneration by @davidandreoletti in armbian/build!7216</li> <li>armbian-led-state: avoid binary parameters, other minor cleanups by @paolosabatino in armbian/build!7337</li> <li>armbianmonitor: call <code>curl</code> with <code>--fail</code> flag so server 400/500 errors actually trigger a retry by @rpardini in armbian/build!7487</li> <li>Armsom cm5 rpi cm4 io by @itlhd in armbian/linux-rockchip!281</li> <li>armsom-sige5: update uboot from latest SDK by @amazingfate in armbian/build!7132</li> <li>armsom-w3: fix m.2 usb bluetooth by @amazingfate in armbian/build!7274</li> <li>avaota-a1: move to .csc support by @chainsx in armbian/build!7395</li> <li>BananaPi BPI-M4-Zero: <code>Fixup U-Boot and Linux DTS/DTSI and add WiFi / BT overlay</code> by @pyavitz in armbian/build!7332</li> <li>BananaPi BPI-M4-Zero: <code>Improve support</code> by @pyavitz in armbian/build!7355</li> <li>BananaPi CM4: <code>improve SDIO WiFi speeds</code> by @pyavitz in armbian/build!7193</li> <li>Bananapi M2 pro: move to most recent boot loader by @igorpecovnik in armbian/build!7491</li> <li>Board: NanoPC T6 &amp; LTS - Bump uboot from 2024.07 to 2024.10 mainline by @SuperKali in armbian/build!7393</li> <li>board: NanoPi R6C and R6S: Bump U-Boot from 2024.07 to 2024.10 by @ColorfulRhino in armbian/build!7371</li> <li>board: orangepi3b: Fix U-Boot <code>BOOTPATCHDIR</code> and bump to 2024.10 by @ColorfulRhino in armbian/build!7377</li> <li>boogie\u2019s vop2 rbga2101010 capability fix (6.1-rkr3 adapted version) by @rpardini in armbian/linux-rockchip!252</li> <li>bootscript: sunxi: Add a dtb file path analyzer by @The-going in armbian/build!7484</li> <li>BSP: Expand distribution status with possible upgrade information by @igorpecovnik in armbian/build!7303</li> <li>BSP: store kernel and kernel test target definition  by @igorpecovnik in armbian/build!7279</li> <li>BSP: store overlay folder definition to /etc/armbian-release to be used in armbian-config by @igorpecovnik in armbian/build!7198</li> <li>Bugfix: add missing character from character manipulation by @igorpecovnik in armbian/configng!227</li> <li>Bugfix: BigTreeTech CB1 patches and edge dts by @JohnTheCoolingFan in armbian/build!7159</li> <li>Bugfix: patch writing style caused breakage by @igorpecovnik in armbian/build!7417</li> <li>Bugfix: put repository list into correct folder by @igorpecovnik in armbian/configng!262</li> <li>Bugfix: resolve boot loader compilation issues on X96-mate and Orangepizero2 by @igorpecovnik in armbian/build!7281</li> <li>Bugfix: sunxi-6.6: fix inapplicable and Re-export patches, switch to v6.6.54 by @The-going in armbian/build!7358</li> <li>Bugfix: u-boot changes for x96q broke most of other Allwinner uboot compilation by @igorpecovnik in armbian/build!7280</li> <li>Bugfix: we can\u2019t fully disable desktop due to automation by @igorpecovnik in armbian/configng!232</li> <li>Bugfix: xradio wireless stopped working if those files were removed. by @igorpecovnik in armbian/build!7292</li> <li>[bug] Need at least one enabled sub by @Tearran in armbian/configng!260</li> <li>Bump mvdan/sh from 3.8.0 to 3.9.0 in <code>lib/tools/shellfmt.sh</code> by @github-actions in armbian/build!7255</li> <li>Bump mvdan/sh from 3.9.0 to 3.10.0 in <code>lib/tools/shellfmt.sh</code> by @github-actions in armbian/build!7433</li> <li>Bump pascalgn/size-label-action from 0.5.4 to 0.5.5 by @dependabot in armbian/configng!209</li> <li>Bump Rockchip 32bit edge kernel to 6.11 by @paolosabatino in armbian/build!7273</li> <li>bump rockchip64 edge kernel to v6.11 by @paolosabatino in armbian/build!7278</li> <li>Change development repository domain name to github.armbian.com by @igorpecovnik in armbian/build!7477</li> <li>Change development repository domain name to github.armbian.com by @igorpecovnik in armbian/configng!258</li> <li>Change pull request trigger in order to get permissions back in order by @igorpecovnik in armbian/build!7421</li> <li>Change to armbian-config also in Unit test CI by @igorpecovnik in armbian/configng!186</li> <li>Cherryba M1: switch legacy branch to EDGE to fix compliation breaking by @igorpecovnik in armbian/build!7236</li> <li>CI: Improve automatic labelling system on pull requests by @igorpecovnik in armbian/build!7409</li> <li>CM3588-NAS: Go fully mainline by adopting the latest mainline changes from kernel 6.11 and U-Boot v2024.10 by @ColorfulRhino in armbian/build!7082</li> <li>compilation: armbian-kernel: Change forced uncompressed modules option for kernels &gt;=v6.12 by @ColorfulRhino in armbian/build!7389</li> <li>Cosmetic bugfix - we need to limit grep to match first character only by @igorpecovnik in armbian/build!7444</li> <li>Cosmetic: fixing link in the bug issue template by @igorpecovnik in armbian/configng!223</li> <li>Cosmetic / UX: Display VENDORPRETTYNAME instead of VENDOR  by @igorpecovnik in armbian/build!7261</li> <li>cyber-aib-rk3588: add edge kernel support by @chainsx in armbian/build!7446</li> <li>Debian desktops: disable Pidgin as its broken. Can stay that way. by @igorpecovnik in armbian/build!7384</li> <li>debsums: changing default checking as it will fail on base-files by @igorpecovnik in armbian/build!7301</li> <li>Deprecated <code>WIREGUARD</code> once and for all by @EvilOlaf in armbian/build!7452</li> <li>desktop: amd64: drop nvidia-drivers forced ppa (focal stuff? no thanks) by @rpardini in armbian/build!7168</li> <li>Desktop: two packages are missing from Trixie by @igorpecovnik in armbian/build!7305</li> <li>Disable desktops as we don\u2019t have consistency at build side by @igorpecovnik in armbian/configng!228</li> <li>Disable distribution upgrade as its still pretty fragile by @igorpecovnik in armbian/configng!234</li> <li>distro-specific: systemd-resolved: don\u2019t impose 1.0.0.1 DNS server on users by @rpardini in armbian/build!7166</li> <li>Documentation CI: assemble parts before making it by @igorpecovnik in armbian/configng!211</li> <li>drm/panthor: Restrict high priorities on group_create by @amazingfate in armbian/linux-rockchip!260</li> <li>dt_makefile_patcher: fix dtbs with dot in filename by @amazingfate in armbian/build!7194</li> <li>dts: fxblox remove sd pwr gpio and correct bt wake gpio by @mahdichi in armbian/linux-rockchip!286</li> <li>dynamic document (software) FInal draft by @Tearran in armbian/configng!188</li> <li>enable ap6275s bleutooth on armsom sige1 and sige3 by @amazingfate in armbian/linux-rockchip!271</li> <li>enable edge kernel to h96-tvbox-3566 TV-box by @hqnicolas in armbian/build!7310</li> <li>Enable hs200 mode for RockPi S, set CMA to 16M by @paolosabatino in armbian/build!7463</li> <li>Enable ksmbd consistently across configurations by @lpapadakos in armbian/build!7171</li> <li>Enable oras pull to use system proxy by @IsMrX in armbian/build!7227</li> <li>enable panfrost driver for rk3576 boards by @amazingfate in armbian/build!7307</li> <li>enable pd negotiation support for bananapim7 by @amazingfate in armbian/build!7483</li> <li>enable wifi on opi3b v1.1 with 6.11 kernel by @amazingfate in armbian/build!7406</li> <li>Example of adding a software title: Portainer by @igorpecovnik in armbian/configng!210</li> <li>Expand dynamic documentation generation with headers, footer and image by @igorpecovnik in armbian/configng!196</li> <li>First login automation - add support for SSH key download by @igorpecovnik in armbian/build!7396</li> <li>Fix and update GitHub Actions workflow for building the kernel on PR by @ColorfulRhino in armbian/linux-rockchip!225</li> <li>fix : armsom-w3 screen and camera loading method by @as-jackson in armbian/linux-rockchip!285</li> <li>Fix connecting to wifi networks where SSID contains a space or comma by @viraniac in armbian/build!7293</li> <li>Fix error on load Headphone on NanoPC T6 by @SuperKali in armbian/linux-rockchip!253</li> <li>fix: export memblock_free by @AaronDewes in armbian/linux-rockchip!287</li> <li>fix: fix rk3588-cyber-aib hdmi out by @chainsx in armbian/linux-rockchip!275</li> <li>Fix HDMI resolutions by @efectn in armbian/linux-rockchip!232</li> <li>Fixing unit tests execution by @igorpecovnik in armbian/configng!187</li> <li>Fixing wrong ID for portainer and few cosmetic fixes by @igorpecovnik in armbian/configng!216</li> <li>Fixing wront number in JSON structure by @igorpecovnik in armbian/configng!251</li> <li>fix <code>iostat</code> error on <code>MINIMAL</code> by @EvilOlaf in armbian/build!7454</li> <li>Fix issue 7210, rootdevice altering extensions by @rvalle in armbian/build!7217</li> <li>Fix markdown documentation generation by @igorpecovnik in armbian/configng!215</li> <li>fix: module_option for install_portainer.sh by @Tearran in armbian/configng!218</li> <li>Fix partitioning root UUID bug in /etc/crypttab. New option: CRYPTROOT_MAPPER. by @siis2992 in armbian/build!7443</li> <li>fix PS4 controller LED\u2019s on current and edge rk3588 kernel configs by @monkaBlyat in armbian/build!7138</li> <li>Fix slightly broken network configuration by @igorpecovnik in armbian/configng!249</li> <li>Fix small troubles with unit tests by @igorpecovnik in armbian/configng!204</li> <li>Fix <code>sun50i-h616-light</code> device tree overlay by @JohnTheCoolingFan in armbian/build!7183</li> <li>fix typo: catagory =&gt; category by @dimitry-ishenko in armbian/configng!246</li> <li>Framework: Revert ORAS and setuptools upgrades by @igorpecovnik in armbian/build!7213</li> <li>fxblox-rk1: update vendor version by @igorpecovnik in armbian/build!7480</li> <li>Gateway GZ80x: add dtsi and power off support via pwr button by @pyavitz in armbian/build!7251</li> <li>Gateway GZ80x: <code>update to u-boot-v2024.07</code> by @pyavitz in armbian/build!7328</li> <li>GHA conditions syntax fix by @igorpecovnik in armbian/build!7423</li> <li>GitHub Actions: add log cleaner, adjust names, fix labelling on approve by @igorpecovnik in armbian/build!7434</li> <li>Git hub actions: add watchdog to repeat unit tests once and issue auto welcome by @igorpecovnik in armbian/configng!229</li> <li>Giveaway: remove additional label that otherwise makes no sense by @igorpecovnik in armbian/build!7387</li> <li>Gnome desktops: add gvfs-backends package as its missing only here by @igorpecovnik in armbian/build!7373</li> <li>hack: trixie has lost its software-properties-common package so get rid of it for all Debian releases by @rpardini in armbian/build!7464</li> <li>Improve Armbian welcome MOTD by @igorpecovnik in armbian/build!7155</li> <li>Improvements and bug fixes to Armbian user-space services by @igorpecovnik in armbian/build!6840</li> <li>Improvement: Update MOTD to include IPv6 local addresses by @SuperKali in armbian/build!7315</li> <li>Improve packaging process and change name to armbian-config by @igorpecovnik in armbian/configng!182</li> <li>Install nc to the unit test environment for port testing by @igorpecovnik in armbian/configng!200</li> <li>Install netcat-traditional instead of netcat by @igorpecovnik in armbian/configng!201</li> <li>introcude devicetree property rockchip,default-link-up to fix rtl8125 on opi5plus by @amazingfate in armbian/linux-rockchip!283</li> <li>Introduce new parameter that will execute a script prior to packing by @igorpecovnik in armbian/configng!214</li> <li>Introduce the Turing RK1 by @Joshua-Riek in armbian/build!7228</li> <li>JetHome: Update JetHub D2 support by @adeepn in armbian/build!6928</li> <li>JSON cleanup with unit tests adjustements by @igorpecovnik in armbian/configng!207</li> <li>KDE wallet: ship KDE distro with default disabled KDE Wallet by @igorpecovnik in armbian/build!7302</li> <li>Kernel bump: adjust broken patches by @igorpecovnik in armbian/build!7335</li> <li>Kernel config maint: rewrite kernel config with ./compile rewrite-kernel-config by @igorpecovnik in armbian/build!7249</li> <li>kernel-debs: show 3 levels of dirs in tree output for kernel-dtb, so overlays are shown by @rpardini in armbian/build!7238</li> <li>kernel-dtb: copy also the dtb binary for the board to output by @rpardini in armbian/build!7163</li> <li>kernel: mainline: Bump v6.12-rc4 to v6.12-rc7 by @rpardini in armbian/build!7466</li> <li>Let rk35xx and rockchip-rk3588 family use same boot script for legacy/vendor branch by @amazingfate in armbian/build!7288</li> <li>Limit default labelling to opened, reopened and synchronise PR by @igorpecovnik in armbian/build!7410</li> <li>linux-rk35xx-vendor: enable <code>CONFIG_KPROBES</code> by @rpardini in armbian/build!7162</li> <li>linux-rockchip-rk3588-6.11.config: enable <code>CONFIG_INPUT_PWM_BEEPER=m</code> by @rpardini in armbian/build!7167</li> <li>main-config: update China mirror address by @aiamadeus in armbian/build!7420</li> <li>mainline-kernel: bump from v6.11-rc4 to v6.11-rc7 by @rpardini in armbian/build!7239</li> <li>mainline-kernel: bump to 6.12-rc2 by @rpardini in armbian/build!7366</li> <li>mainline-kernel: v6.11 was released by @rpardini in armbian/build!7259</li> <li>MBa8MPxL: Bump current kernel from 6.6.43 to 6.11.x by @schmiedelm in armbian/build!7400</li> <li>MBa8MPxL: update atf to v2.10 by @schmiedelm in armbian/build!7147</li> <li>MBa8MPxL: use nxp WLAN/BT firmware, cleanup board files, leave WIP by @schmiedelm in armbian/build!7324</li> <li>media: rockchip: hdmirx: add VIDIOC_G_PARM by @amazingfate in armbian/linux-rockchip!242</li> <li>mesa-vpu: don\u2019t install mesa-vpu on minimal images by @igorpecovnik in armbian/build!7331</li> <li>mesa-vpu: fix dist-upgrade when upstream release new conf file by @amazingfate in armbian/build!7284</li> <li>mesa-vpu: support CLI builds as well as desktop by @rpardini in armbian/build!7318</li> <li>mesa-vpu: use mesa from debian bookworm-backports by @amazingfate in armbian/build!7356</li> <li>Mesa-vpu: we also need to have conditions in the install part  by @igorpecovnik in armbian/build!7339</li> <li>meson64: bump edge to 6.11 (currently v6.11-rc7) by @rpardini in armbian/build!7241</li> <li>mixtile-edge2: add rk3568 board (current/edge/vendor) by @rpardini in armbian/build!7285</li> <li>Modules assemble by @Tearran in armbian/configng!203</li> <li>Module template example - Practical use webmin by @Tearran in armbian/configng!240</li> <li>MOTD: declutter list of commands in motd. Everything starts with armbian-config by @igorpecovnik in armbian/build!7449</li> <li>MOTD: display hostapd parameters if AP is in operation by @igorpecovnik in armbian/build!7353</li> <li>MOTD: fix error when traffic info is enabled by @igorpecovnik in armbian/build!7247</li> <li>Move board Youyeetoo R1 v3 from WIP to CSC by @SuperKali in armbian/build!7149</li> <li>Move LicheePi-4A to eos because its chip design has security vulnerabilities. by @chainsx in armbian/build!7179</li> <li>Move maintainers update function from armbian/scripts by @igorpecovnik in armbian/build!7407</li> <li>Move support of nanopc t6 &amp; lts from edge to current by @SuperKali in armbian/build!7476</li> <li>nanopi-m6: add LCD overlay as default by @efectn in armbian/build!7344</li> <li>nanopi-m6: make it standard supported by @efectn in armbian/build!7380</li> <li>Nanopi R6: adjust kernel build target to have correct images built by @igorpecovnik in armbian/build!7246</li> <li>nanopi-r6s: mark as supported by @igorpecovnik in armbian/build!7244</li> <li>New software title: OpenHab by @igorpecovnik in armbian/configng!230</li> <li>Odroid M1: resolve lowered network speed by @igorpecovnik in armbian/build!7245</li> <li>Odroid XU4 kernel: remove deprecated patches by @igorpecovnik in armbian/build!7349</li> <li>Odroid XU4: remove deprecated patches by @igorpecovnik in armbian/build!7208</li> <li>oneplus-kebab: disable edge build by @amazingfate in armbian/build!7427</li> <li>Op5+/HDMI-RX: expose ITC type to v4l2 in synopsys hdmir rx by @benhoff in armbian/build!7224</li> <li>Op5+/HDMI-RX: fix spurious triggering of irq 5v while plugout code is running by @benhoff in armbian/build!7212</li> <li>opi3b: fix mainline uboot with vendor kernel and fix uwe5622 bt for rk35xx by @amazingfate in armbian/build!7025</li> <li>opi5pro: change dr_mode to host by @EvilOlaf in armbian/linux-rockchip!217</li> <li>Orange Pi 3B: Edge: Switch to mainline dts by @dust-7 in armbian/build!7290</li> <li>Orange Pi 3B: Update board config to support v2.1 boards by @dust-7 in armbian/build!7233</li> <li>Orange Pi 3B: Vendor: Enable audio via headphone jack by @dust-7 in armbian/build!7330</li> <li>Overlay management - reverting to previous logic  by @igorpecovnik in armbian/configng!256</li> <li>Overlay management: somewhere we had OVERLAY_DIR and somewhere OVERLAYDIR by @igorpecovnik in armbian/build!7351</li> <li>patching: emit warnings when files in <code>dt</code> folder overwrite pre-existing files (DTs that landed upstream) by @rpardini in armbian/build!7271</li> <li>Patch: refactor broken patch due to upstream changes by @igorpecovnik in armbian/build!7190</li> <li>Phytiumpi: switch default branch for images and testing to CURRENT by @igorpecovnik in armbian/build!7206</li> <li>power: supply: add Simple ADC power supply driver for NanoPi boards by @efectn in armbian/linux-rockchip!261</li> <li>prepare-host: trixie and sid don\u2019t carry python3-distutils anymore by @rpardini in armbian/build!7165</li> <li>radxa-aic8800: remove kernel version check by @amazingfate in armbian/build!7283</li> <li>Radxa Rock-3a - edge - add GPIO names by @mr-toolcraft in armbian/build!7403</li> <li>Radxa rock-3a - edge - add overlay to disable debug console by @mr-toolcraft in armbian/build!7402</li> <li>Radxa Rock-3a - edge - use mainline uboot by @mr-toolcraft in armbian/build!7401</li> <li>radxa-zero2: bump to u-boot 2024.07 (from 2023.10) by @rpardini in armbian/build!7258</li> <li>Radxa Zero 3W/E - edge - switch to mainline uboot 2024.10 by @mr-toolcraft in armbian/build!7411</li> <li>ramlog: remove obsolete nocache; fixes #6890 by @alex3d in armbian/build!7378</li> <li>Readme: fix broken links to documentation due to structural changes by @igorpecovnik in armbian/build!7467</li> <li>rebase commits from rk-6.1-rk1 to rk-6.1-rkr3 by @amazingfate in armbian/linux-rockchip!200</li> <li>refactored see_full_list by @Tearran in armbian/configng!184</li> <li>reinstate tinker edge r dts by @Tonymac32 in armbian/build!7311</li> <li>Release preparation MBa8MPxL by @schmiedelm in armbian/build!7450</li> <li>Remove deprecated patch by @igorpecovnik in armbian/build!7425</li> <li>Remove duplicated items on youyeetoo r1 dts file by @SuperKali in armbian/linux-rockchip!255</li> <li>Remove edge kernel on youyeetoo r1 by @SuperKali in armbian/build!7475</li> <li>remove redundant \u201cadd Xiaobao-nas\u201d patch by @Tonymac32 in armbian/build!7312</li> <li>Remove wireless tools dependency from all user space variants by @igorpecovnik in armbian/build!7314</li> <li>RetrOLED CM5: Add missing Makefile entry by @ginkage in armbian/linux-rockchip!280</li> <li>RetrOLED CM5: Fix PWM fan frequency and display rotation by @ginkage in armbian/linux-rockchip!274</li> <li>Revert \u201cMove support of nanopc t6 &amp; lts from edge to current\u201d by @SuperKali in armbian/build!7481</li> <li>Revert \u201cPCI: rockchip: dw: remove .link_up() hook from struct dw_pcie\u2026 by @RadxaStephen in armbian/linux-rockchip!221</li> <li>Revert \u201cUpdate odroidxu4-current to 6.6.54\u201d by @igorpecovnik in armbian/build!7348</li> <li>Revert \u201cUpdate odroidxu4-current to 6.6.59\u201d by @igorpecovnik in armbian/build!7438</li> <li>Review and refactor DTS code for Youyeetoo R1 V3 by @SuperKali in armbian/linux-rockchip!238</li> <li>RFC: initial Rock 5B+ edge kernel support by @fridtjof in armbian/build!7457</li> <li>rk3318-box: enable usb3 port in uboot by @alex3d in armbian/build!7253</li> <li>rk3318-box: fix usb2 functionality in u-boot, that was broken since update to v2024.07 by @alex3d in armbian/build!7235</li> <li>rk3318: enable rng-seed population in u-boot by @alex3d in armbian/build!7364</li> <li>rk3576: use boot.scr instead of extlinux by @amazingfate in armbian/build!7426</li> <li>RK3588: add 580 encoding by @benhoff in armbian/build!7298</li> <li>Rk3588: bump to 6.12 for edge and current by @amazingfate in armbian/build!7455</li> <li>Rock-5c add an asound.state file to fix mic and sound issues by @schwar3kat in armbian/build!7361</li> <li>rockchip64-6.10: rebase/rewrite all patches against v6.10.10 by @rpardini in armbian/build!7237</li> <li>[rockchip64] add tm16xx led driver for display panels by @paolosabatino in armbian/build!7338</li> <li>rockchip64-edge: bump to 6.12 by @amazingfate in armbian/build!7447</li> <li>rockchip64: enable i2c-gpio bitbang driver by @paolosabatino in armbian/build!7334</li> <li>rockchip64: fix crash dump on eager led setting with tm16xx led driver by @paolosabatino in armbian/build!7462</li> <li>rockchip64: make rockchip64 bootable in VM by @alex3d in armbian/build!7392</li> <li>Rockchip64: remove deprecated patches that breaks compilation by @igorpecovnik in armbian/build!7180</li> <li>[rockchip64] Remove mainlined hunk from patches by @paolosabatino in armbian/build!7333</li> <li>rockchip64/uboot: increase rng-seed size to make it sufficient for modern linux by @alex3d in armbian/build!7365</li> <li>Rockchip armhf: remove parts of code from the patch which has been upstreamed by @igorpecovnik in armbian/build!7478</li> <li>[rockchip] Provide dtb overlay to enable pwm node for rk3288 by @paolosabatino in armbian/build!7369</li> <li>rockchip: remove patch breaking HDMI 7\u201d displays on Tinkerboard by @paolosabatino in armbian/build!7479</li> <li>rockchip-rk3588/6.11: backport Marcin Juszkiewicz\u2019s \u201cFriendlyELEC NanoPC-T6 improvements\u201d v6 series to fix non-LTS and split LTS version of NanoPC T6 by @rpardini in armbian/build!7272</li> <li>rockchip-rk3588-6.11: bump to v6.11-rc7; manually rebase <code>0001-general-add-overlay-support.patch</code> by @rpardini in armbian/build!7240</li> <li>rockchip-rk3588: current edge: add a pwm fan control overlay by @alexl83 in armbian/build!7137</li> <li>rockchip-rk3588-current: update kernel to 6.11 by @efectn in armbian/build!7326</li> <li>rockchip-rk3588: Enable CONFIG_NETKIT kernel option by @mschirrmeister in armbian/build!7385</li> <li>rockchip-rk3588: fanctrl overlay: fix <code>&lt;&amp;fan&gt;</code> alias for device tree by @alexl83 in armbian/build!7151</li> <li>rockchip-rk3588: fix hdmi display of armsom-sige7 for edge and current by @amazingfate in armbian/build!7243</li> <li>rockchip-rk3588 / legacy: bump to 5.10-rkr8 (5.10.209) by @rpardini in armbian/build!7319</li> <li>rockchip-rk3588: orangepi5-plus current, edge: u-boot: bump to mainline 2024.10-rc3 by @alexl83 in armbian/build!7136</li> <li>rockchip-rk3588: use rkvdec2 patch from rockchip64 by @amazingfate in armbian/build!7429</li> <li>rockchip-rk3588 / vendor: add CONFIG_RC_CORE and all IR remote modules by @rpardini in armbian/build!7320</li> <li>rockchip-rk3588-vendor: enable CONFIG_NANOPI_ADC_POWER by @efectn in armbian/build!7357</li> <li>Rockchip vendor: enable several options in Rockchip kernel by @igorpecovnik in armbian/build!7300</li> <li>Rockpis family by @brentr in armbian/build!7382</li> <li>rockpro64: bump u-boot to 2024.07; make fancy configs; drop bin size limit as fix landed upstream by @rpardini in armbian/build!7161</li> <li>rockpro64: u-boot: patch u-boot\u2019s dtsi to enable otg port for UMS/Gadget capabilities by @rpardini in armbian/build!7231</li> <li>rootfs cache: after updating github cli key, we need to rebuild rootfs cache by @igorpecovnik in armbian/build!7215</li> <li>rootfs: don\u2019t use the Armbian repo when building rootfs from both GHA pipelines and CLI; fixes #7123 by @rpardini in armbian/build!7313</li> <li>rtc: rockchip: dts disable check add other variants by @pykpkg47 in armbian/linux-rockchip!230</li> <li>s4t7: Add panfrost driver by @viraniac in armbian/build!7248</li> <li>Simplify sudo check require it always. by @Tearran in armbian/configng!183</li> <li>sm8250-current: update to 6.11 by @amazingfate in armbian/build!7277</li> <li>sm8250: disable broken patch due upstream changes by @igorpecovnik in armbian/build!7424</li> <li>Software title: add Uptime Kuma, self-hosted monitoring tool by @igorpecovnik in armbian/configng!237</li> <li>Some more Panthor fixes by @ginkage in armbian/linux-rockchip!210</li> <li>spacemit: opensbi, u-boot, kernel legacy: Update for v1.0.15 by @The-going in armbian/build!7350</li> <li>Store list of installed extensions and image vendor to image and not to BSP by @igorpecovnik in armbian/build!7182</li> <li>Store two additional variables to /etc/armbian-release by @igorpecovnik in armbian/build!7156</li> <li>sunxi-6.10: Add armbian patches by @The-going in armbian/build!7127</li> <li>Sunxi-6.11: Fix a broken package for EDGE by @The-going in armbian/build!7474</li> <li>sunxi-6.11 Switch EDGE to v6.11 by @The-going in armbian/build!7289</li> <li>sunxi 6.11: Switch kernel version to v6.11.2, Re-extract patches by @The-going in armbian/build!7352</li> <li>sunxi 6.11: Switch to v6.11.6, bugfix temperature interface for h616, h618 by @The-going in armbian/build!7442</li> <li>Support CherryBa M1 board by @IsMrX in armbian/build!7226</li> <li>Support for Luckfox Core3566 by @buldo in armbian/build!7354</li> <li>Sync drm/panthor and drm/sched with 6.12-rc2 by @ginkage in armbian/linux-rockchip!264</li> <li>systemd-networkd: default to DUIDType=link-layer for ipv6; via networkd.conf.d by @rpardini in armbian/build!7232</li> <li>thinkpad-x13s: bump to jhovold\u2019s <code>wip/sc8280xp-6.11</code> (final) from -rc5 by @rpardini in armbian/build!7260</li> <li>thinkpad-x13s: bump to jhovold\u2019s wip/sc8280xp-6.11-rc5; userspace fixes by @rpardini in armbian/build!7164</li> <li>thinkpad-x13s: bump to jhovold\u2019s wip/sc8280xp-6.12-rc2 by @rpardini in armbian/build!7367</li> <li>thinkpad-x13s: bump to jhovold\u2019s wip/sc8280xp-6.12-rc4 by @rpardini in armbian/build!7465</li> <li>tqma-current and xfce: fixes by @schmiedelm in armbian/build!7405</li> <li>u-boot-sunxi: Fix loading of bananapim3 board from eMMC by @The-going in armbian/build!7252</li> <li>Ubuntu Focal: Change from EOS to CSC in order to generate base-files by @igorpecovnik in armbian/build!7309</li> <li>uefi-* / edge: bump to 6.12; rework arm64 Phytium stmmac acpi patches by @rpardini in armbian/build!7368</li> <li>Unit test bug-fix - broken if checking one test at PR by @igorpecovnik in armbian/configng!199</li> <li>Update docs.yml to correct json name by @Tearran in armbian/configng!213</li> <li>Update GitHub CLI GPG key by @williammartin in armbian/build!7192</li> <li>Update linux-uefi-arm64-edge.config by @bmilde in armbian/build!7419</li> <li>Update odroidxu4-current to 6.6.51 by @belegdol in armbian/build!7230</li> <li>Update odroidxu4-current to 6.6.54 by @belegdol in armbian/build!7340</li> <li>Update odroidxu4-current to 6.6.59 by @belegdol in armbian/build!7435</li> <li>Update radxa 5 itx from upstream by @SuperKali in armbian/linux-rockchip!263</li> <li>Userspace: add information about read only rootfs feature by @igorpecovnik in armbian/build!7218</li> <li>Userspace: remove System Activity Reporter (SAR) from server package base by @igorpecovnik in armbian/build!7203</li> <li><code>Userspace</code> Switching armbian-config to new generation. by @igorpecovnik in armbian/build!7189</li> <li><code>Userspace</code>: UX changes at MOTD and first login by @igorpecovnik in armbian/build!7174</li> <li>UX bugfix: on first run we display some warnings if userspace is unsupported by @igorpecovnik in armbian/build!7431</li> <li>UX: cosmetic improvements on motd and armbian-install by @igorpecovnik in armbian/build!7264</li> <li>VIM1S: Use panfrost by default by @viraniac in armbian/build!7329</li> <li>WIP: adding some fixes in the drivers by @SuperKali in armbian/linux-rockchip!248</li> <li>WIP: arch: arm64 board: youyeetoo r1 v3 add rewrited dts code. by @SuperKali in armbian/linux-rockchip!223</li> <li>Wireless drivers: remove driver for 8822BS applicable for old kernels by @igorpecovnik in armbian/build!7390</li> <li>Wireless drivers: rtw88: remove deprecated sections in patch by @igorpecovnik in armbian/build!7219</li> <li>X96Q LPDDR3 Improvements by @sicXnull in armbian/build!7276</li> <li>xiaomi-elish 6.11 fixes by @amazingfate in armbian/build!7359</li> <li>ZSH: move functions from JSON to separate modules by @igorpecovnik in armbian/configng!224</li> </ul>"},{"location":"Release_Changelog/#v2484-2024-10-12","title":"v24.8.4 (2024-10-12)","text":"<ul> <li>Recreated images for Radxa Rock 5C, Nanopi M6</li> </ul>"},{"location":"Release_Changelog/#v2483-2024-09-13","title":"v24.8.3 (2024-09-13)","text":"<ul> <li>Recreated images for Radxa Rock 5 ITX, Rockpi E, Odroid M1, Nanopi R6S</li> </ul>"},{"location":"Release_Changelog/#v2481-2024-08-31","title":"v24.8.1 (2024-08-31)","text":"<ul> <li>Add audio support to hdmi output (meson) by @kernelzru</li> <li>Temporally disable broken build configuration by @igorpecovnik</li> <li>Odroid XU4: Remove deprecated patches by @igorpecovnik</li> <li>RK3588 edge kernel: Add support for Linux 6.10 + introduce stable <code>current</code> branch (6.8) by @ColorfulRhino</li> <li>rk3588: Add board NanoPi R6C by @ColorfulRhino</li> <li>re-add some Khadas Edge 2 patches to edge kernel by @efectn</li> <li>Update JetHome JetHub D2 support by @adeepn</li> <li>rockchip-rk3588 6.8.y: nanopct6: Add NanoPC T6 SPI Flash (v6.8.y version) by @rpardini</li> <li>rockchip64/rk3318-box: move stack further from base addr to allow bigger uboot image by @alex3d</li> <li>RK3588 edge: Add H.264 decoder support by @ColorfulRhino</li> <li>GH Actions: Fix auto-labeler for \u201cDesktop\u201d category and add categories \u201cPatches\u201d and \u201cDocumentation\u201d by @ColorfulRhino</li> <li>extlinux: add DEFAULT_OVERLAYS support by @efectn</li> <li>Disable autosuspend on Gnome based desktops by @igorpecovnik</li> <li>actions: Fix typo in actions/labeler labeler.yml by @ColorfulRhino</li> <li>cli: Fix DEFAULT_OVERLAYS array by @ColorfulRhino</li> <li>khadas-edge2: rename audios by @efectn</li> <li>Fix boot from btrfs fs in uboot 2024.01/2024.04 by @alex3d</li> <li>rockchip-rk3588-edge: fix vepu of rk3588 by @amazingfate</li> <li>board: orangepi-5-plus: Add mainline U-Boot for edge kernel by @ColorfulRhino</li> <li>khadas-edge2: add vendor uboot to images by @igorpecovnik</li> <li>board: nanopi-r6s: Add system-power-controller to pmic by @ColorfulRhino</li> <li>kernel: mainline: Bump 6.10-rc3 to 6.10-rc4 by @ColorfulRhino</li> <li>Sm8250 6.9 by @amazingfate</li> <li>Add support for rk3399 based SBC Leez P710 by @andyshrk</li> <li>Debian buster: disable non-existing backports repository by @igorpecovnik</li> <li>packages: Enable bash-completion on all images by @ColorfulRhino</li> <li>station-m2: Use Raxda u-boot 2024.01 by @chainsx</li> <li>actions: Fix auto-labeler by checking subdirectories by @ColorfulRhino</li> <li>aic8800: update firmware package URL by @RadxaYuntian</li> <li>Move Network Manager bits into extensions by @igorpecovnik</li> <li>fix armbian-leds-state-save.sh: by @alexl83</li> <li>add community support for lckfb taishanpi by @chainsx</li> <li>Deboostrap: switch to last known working tag by @igorpecovnik</li> <li>i3-wm: remove conflicting userspace packages by @igorpecovnik</li> <li>partitioning: fix race condition on loop device allocation by @alex3d</li> <li>rockchip-rk3588: edge: add rkvdec2 support by @amazingfate</li> <li>Rootfs cache is repeating generation over and over again by @igorpecovnik</li> <li>add device-tree-compiler to bsp-cli debian dependencies by @alexl83</li> <li>Run shellfmt to complete code by @igorpecovnik</li> <li>Networking: set proper hook location for extensions by @igorpecovnik</li> <li>ext: fs-cryptroot-support: don\u2019t abuse <code>add_host_dependencies</code> by @rpardini</li> <li>rockchip-rk3588 6.8/610: add <code>i2c8-m2</code> overlay by @rpardini</li> <li>rk3588: Enable <code>current</code> kernel branch for some boards by @ColorfulRhino</li> <li>Add orangepi5-plus UART overlays by @alexl83</li> <li>networking: main-config: introduce <code>NETWORKING_STACK</code> to control network exts; allow \u201cnone\u201d; fix typo by @rpardini</li> <li>Helios64: move to supported section by @igorpecovnik</li> <li>phytium-embedded: add bpf_syscall support by @chainsx</li> <li>Use random-mac only with systemd-networkd (minimal images) by @igorpecovnik</li> <li>Rockcchip RK3588: Rename overlay suffix to match reality by @igorpecovnik</li> <li>distro: trixie: Add riscv64 to supported architectures by @ColorfulRhino</li> <li>Revert \u201cdistro: trixie: Add riscv64 to supported architectures\u201d by @ColorfulRhino</li> <li>kernel: mainline: Bump 6.10-rc4 to 6.10-rc5 by @ColorfulRhino</li> <li>cli: Add command \u201cdts-check\u201d to validate dts files and improve board &amp; patch development overall (resubmission) by @ColorfulRhino</li> <li>tools: Update shellfmt from version 3.6.0 to 3.8.0 by @ColorfulRhino</li> <li>actions: Use \u201call-globs\u201d instead of \u201cany-glob\u201d for negated checks by @ColorfulRhino</li> <li>Fix aml-s9xx-box bsp-cli package upgrade by @SteeManMI</li> <li>DTS-check: Python librarires have troubles to build, disabling for now by @igorpecovnik</li> <li>Fix <code>dts-check</code> command and use Pip for some Python packages instead of APT by @ColorfulRhino</li> <li>bootscript: Remove deprecated bootarg \u201cswapaccount=1\u201d by @ColorfulRhino</li> <li>Odroid M1: add a network rule to rename default name by @igorpecovnik</li> <li>Add new \u201cBSP\u201d and \u201cGitHub\u201d label for the auto-labeler by @ColorfulRhino</li> <li>rk3588: bump default blobs (DDR:1.16, BL31:1.45); remove board-specific blobs from boards that used those versions by @rpardini</li> <li>fix: partitioning: disable <code>orphan_file</code> (<code>FEATURE_C12</code>) for ext4 filesystems on 1.47+ e2fsprogs host by @rpardini</li> <li>aml-s9xx-box: Remove u-boot and update generated extlinux.conf by @SteeManMI</li> <li>GitHub: Improve issue templates and add new <code>Task</code> template for project management by @ColorfulRhino</li> <li>station-m2: update u-boot patches by @chainsx</li> <li>kde-neon: use Neon\u2019s \u201cuser\u201d repo for Jammy &amp; return it to <code>csc</code> status by @rpardini</li> <li>actions: labeler: Fix label colors by removing <code>#</code> prefix by @ColorfulRhino</li> <li>Move board-specific config (Odroid C1) away from family config by @ColorfulRhino</li> <li>Remove haveged to save space and resources by @alexl83</li> <li>Lets not spam users with error message on fresh checkout by @viraniac</li> <li>BPI-CM4: bluetooth: <code>fw version 0xb5d66dcb</code> by @pyavitz</li> <li>Update odroidxu4-current to 6.6.36 by @belegdol</li> <li>Odroid XU4: remove deprecated patch by @igorpecovnik</li> <li>Add Matrix to README by @EvilOlaf</li> <li>extensions/radxa-aic8800: fix aic8800_dkms_file_name for sdio by @andyshrk</li> <li>Bump default boot blobs for RK3528, RK3566 and RK3568 and use them for NanoPi R5C by @ColorfulRhino</li> <li>armbianmonitor <code>-u</code>: rationalize paste server retrying, use ANSI dmesg by @rpardini</li> <li>cli: uboot: Include PYTHONPATH in env for compiling U-Boot by @ColorfulRhino</li> <li>Integrate <code>media</code> boards into the <code>rockchip64</code> family by @ColorfulRhino</li> <li>Cleanup: Remove old torrents by @ColorfulRhino</li> <li>Cleanup: Remove leftovers of former <code>BOARDFAMILY</code> <code>rk322x</code> (now integrated into the <code>rockchip</code> family) by @ColorfulRhino</li> <li>odroidm1/orangepi3b: use default (newer) blobs; rewrite patches; bump -rc u-boot to final by @rpardini</li> <li>Cleanup: Clean leftovers in <code>packages/extras-buildpkgs</code> by @ColorfulRhino</li> <li>Cleanup: Remove some leftover kernel patch folders by @ColorfulRhino</li> <li>radxa-zero3: add <code>edge</code> branch (6.9.y) by picking DT from linux-rockchip#for-next &amp; using Kwiboo\u2019s 24.07 u-boot by @rpardini</li> <li>u-boot: add HOME env for make invocations to avoid binman/Python problems with older u-boot versions by @rpardini</li> <li>rockchip: fix rk322x-box uboot boot order by @paolosabatino</li> <li>Addressing two problems related to <code>wireless at firstlogin script</code> by @igorpecovnik</li> <li>Remove OrangepiZero2 heavily outdated legacy kernel by @igorpecovnik</li> <li>v3: Add new RISCV family \u201cSpacemiT\u201d and board BananaPi F3 by @ColorfulRhino</li> <li>Fix btrfs and xfs resize by @Ratio2</li> <li>aml-s9xx-box: bsp-cli hashing fixes by @rpardini</li> <li>Bump sunxi-current and sunxi64 to latest tag by @EvilOlaf</li> <li>improve fs-cryptroot-support.sh by @alexl83</li> <li>build(deps): bump setuptools from 70.1.1 to 70.2.0 by @dependabot</li> <li>nanopi-r5s: bump blobs &amp; u-boot enhancements for UMS/otg/bootorder by @rpardini</li> <li>Update support for recore boards by @eliasbakken</li> <li>Fixing syntax at Recore and add missing board level variables by @igorpecovnik</li> <li>rootfs: add comment to force rootfs rebuild by @rpardini</li> <li>Test automation - adjust kernel test targets. by @igorpecovnik</li> <li>Fix Khadas Edge 2 uboot build by @efectn</li> <li>Add recore dts patch to series.conf so it gets applied by @eliasbakken</li> <li>bsp-cli/bsp-desktop: hashing fixes by @rpardini</li> <li>Fix several issues related to building U-Boot by @ColorfulRhino</li> <li>Bump rk322x-box and rk3318-box to u-boot v2024.07-rc5 by @paolosabatino</li> <li>fix: firefly-itx-3588j fails to boot, and audio output by @SeeleVolleri</li> <li>u-boot: use <code>pipetty</code> in place of <code>unbuffer</code> by @rpardini</li> <li>Purge <code>s5p6818</code> board family by @ColorfulRhino</li> <li>git: git_ensure_safe_directory(): use env vars instead of changing config by @rpardini</li> <li>Spacemit: use same kernel config as on known to work image by @igorpecovnik</li> <li>Update JetHub boards support by @adeepn</li> <li>Next set of U-Boot compilation fixes by @ColorfulRhino</li> <li>fix uboot compilation issues on Orange Pi 5/5 Plus by @efectn</li> <li>Reverting attempted git-safe folder problem by @igorpecovnik</li> <li>Test automation - optimise testing on targets by @igorpecovnik</li> <li>mixtile-blade3: use default blobs &amp; bump vendor u-boot to <code>next-dev-v2024.03</code> by @rpardini</li> <li>mekotronics: rk3588: u-boot: borrow patch to fix build on newer gcc by @rpardini</li> <li>Move OPi5/5B/5 Plus uboots to Radxa git tree by @efectn</li> <li>rk35xx: Remove <code>legacy</code> kernel target from board configs by @ColorfulRhino</li> <li>rockpi-s: Remove <code>legacy</code> kernel 4.4 support by @ColorfulRhino</li> <li>Armbian-install: add option to wipe target destination by @igorpecovnik</li> <li>Allow to pass docker login when in CI, but not in GitHub actions by @adeepn</li> <li>Adjust Rockpi S patch to align with upstream changes by @igorpecovnik</li> <li>RTW88: 6.6: upstream wireless: <code>fixups</code> by @pyavitz</li> <li>Allwinner: set legacy 6.1.y to last known build tag by @igorpecovnik</li> <li>add new board radxa-e52c by @amazingfate</li> <li>Bananapi M5: Bump u-boot to v2024.07 final by @igorpecovnik</li> <li>u-boot: embed armbian artifact version in CONFIG_LOCALVERSION by @rpardini</li> <li>odroidm1: bump to u-boot v2024.07; replace defconfig patches with hook by @rpardini</li> <li>bump rk3288 tinkerboard to uboot v2024.07 by @paolosabatino</li> <li>Move the <code>NETWORKING_STACK</code> in main config and add armhf support to Trixie by @ColorfulRhino</li> <li>multiple boards: bump u-boot from v2024.07-rcX to v2024.07 final by @rpardini</li> <li>Beautify <code>shellfmt</code> and add board configs to formatting list by @ColorfulRhino</li> <li>thinkpad-x13s: bump to jhovold\u2019s <code>wip/sc8280xp-6.10-rc6</code>; add fprintd back to Trixie; fixes by @rpardini</li> <li>mixtile-blade3: u-boot: join rockchip-rk3588\u2019s default <code>u-boot-radxa-rk35xx</code> scheme by @rpardini</li> <li>nanopi-r6s: Use mainline U-Boot by @ColorfulRhino</li> <li>mekotronics: u-boot: join rockchip-rk3588\u2019s default <code>u-boot-radxa-rk35xx</code> scheme by @rpardini</li> <li>Trixie: remove / replace missing packages by @igorpecovnik</li> <li>build(deps): bump actions/upload-artifact from 4.3.3 to 4.3.4 by @dependabot</li> <li>partitioning: Reduce <code>commit</code> mount option for btrfs and ext4 to 120 by @ColorfulRhino</li> <li>sunxi-6.1: switch to tag:v6.1.97, re-extracting the corrected ones by @The-going</li> <li>To modify the PWM-fan temperature control policy of fine3399 to adjust the fan speed to a lower level by @Lemon1151</li> <li>mt7623: Bump <code>legacy</code> 4.19 to <code>current</code> 6.6 kernel by @ColorfulRhino</li> <li>nanopi-r5s: u-boot: pci enum in preboot; disable armbian-led-state by @rpardini</li> <li>wifi: rtl8852bs: fix build for rockchip by @amazingfate</li> <li>Fix armbian-firstrun service not disabled on start. by @adeepn</li> <li>Add MKNOD capability to dockershell container by @JohnTheCoolingFan</li> <li>Improve Actions UI, introduce Actions run names for all workflows by @ColorfulRhino</li> <li>Inovato Quadra: enable correct PIN to get wifi working by @igorpecovnik</li> <li>Spacemit-k1 / Banananpi F3: adjust u-boot patch by @igorpecovnik</li> <li>thinkpad-x13s: bump to jhovold\u2019s <code>wip/sc8280xp-6.10-rc7</code> by @rpardini</li> <li>mainline-kernel: bump to <code>6.10-rc7</code> by @rpardini</li> <li>wifi: rtl8852bs: add driver for family instead of board by @amazingfate</li> <li>Desktops: replace missing packages with correct ones by @igorpecovnik</li> <li>firstlogin: quote values if space is legal by @jkt628</li> <li>rockchip-rk35xx-vendor enable rtw89_8852be as module by @alexl83</li> <li>sunxi-6.1: Reverse commit 75317a0, fix real reason inability to load kernel by @The-going</li> <li>BananaPi CM4/M2S: <code>Bump u-boot to v2024.07</code> by @pyavitz</li> <li>u-boot: 2024.07: fix boot from btrfs by @alex3d</li> <li>Move teres-i in supported by @Kreyren</li> <li>Add Libre Computer Alta and Solitude by @Tonymac32</li> <li>SpacemiT: BananaPi F3: U-Boot: use TAG and add SCRIPT support. by @pyavitz</li> <li>SpacemiT: BananaPi F3: <code>update to BL v1.0.8</code> by @pyavitz</li> <li>cli: uboot: Move <code>uboot_cflags</code> variable to before its first use by @ColorfulRhino</li> <li>actions: forked-helper: Don\u2019t escape multiline strings by @ColorfulRhino</li> <li>Trixie: remove non-existing packages from Budgie desktop by @igorpecovnik</li> <li>SpacemiT: Legacy: Wireless RTL8852BS: <code>Fixups</code> by @pyavitz</li> <li>VIM1S/4: follow Khadas\u2019s branch for u-boot by @viraniac</li> <li>add customized GHCR_MIRROR_ADDRESS support by @amazingfate</li> <li>actions: Create workflow to update shell tools via auto-PR by @ColorfulRhino</li> <li>extensions: Establish some consistency with extension logging by @ColorfulRhino</li> <li>rk35xx-vendor: bump to latest sdk release rkr3 by @amazingfate</li> <li>JetHome: Update bsp: fix jethub-init to support /etc/defaults by @adeepn</li> <li>add rk3576 support to rk35xx and armsom sige5 by @amazingfate</li> <li>Enable sound and battery for Retro Lite CM5 by @ginkage</li> <li>Bump koalaman/shellcheck from 0.9.0 to 0.10.0 in <code>lib/functions/general/shellcheck.sh</code> by @github-actions</li> <li>build(deps): bump setuptools from 70.2.0 to 70.3.0 by @dependabot</li> <li>Bump oras-project/oras from 0.16.0 to 1.2.0 in <code>lib/functions/general/oci-oras.sh</code> by @github-actions</li> <li>Bump sharkdp/bat from 0.23.0 to 0.24.0 in <code>lib/functions/general/bat-cat.sh</code> by @github-actions</li> <li>Add board config for Retro Lite CM5 by @ginkage</li> <li>oci-oras: fix for ORAS &gt; 1.x, as it now requires <code>HOME</code> to be set (fixes <code>download-artifact</code>) by @rpardini</li> <li>mesa-vpu: use kisak mesa ppa instead of oibaf by @amazingfate</li> <li>utils-dpkgdeb: force rebuild of all artifacts, due to https://github.com/armbian/build/pull/6964 (ORAS change) by @rpardini</li> <li>Temporally move TI build targets to EOS as Git is out of reach by @igorpecovnik</li> <li>urgent: Hotfix for rk3399 boot by @paolosabatino</li> <li>Bump rockchip64 edge kernel to 6.10 by @paolosabatino</li> <li>rockchip: bump edge kernel to 6.10 by @paolosabatino</li> <li>Fix rtl8189fs WiFi driver by @schwar3kat</li> <li>Update odroidxu4-current to 6.6.41 by @belegdol</li> <li>build(deps): bump setuptools from 70.3.0 to 71.1.0 by @dependabot</li> <li>Add HDMI-rx to linux 6-10 for rk3588 by @benhoff</li> <li>SpacemiT: <code>write_uboot_platform</code>: eMMC Support by @pyavitz</li> <li>fix rk3568-roc-pc by @chainsx</li> <li>Fixed Tinker-edge-r HDMI 4K bug by @ARC-MX</li> <li>Fix for no network inside Docker container by @igorpecovnik</li> <li>add new board armsom-aim7-io by @amazingfate</li> <li>Repo management: rework to increase reliability and speed by @igorpecovnik</li> <li>add new board RK3328 Heltec HT-M2808 by @sicXnull</li> <li>mesa-vpu: install backported mesa from obs for bookworm panthor driver by @amazingfate</li> <li>Awarding regular contributors - adding a special PR tag by @igorpecovnik</li> <li>UEFI x86 and arm64: Bump EDGE kernels to 6.10.y by @igorpecovnik</li> <li>Debian: drop support for Budgie on Trixe / Bookworm.  by @igorpecovnik</li> <li>rockchip64-edge: add rkvdec2 for rk356x by @amazingfate</li> <li>Switch Retro Lite CM5 back to legacy U-Boot by @ginkage</li> <li>mesa-vpu: install chromium package instead of chromium-browser by @efectn</li> <li>Extend mesa-vpu extension to load unpatched Chromium by default by @igorpecovnik</li> <li>sun55iw3-syterkit: update kernel config by @chainsx</li> <li>Meson64 edge to 6.10 by @SteeManMI</li> <li>kernel: meson-s4t7: update config to match latest fenix changes by @viraniac</li> <li>Update odroidxu4-current to 6.6.43 by @belegdol</li> <li>thinkpad-x13s: bump to jhovold\u2019s 6.10 (from -rc7) by @rpardini</li> <li>Update sunxi-6.6, switch to v6.6.43 by @The-going</li> <li>build(deps): bump setuptools from 71.1.0 to 72.1.0 by @dependabot</li> <li>build(deps): bump ossf/scorecard-action from 2.3.3 to 2.4.0 by @dependabot</li> <li>Adjust patches that are broken or they found a way upstream by @igorpecovnik</li> <li>Update board config h96-max to mainline u-boot by @hqnicolas</li> <li>Repo management: base-files are placed under wrong repo key by @igorpecovnik</li> <li>config: rk35xx: vendor: enable CONFIG_NVMEM_ROCKCHIP_OTP by @amazingfate</li> <li>Cosmetic fix: do not show repository keys that doesn\u2019t exits by @igorpecovnik</li> <li>Set fixed MAC address for Nanaopi R6S series by @igorpecovnik</li> <li>bsp: armbian-install: fix the search for eMMC and SD card devices by @The-going</li> <li>Move meson edge 6.10 by @SteeManMI</li> <li>Armsom5 - switch to vendor branch and add BOARD_MAINTAINER field to suppress warnings by @igorpecovnik</li> <li>Re-enabling KDE Neon Jammy builds by @igorpecovnik</li> <li>Meson 6.10: adjust patches to align with upstream changes by @igorpecovnik</li> <li>Bump Marvell mvebu EDGE family to 6.10.y by @igorpecovnik</li> <li>Add latest Linux Mint versions, Virginia and Wilma, to supported hosts. by @schwar3kat</li> <li>MBa8MPxL fixes and updates by @tq-schmiedel</li> <li>build(deps): bump actions/upload-artifact from 4.3.4 to 4.3.5 by @dependabot</li> <li>Odroid XU4: bump EDGE kernel to 6.10.y by @igorpecovnik</li> <li>Udoo &amp; Cubox: imx6: bump EDGE kernel to 6.10.y by @igorpecovnik</li> <li>RaspberryPi: bump EDGE kernel to 6.10.y by @igorpecovnik</li> <li>Improve partitioning, set correct partition type UUID for root filesystem by @ColorfulRhino</li> <li>MBa8MPxL: rework uboot patches by @tq-schmiedel</li> <li>Clarify label for entering giveaway - code completion, all authors counts by @igorpecovnik</li> <li>Odroid XU4: Remove deprecated patches on CURRENT branch by @igorpecovnik</li> <li>uboot: rk3576: add patches to enable tf card boot by @amazingfate</li> <li>nanopi-r5c: enable KASLR (current|edge) by @alexl83</li> <li>orangepi5-plus: patch u-boot 2024.07 to support KASLR by @alexl83</li> <li>orangepi5: fix SPI flash boot by @efectn</li> <li>sunxi-6.9: Add megous patches and switch EDGE to tag:v6.9.12 by @The-going</li> <li>add general 2024.07 patches to orangepi5-plus u-boot by @alexl83</li> <li>nanopi-r5c: add general u-boot 2024.07 patches by @alexl83</li> <li>Send summaries of PR and merges to main chat by @EvilOlaf</li> <li>BigTreeTech CB1 upstreaming by @JohnTheCoolingFan</li> <li>disable saving state for invalid leds brought up in latest kernels by @alexl83</li> <li>Fix armbian-firmware-full package build. by @h-s-c</li> <li>BigTreeTech CB1: current: Enable IR Receiver by @JohnTheCoolingFan</li> <li>Allwinner legacy and current - bump to latest version by @igorpecovnik</li> <li>Fixed tinker-edgr-r board GPU bug, drivers:regulator:fan53555:add new device chip id by @ARC-MX</li> <li>Link to the actual pr rather than commit with no reference by @EvilOlaf</li> <li>Discord: fix pr being announce multiple times by @EvilOlaf</li> <li>RaspberryPi: Rewrite kernel configs for legacy and current by @igorpecovnik</li> <li>UEFI kernels: rewrite kernel config for legacy - current - edge by @igorpecovnik</li> <li>Add aic8800 driver for Rock 3C variant by @Zokhoi</li> <li>Prevent running announce script in forks by @igorpecovnik</li> <li>fix firefly itx3588j u-boot patches not applied by @SeeleVolleri</li> <li>aic8800 DKMS driver: fix logic when extension is used by @igorpecovnik</li> <li>build(deps): bump actions/upload-artifact from 4.3.5 to 4.3.6 by @dependabot</li> <li>build(deps): bump pyyaml from 6.0.1 to 6.0.2 by @dependabot</li> <li>attempt to fix pr announce for all contributors by @EvilOlaf</li> <li>Add board Alfred Smart Gateway GZ80X by @pyavitz</li> <li>JetHome: Put module blacklist in the board configs of the respective boards by @adeepn</li> <li>Gateway GZ80X: <code>use actual u-boot.bin</code> by @pyavitz</li> <li>JetHome: fix uboot patchset for JetHub D2 by @adeepn</li> <li>meson64: refresh <code>drv-spi-spidev-remove-warnings.patch</code> by @alexl83</li> <li>JetHome: Update JetHub D2 dts by @adeepn</li> <li>rockchip64: refresh <code>drv-spi-spidev-remove-warnings.patch</code> by @alexl83</li> <li>Support kernel compilation with Clang/LLVM by @Randl</li> <li>rockchip64: Enable <code>CONFIG_SECURITY_DMESG_RESTRICT</code> kernel option by @alexl83</li> <li>JetHome: update list of preinstalled packages for JetHub devices by @adeepn</li> <li>RFC: provide KASLR support to u-boot v2024.07 general availability by @alexl83</li> <li>Change KBUILD to <code>build@armbian</code> for kernel builds by @ColorfulRhino</li> <li>rootfs: add comment to force rootfs rebuild by @igorpecovnik</li> <li>Mesa extension: adjust KDE related troubles with packages downgrade by @igorpecovnik</li> <li>sunxi 6.10: Add megous patches by @The-going</li> <li>rockchip-rk3588: Bump <code>edge</code> kernel from 6.10 to 6.11-rc and <code>current</code> from 6.8 to 6.10 by @efectn</li> <li>fix ps4 controllers and clones on rk3588 vendor and legacy kernel by @monkaBlyat</li> <li>actions: forked-helper: Run only if secret is set and simplify workflow by @ColorfulRhino</li> <li>Fix loop device search in docker when there are no loop devices before container launch by @JohnTheCoolingFan</li> <li>build-framework: Switch to next VERSION and update main README by @igorpecovnik</li> <li>rockchip-rk3588: Enable <code>CONFIG_SECURITY_DMESG_RESTRICT</code> kernel option by @alexl83</li> <li>KDE Neon: hack must be implemented only on Ubuntu Noble / Oracular by @igorpecovnik</li> <li>Revert \u201cTemporally move TI build targets to EOS as Git is out of reach\u201d by @igorpecovnik</li> <li>Release: board status check and adjustment by @igorpecovnik</li> <li>Add Board X96Q TV Box LPDDR3 H313 by @sicXnull</li> <li>Discord announcement: push only when label \u201cNeeds review\u201d is set by @igorpecovnik</li> <li>WIP: add initial support for Youyeetoo R1 V3 by @SuperKali</li> <li>Build automation: update kernel test targets for many boards by @igorpecovnik</li> <li>Build automation: Adjust test targets for remaining boards by @igorpecovnik</li> <li>cli: packages: use iputils-ping instead of inetutils-ping by @amazingfate</li> <li>rockchip-rk3588: current: add <code>rfkill-bt</code> device node to Radxa Rock-5B by @alexl83</li> <li>BananaPi M2S: <code>remove fan control</code> by @pyavitz</li> <li>Gateway AM-GZ80x: <code>Re-brand as Amper &amp; update u-boot to v2024.04</code> by @pyavitz</li> <li>Update odroidxu4-current to 6.6.47 by @belegdol</li> <li>rk3588: Bump kernel from 6.11-rc3 to 6.11-rc4 by @ColorfulRhino</li> <li>Add OpenSBI compilation to D1 by @Randl</li> <li>Debian Trixie Cinnamon: remove deprecated package by @igorpecovnik</li> <li>Framework: disable armbian repository while generating rootfs cache by @igorpecovnik</li> <li>build(deps): bump setuptools from 72.1.0 to 72.2.0 by @dependabot</li> <li>Framework: expand package installing function with custom parameter by @igorpecovnik</li> <li>Expand MESA extension fix to Jammy userspace by @igorpecovnik</li> <li>Framework: bump tmpfs size as we are going over by @igorpecovnik</li> <li>Mesa fixes applies only to armhf and arm64. Adjusting by @igorpecovnik</li> <li>Repository management: add config driven BSP package modification by @igorpecovnik</li> <li>Board config ayn-odin2 temporally disable broken build by @igorpecovnik</li> <li>Improved freezing mechanism and README by @igorpecovnik</li> </ul>"},{"location":"Release_Changelog/#v2455-2024-25-7","title":"v24.5.5 (2024-25-7)","text":"<ul> <li>Recreated Bananapi M7, Khadas Edge 2, Orangepi 5, Orangepi 5 Plus</li> <li>Sent rk35xx-vendor (6.1.75) and rk35xx-edge (6.10.y) kernel to the stable repository</li> </ul>"},{"location":"Release_Changelog/#v2454-2024-21-7","title":"v24.5.4 (2024-21-7)","text":"<ul> <li>Recreated Radxa ROCK5 ITX images</li> <li>Recreated Olimex Teres images since they were broken</li> <li>Sent sunxi64-current kernel to the stable repository</li> <li>Sent rk35xx-vendor kernel to the stable repository</li> </ul>"},{"location":"Release_Changelog/#v2453-2024-01-7","title":"v24.5.3 (2024-01-7)","text":"<ul> <li>Recreated Helios64 since board was moved under supported</li> <li>Sent rockchip64-current kernel to the stable repository</li> </ul>"},{"location":"Release_Changelog/#v2452-2024-18-6","title":"v24.5.2 (2024-18-6)","text":"<ul> <li>Recreated Khadas Edge 2 images due to lack of 3D / video acceleration support in 6.1.y</li> <li>Recreated Orangepi 5 plus images due to missing support for 32GB variant</li> <li>Recreated Odroid M1 images with new minimal images and KDE Neon desktop</li> <li>Added Orangepi 5 Pro images</li> </ul>"},{"location":"Release_Changelog/#v2451-2024-25-5","title":"v24.5.1 (2024-25-5)","text":""},{"location":"Release_Changelog/#closed-projects","title":"Closed projects","text":"<ul> <li>AR-1759 Improve Khadas support</li> <li>AR-1988 Resolve Rockchip patch maintenance nightmare</li> <li>AR-2087 Add functionality to freeze git resources</li> <li>AR-2095 Improve support for Radxa Rock S 0 and test USB and Ethernet</li> <li>AR-2100 Add KDE Neon desktop to Armbian Jammy</li> <li>AR-2144 Add support for the Orange Pi 5 Pro</li> <li>AR-2145 Add mainline Panthor driver to 6.1</li> <li>AR-2148 Add board Bananapi M7 to vendor kernel 5.10 and 6.1</li> <li>AR-2153 Add board FriendlyElec CM3588 NAS board</li> <li>AR-2156 Add support for Radxa ROCK 5 ITX</li> <li>AR-2158 Add board Radxa Zero 3 with overlays</li> <li>AR-2171 Drop DEBUG_KERNEL/DEBUG_INFO disables; force EXPERT=y and bring back CONFIG_GPIO_SYSFS=y for all kernels</li> <li>AR-2172 Update meson edge to 6.8 kernel</li> <li>AR-2173 Change the way APT repository is getting updated</li> <li>AR-2174 Thinkpad-x13s: drop steev\u2019s kernel and switch to jhovold\u2019s wip/sc8280xp-6.9</li> <li>AR-2178 Fix u-boot build for Odroid C1 + fix onboard usb hub on Odroid C1</li> <li>AR-2179 Phytium_embedded: update kernel config from phytium repo</li> <li>AR-2180 Rockchip-rk3308-current: sakura pi rk3308b adds kernel 6.6 and 6.8 support</li> <li>AR-2185 Switch odroidxu4-current kernel to 6.6</li> <li>AR-2186 VIM1S/VIM4: Allow building on arm64 platform</li> <li>AR-2187 VIM1S/VIM4: Add support for emmc + NVME/USB booting</li> <li>AR-2196 CLI: Add command \u201cdts-check\u201d to validate dts files and improve board &amp; patch development overall</li> <li>AR-2197 Add support for allwinner T527 Avaota-A1</li> <li>AR-2203 Rockchip-rk3308-current: add support for sakura pi rk3308b</li> <li>AR-2208 Update sm8250: kernel add current and edge branch And Update Odin2: add kernel update hook script</li> <li>AR-2212 H96-TVbox-rk3566 Board Bring Up</li> <li>AR-2215 Enable vendor kernel branch on Khadas Edge 2</li> <li>AR-2216 arm64: swiotlb: Reduce the default size if no ZONE_DMA bouncing needed</li> <li>AR-2218 FriendlyElec CM3588-NAS: device tree fixes &amp; improvements</li> <li>AR-2222 Rock-5b: move edge (only) to mainline/Kwiboo u-boot 2024.04</li> <li>AR-2226 FriendlyElec CM3588 NAS: Add mainline kernel support</li> <li>AR-2227 mekotronics: mainline u-boot (next/Kwiboo rk3xxx-2024.04, generic-rk3588_defconfig)</li> <li>AR-2229 rk3588: vendor-boogie-panthor</li> <li>AR-2230 rockchip-rk3588: it\u2019s vendor boogie panthor time (experimental)</li> <li>AR-2235 Bump meson64 edge from 6.7 to 6.8</li> <li>AR-2246 Add support for Radxa ZERO 3E/3W</li> <li>AR-2250 Rock 4C+: update and cleanup boot config</li> <li>AR-2265 cli: rewrite--patches: rewrite only patches needing a rebase <li>AR-2267 Add SK-AM68 board support</li> <li>AR-2270 rk35xx/rockchip-rk3588: vendor: switch to armbian/linux-rockchip#rk-6.1-rkr1</li> <li>AR-2274 Add tqma8mpxl boards support</li> <li>AR-2276 cli: introduce rewrite-uboot-patches cli command, works similar to the kernel one</li> <li>AR-2281 Add csc hinlink h6xk boards</li> <li>AR-2282 Kernel: Enable *NVMe-over-TCP* for rk35xx/rk3588/rockchip64/uefi/wsl</li> <li>AR-2289 qemu-uefi-x86: new board for virtualized environment with serial console support, kernel boot messages</li> <li>AR-2290 cli: introduce kernel-dtb cli command, to build only DTB, and output full preprocessed dts source</li> <li>AR-2291 cli: introduce inventory-boards cli command, for hopefully painless &amp; useful one-board-per-line CSV output</li> <li>AR-2292 Add board: FriendlyElec CM3588 NAS</li> <li>AR-2293 Add vendor branch for new 6.1-rkr1 BSP vendor kernel, and keep legacy for the 5.10-rkr6 BSP vendor kernel</li> <li>AR-2294 Phytium-embedded: add support for 4Gb Phytium Pi</li> <li>AR-2295 Rockchip RK3588-edge: rewrite kernel patches and configs against v6.8-rc6</li> <li>AR-2297 Refactor automatic armbian-firstlogin</li> <li>AR-2299 Develop build config for board BananaPi M4 Zero</li> <li>AR-2301 Develop and add Ayn Odin2 build config</li> <li>AR-2307 Thinkpad-x13s: bump to steev\u2019s 6.7.y; enable noble userspace; bump alsa-ucm-conf hack to master</li> <li>AR-2308 Debootstrap: use latest git for Ubuntu/Debian debootstrap instead of host-installed</li> <li>AR-2322 Develop PPA for (patched) aarch64 Chromium</li> <li>AR-2327 Add support for RK3588 based Cool PI CM5 EVB</li>"},{"location":"Release_Changelog/#closed-tasks","title":"Closed Tasks","text":"<ul> <li>AR-2043 armbian-install should do rsync \u2013one-file-system</li> <li>AR-2057 enable DRBD in the kernel config of mvebu</li> <li>AR-2077 Orangepi 5: update memory blobs</li> <li>AR-2079 Enable ssdm autologin and apply theme</li> <li>AR-2092 Drop repository for unsupported Releases</li> <li>AR-2096 USB Gadget mode for rockchip 32 bit</li> <li>AR-2101 Cleanup desktop packages</li> <li>AR-2102 Adjusting pull request template for documentation</li> <li>AR-2103 Disable automatic enablement of Nvidia proprietary drivers on x86</li> <li>AR-2105 Rockchip bootscripts: `Failed to load \u2018\u2026-fixup.scr\u2019` and `Unknown command \u2018kaslrseed\u2019`</li> <li>AR-2110 Fix rtl8723cs for kernel 6.8</li> <li>AR-2111 Bump rockchip edge kernel to 6.8</li> <li>AR-2112 Bump rockchip64 edge kernel to 6.8</li> <li>AR-2131 Builds fail for EOS distributions (for example focal)</li> <li>AR-2132 Fail at check_loop_device: device node doesn\u2019t exist and `$LOOP=`</li> <li>AR-2135 Move Firefly station M2 to RK35xx family</li> <li>AR-2136 Synchronise Rock 5 ITX from Radxa repository</li> <li>AR-2137 Cleanup and merge OPi5 Plus device tree </li> <li>AR-2138 Add support for the Orange Pi 5 Pro to 6.1 </li> <li>AR-2139 Add armsom sige1 support to 6.1</li> <li>AR-2140 Add Radxa Rock 5c support to 6.1</li> <li>AR-2141 Add dynamic-power-coefficient properties to all cores</li> <li>AR-2142 Sync Panthor with drm-misc-next by adding missing commits</li> <li>AR-2146 Upgrade RKNPU driver to 0.9.6</li> <li>AR-2147 Cleanup Khadas edge 2 device tree</li> <li>AR-2149 Use simple-audio-card for HDMI sound for rk3528</li> <li>AR-2151 Carrying over some CM5-related commits from Radxa 3.4 branch</li> <li>AR-2152 Add missing led gpio for hinlink h66k</li> <li>AR-2155 Add cooling-maps and pwm-fan support for Station M3</li> <li>AR-2159 Allow FFmpeg to capture from HDMI input</li> <li>AR-2160 Add Ubuntu Noble support for Rockchip multimedia extension</li> <li>AR-2161 Switch CM3588 NAS to kwiboo uboot</li> <li>AR-2162 Declare Ubuntu Noble as supported build target</li> <li>AR-2164 Rockchip rk3588 edge: add Hantro G1 VDPU and RGA2</li> <li>AR-2165 Rockchip RK3588 EDGE: add generic pwm overlays from vendor kernel</li> <li>AR-2166 rk35xx: drop vendor-boogie-panthor BRANCH; it has been integrated into vendor</li> <li>AR-2167 Multiple boards: fixes for board file syntax / missing vars (fixing JSON matrix prepare</li> <li>AR-2168 VIM1S/VIM4: initialize video firmware symlink</li> <li>AR-2169 Use oibaf and v4l2 extension in desktops only</li> <li>AR-2170 Treat sid and unstable as synonyms in distro-specific.sh</li> <li>AR-2175 Add latest Ubuntu development branch Oracular</li> <li>AR-2176 Armsom rk3588 boards: use radxa\u2019s new uboot</li> <li>AR-2177 Phytium_embedded: update phytium u-boot binary</li> <li>AR-2182 Enable android binder to support android containers like anbox or waydroid on rk3588 edge kernel builds</li> <li>AR-2190 Rockchip: bump rk322x u-boot to v2024.01 and support HDMI</li> <li>AR-2191 Switch Radxa u-boot to more recent branch</li> <li>AR-2192 Odroidn2: u-boot: fix eMMC stability</li> <li>AR-2198 Rockchip64: cleanup rk3318-box hdmi patches</li> <li>AR-2199 Add current kernel support for phytium-embedded</li> <li>AR-2201 Board: h96 rk3566 HDMI sound &amp; audio fix</li> <li>AR-2202 Odin2 Use Custom ABL, boot from TF Card</li> <li>AR-2204 H96-tvbox-3566 device tree fixes &amp; improvements: wifi fix, Led and IR enable</li> <li>AR-2206 rk35xx-vendor: enable panthor gpu driver</li> <li>AR-2207 Rockchip64: bump rk3318-box uboot to v2024.01</li> <li>AR-2209 Typo: while Fosstodon is the instance, Mastodon is the software used.</li> <li>AR-2210 Rockchip64-edge: add pcie support to orangepi rk3399</li> <li>AR-2214 Rockchip-rk3588-edge: opi5b: add support for pcie wifi </li> <li>AR-2217 rockchip-rk3588-edge: opi5: fix typec and add support for GPU</li> <li>AR-2219 Unlock Code and Thunderbird from all distributions</li> <li>AR-2223 Add bluedevil for bluetooth support</li> <li>AR-2231 rockchip: rewrite dts for rock3c</li> <li>AR-2233 DE: KDE: add package kscreen</li> <li>AR-2236 Rockpro64: bump u-boot to v2024.04-rc4; use binman-produced bins</li> <li>AR-2237 Fix kernel compilation for meson-s4t7 due to Khadas vendor common_drivers not working without DEBUG enabled</li> <li>AR-2238 Fix forced kernel options and make kernel-config consistent with rewrite-kernel-config</li> <li>AR-2239 Rockchip RK3588 edge: enable nodes for armsom-sige7, rock 5a and h88k</li> <li>AR-2240 armsom-sige7: add ap6275p wifi support</li> <li>AR-2241 Rockchip-rk3588-edge: refresh cpufreq patches and auto fan control for Edge2</li> <li>AR-2242 GH Actions: Beautify kernel hardening analysis</li> <li>AR-2243 Khadas-vim3l/khadas-vim3: enable networking cmds in u-boot</li> <li>AR-2244 Rockchip-rk3588-edge: khadas-edge2: add support for GPU and improve display modes</li> <li>AR-2245 Build script: configuration: Check if ROOTFS_TYPE is supported by build host</li> <li>AR-2247 Create linux-libc-dev when building kernel packages</li> <li>AR-2248 bsp-cli: include BOOT_SOC to /etc/armbian-release and bsp-cli hash</li> <li>AR-2255 Enable module snd_aloop for linux-rk35xx legacy and vendor</li> <li>AR-2260 BananaPi M4 Zero: add gpu and uart nodes</li> <li>AR-2262 GH Actions: Kernel hardening analysis: Exclude RISC-V configs</li> <li>AR-2266 Expand predicted size for rootfs for abl type of images</li> <li>AR-2269 Extend PR template when asking for documentation</li> <li>AR-2271 rk35xx-vendor: Add kernel patching config</li> <li>AR-2272 rk35xx-vendor: add rk3528 and lima driver support </li> <li>AR-2275 GH Actions: Update forked-helper and add some doc on secrets in workflow\u2019s README.md</li> <li>AR-2277 u-boot: rewrite/rebase u-boot patches for a few boards; bump odroidm1 and orangepi3b</li> <li>AR-2280 Show correct reason about omit tmpfs usage if FORCE_USE_RAMDISK is set</li> <li>AR-2286 BananaPi M4 Zero: enable 8821cu and blacklist rtw88_8821cu</li> <li>AR-2287 lib: drop old boot_logo code; keep png/gif as they\u2019re used for plymouth</li> <li>AR-2288 Rk35xx vendor kernel: add some network drivers</li> <li>AR-2296 meson-6.7: Copy patches from 6.6</li> <li>AR-2298 Prepare-host/host-release: enable noble for building</li> <li>AR-2303 kernel: call make with INSTALL_MOD_STRIP=1 so modules are stripped</li> <li>AR-2304 wsl2: arm64: current: DRM/FB stuff so wsl2-arm64 can be used in HyperV with video &amp; keyboard</li> <li>AR-2305 mekotronics 3588: add SRC_CMDLINE, for use with u-boot-menu extension</li> <li>AR-2306 khadas-vim3/khadas-vim3l: u-boot v2024.01: enable more compression, kaslr, and led config options via hook</li> <li>AR-2324 Optimize the kernel device tree patch for rk3399-firefly</li> <li>AR-2325 Give shellcheck directions (to /dev/null for dynamic, to repo-relative path for static) for all sourced references</li> <li>AR-2328 Extensions: rk-panthor: mesa-oibaf + DEFAULT_OVERLAYS=\u201dpanthor-gpu\u201d</li> <li>AR-2333 Set linux-image packages to provide wireguard-modules</li> <li>AR-2335 Add chromium v4l2 encoder/decoder udev rules for all boards</li> </ul>"},{"location":"Release_Changelog/#solved-bugs","title":"Solved Bugs","text":"<ul> <li>AR-650 Odroid N2+ possible boot problems on eMMC</li> <li>AR-1582 CI on our runners sometimes throws out error regarding loop devices</li> <li>AR-2034 RockPI-S does WiFi broken on kernels &gt;6.5</li> <li>AR-2045 Resolve extensions rootfs encryption conflicts</li> <li>AR-2070 VIM1S/VIM4: Booting from UHS sdcard only works intermittently</li> <li>AR-2076 Fix random MAC address on Orangepi 5 series</li> <li>AR-2080 Lightdm greeter is without wallpaper - black background</li> <li>AR-2086 Home assistant supervised fails to install on Khadas VIM1S</li> <li>AR-2090 Debootstrap is again too old for latest releases</li> <li>AR-2094 Build failed during partprobing of /dev/loop device.</li> <li>AR-2097 GH Actions: \u201cKernel hardening analysis (pull request)\u201d kconfig-hardened-check: No such file or directory</li> <li>AR-2098 Torrent generation fails silently</li> <li>AR-2121 RockPi-S WiFi broken again on kernel\u2019s &gt;6.7</li> <li>AR-2125 Deboostrap trixie fails at stage 2 </li> <li>AR-2143 Fix Orange Pi 5 Plus load average &gt;= 1</li> <li>AR-2150 Fixing deadlock issue with spin_lock in interrupt handling</li> <li>AR-2154 Fix CEC on rk356X on tv restart</li> <li>AR-2157 Rock-5a: pull down data-strobe to fix emmc compatibility</li> <li>AR-2163 Restore armbian-config desktop icon</li> <li>AR-2181 Rockchip Rock 5C: Fix RK3582 with disabled rkvdec node</li> <li>AR-2183 Fix memory size detection for 1.5GB Orange Pi Zero 3 board on v2024.01 u-boot release</li> <li>AR-2184 rockchip64: rework drm hunk due to mainlined patch</li> <li>AR-2188 Make debian/trixie debootstrap-able again</li> <li>AR-2189 Fix PCIe for RK35xx+Fix ROCK5A PCIe device tree</li> <li>AR-2193 Hostdep fixes for Noble distutils and pyelftools removed hooks</li> <li>AR-2200 Fixing broken device tree for H96 tvbox 3566</li> <li>AR-2205 Fixing not operational USB port on Udoo quad</li> <li>AR-2211 Ramlog: harden the zram mounting</li> <li>AR-2213 Restore wireless functionality on Rock Pi S</li> <li>AR-2220 Rockchip: update DTS patches for Orangepi R1 Plus</li> <li>AR-2221 riscv64: fixes/skips for building (sans Docker) ON riscv64</li> <li>AR-2224 Disable mtd-tools on Armbian Noble for armhf architecture</li> <li>AR-2225 Fixing broken user space packages dependencies and small optimisations</li> <li>AR-2228 RTW88: 6.x.y patches adjustment due to upstream changes</li> <li>AR-2232 Raspberry 5 has troubles booting when faster memory access is enabled</li> <li>AR-2234 BananaPi CM4/M2S: The fan on the unit is constantly running. So lets set thermal trip points</li> <li>AR-2252 Rockchip RK3588 edge: fix wrong gpu node patch</li> <li>AR-2253 Rockchip RK3588 edge: improve display modes support</li> <li>AR-2273 Xiaomi elish fix 6.7: fixing broken dsi panel</li> <li>AR-2283 Remove hard-coded defaults from repository management tool</li> <li>AR-2285 Several small fixes for Banana Pi M4 Zero</li> <li>AR-2300 Rockchip RK3588 edge: Orangepi 5 pluse: fix USB3 Host</li> <li>AR-2309 Fixing small problems in wireless driver RTW88: RTL8822/21CU code</li> <li>AR-2311 Meson64: fixing Librecomputer Lafrite boot failure</li> <li>AR-2323 Resolving Armbian Noble incompatibility with Rockchip VPU extension</li> <li>AR-2326 Radxa rock-5c: rename wireless interface name to a static one</li> <li>AR-2329 Add new user to render group, otherwise the non-root user do not have access /dev/dri/renderD128 on RK3399</li> <li>AR-2334 Resolve dependency issues with armbian-config</li> </ul>"},{"location":"Release_Changelog/#closed-sub-task","title":"Closed Sub-task","text":"<ul> <li>AR-2082 Make initial devicetree to make most parts work (USB2, USB3, SD etc.)</li> <li>AR-2083 Add Type-C support</li> <li>AR-2084 Make AP6275P work on upstream kernel</li> <li>AR-2085 Add Khadas Edge2 support to upstream Khadas MCU driver</li> </ul>"},{"location":"Release_Changelog/#v2426-2024-6-5","title":"v24.2.6 (2024-6-5)","text":"<ul> <li>recreated images for Bananapi CM40IO, Bananapi M7</li> </ul>"},{"location":"Release_Changelog/#v2425-2024-4-2","title":"v24.2.5 (2024-4-2)","text":"<ul> <li>recreated images for Rpi5 due to a bug</li> </ul>"},{"location":"Release_Changelog/#v2424-2024-3-12","title":"v24.2.4 (2024-3-12)","text":"<ul> <li>added KDE Neon 6 desktop images for generic UEFI targets, Orangepi 5 / 5+ (with new vendor kernel 6.1.y) and Odroid M1</li> </ul>"},{"location":"Release_Changelog/#v2423-2024-2-26","title":"v24.2.3 (2024-2-26)","text":"<ul> <li>recreated images for Bigtreetech CB1</li> </ul>"},{"location":"Release_Changelog/#v2421-2024-02-18","title":"v24.2.1 (2024-02-18)","text":""},{"location":"Release_Changelog/#closed-projects_1","title":"Closed projects","text":"<ul> <li>AR-1657 Address DNS resolve with Debian Bookworm</li> <li>AR-1797 Auto-testing: install all kernels that are defined</li> <li>AR-1888 fix sluggish hdmi console for vim1s and vim4</li> <li>AR-1988 Resolve Rockchip patch maintenance nightmare</li> <li>AR-2061 Add Orangepi Zero3</li> <li>AR-2062 Mixtile Blade 3 refactor / rockchip-rk3588 edge 6.7</li> <li>AR-2063 Add new board of ASUS Tinker-Edge-R</li> <li>AR-2064 Khadas VIM1S &amp; VIM4 - 5.15 kernel bump</li> <li>AR-2065 Add Xiaomi Mi10(umi) support</li> <li>AR-2066 aml-s9xx-box: Update u-boot-s905x2-s922 to u-boot version 2024.01</li> </ul>"},{"location":"Release_Changelog/#closed-tasks_1","title":"Closed Tasks","text":"<ul> <li>AR-1879 JetHome: update u-boot to 2023.10</li> <li>AR-1985 Generate new function to display download links</li> <li>AR-1990 Move forgotten overlays from Odroid M1</li> <li>AR-2033 revert JetHub H1/D1 wifi driver from rtw88 to vendor</li> <li>AR-1552 Rework support for jethub devices</li> <li>AR-1696 Khadas Edge (RK3399) has wrong name and picture</li> <li>AR-1737 Merge Odroid M1 into rockchip64 family</li> <li>AR-1870 Git workaround failure</li> <li>AR-1925 Move wifi-4003-uwe5622-adjust-for-rockchip to the wireless section</li> <li>AR-1984 Move live patch to extension</li> <li>AR-2000 Several small maintainace tasks</li> <li>AR-2004 Add Ubuntu Noble to the build framework</li> <li>AR-2005 Bump all current kernels to 6.6 LTS</li> <li>AR-2012 Please set dpkg vendor to Armbian in all images</li> <li>AR-2016 Patchset for Rockchip (32b) needs to be ported to 6.7</li> <li>AR-2017 Patchset for Rockchip 64b needs to be ported to 6.7</li> <li>AR-2021 Add Home assistant extensions</li> <li>AR-2032 LVM support, CRYPTROOT and current implementation.</li> <li>AR-2035 Cloud-Init Supprot and Armbian First</li> <li>AR-2050 Add support for Radxa Rock S 0</li> </ul>"},{"location":"Release_Changelog/#solved-bugs_1","title":"Solved Bugs","text":"<ul> <li>AR-1704 Bookworm Gnome lacks wallpaper withing lightdm</li> <li>AR-1735 Command docker-shell seems to be broken</li> <li>AR-1813 Orangepi One + fails to bring up NIC</li> <li>AR-1861 Hashing on wireless patches seems to not work</li> <li>AR-1908 Khadas VIM3 problem with high res displays</li> <li>AR-1915 Extlinux / Khadas Edge 2 install to eMMC fails</li> <li>AR-1933 Fix GitHub labeling anomaly </li> <li>AR-1981 Edge Kernel (6.6.x) breaks WiFi and Bluetooth support for RockPI-S</li> <li>AR-1987 Error when removing BSP package</li> <li>AR-2003 None of the builds of Raspberry Pi 5 goes into desktop</li> <li>AR-2007 Fix armbian.list.disabled exists</li> <li>AR-2009 Extensions from USERPATCHES_PATH are not supported</li> <li>AR-2010 Remove broken symlink</li> <li>AR-2020 RK35xx is seeking for rk35xx config</li> <li>AR-2027 Compressed images failed to upload to GitHub releases</li> <li>AR-2034 RockPI-S does WiFi broken on kernels &gt;6.5</li> <li>AR-2038 KHADAS_OOWOW_BOARD_ID is not set, can\u2019t use image-output-oowow</li> <li>AR-2051 All installed systemd units are forcefully enabled on first boot</li> <li>AR-2052 Cinnamon desktop doesn\u2019t work on vim4</li> <li>AR-2053 Desktop environment takes a long time to load on vim4</li> <li>AR-2054 Image takes a lot of time to load on vim1s/vim4 bookworm image</li> </ul>"},{"location":"Release_Changelog/#v23113-2023-12-20","title":"v23.11.3 (2023-12-20)","text":"<ul> <li>Bugfix: some desktop images on Raspberry Pi 5 didn\u2019t load desktop.</li> </ul>"},{"location":"Release_Changelog/#v23112-2023-12-18","title":"v23.11.2 (2023-12-18)","text":"<ul> <li>added standard support images for Raspberry Pi 5, Odroid N2/N2+, Odroid M1 due to the boards support status change</li> <li>recreated images for Raspberry Pi 4, Nanopi R4S, Orangepi Zero2 due to several bug fixes (check commit log / newsletter for details)</li> </ul>"},{"location":"Release_Changelog/#v23111-2023-11-30","title":"v23.11.1 (2023-11-30)","text":""},{"location":"Release_Changelog/#closed-projects_2","title":"Closed projects","text":"<ul> <li>AR-1702 Switch default login manager</li> <li>AR-1886 Enable artifacts creation at pull request</li> <li>AR-1924 Add support for Hikey 960</li> <li>AR-1928 K3: Update edge kernel to v6.5</li> <li>AR-1929 New Armbian Wallpapers</li> <li>AR-1930 Add orangepi3b build config</li> <li>AR-1940 Add edge kernel support for NanoPi R6S/R6C</li> <li>AR-1941 Rework ac200 patches and config for current and edge kernel.</li> <li>AR-1943 Add initial support for TI SK-TDA4VM board</li> <li>AR-1951 add new device xiaomi-elish</li> <li>AR-1957 Improve labeling system - refactor labeling logic</li> <li>AR-1958 rk3588: configure UEFI_EDK2_BOARD_ID for all UEFI-supported boards</li> <li>AR-1959 use GHPROXY_ADDRESS to customize ghproxy url</li> </ul>"},{"location":"Release_Changelog/#closed-tasks_2","title":"Closed Tasks","text":"<ul> <li>AR-1784 Remove FriendlyElec vendor \u201cdriver\u201d patch in mainline</li> <li>AR-1907 Add latest patch for eeprom support in JetHub D1+</li> <li>AR-1811 Drop host OS-es that can\u2019t compile Crust</li> <li>AR-1882 Clean remaining legacy Rockchip kernels</li> <li>AR-1897 KDE build seems to be missing features</li> <li>AR-1913 Remove midstream kernel</li> <li>AR-1919 Change support status to multiple selection</li> <li>AR-1942 Add board config for Tanix TX6 tvbox</li> <li>AR-1944 Add support for Inovato Quadra</li> <li>AR-1945 hinlink-h28k [new board]: support new SoC Rockchip rk3528</li> <li>AR-1946 rockchip64/edge 6.6.y: update overlay configfs patch from rpi</li> <li>AR-1947 meson-s4t7: Add option to force 16x9 display resolution</li> <li>AR-1948 meson-s4t7: add systemd service to enable fan in automatic mode</li> <li>AR-1949 mekotronics-r58x-pro.wip: add new board Mekotronics R58X-Pro</li> <li>AR-1950 mixtile-blade3: enable pci3x4 nvme boot (requires u.2 -&gt; m.2 adapter from blade3 case kit)</li> <li>AR-1952 Update Rock CM5 I/O board config (#5866)</li> <li>AR-1953 Add settings &amp; updater for KDE</li> <li>AR-1954 add board ArmSoM-w3; with uboot-patch and updated blobs</li> <li>AR-1956 Rockchip64: Clean up archive of all EOL kernels</li> <li>AR-1960 VIM1S/VIM4: Add bluetooth support</li> <li>AR-1969 BPI-CM4: Add support for the waveshare cm4-io-base-b</li> <li>AR-1970 BPI-CM4: Enable usb support on waveshare baseboards via overlay</li> <li>AR-1971 BPI-SM1: Removed UART_B overlay.</li> <li>AR-1972 BPI-SM1: Add UART_A \u201cpin-ctrl: cts rts\u201d</li> <li>AR-1973  Aligning display manager with the desktops</li> <li>AR-1974 Add Ubuntu Mantic build target</li> <li>AR-1979 Update kernel configs for Waydroid and Redroid support</li> <li>AR-1980 xiaomi-elish: bump to kernel 6.7-rc2</li> <li>AR-1983 xiaomi-elish: add typec pd support</li> </ul>"},{"location":"Release_Changelog/#solved-bugs_2","title":"Solved Bugs","text":"<ul> <li>AR-1641 simpledrm module prevents Mali G-31 hardware acceleration</li> <li>AR-1832 x13s errors with bash: line 1: add-apt-repository: command not found</li> <li>AR-1866 UWE5622 driver is broken on 6.5.y</li> <li>AR-1876 Shallow clones CI is getting disabled due to inactivity</li> <li>AR-1911 Raspberry Pi, upgrade fails</li> <li>AR-1923 Rockchip kernels compilation breaking</li> <li>AR-1932 Update firmware for Orangepi R1+ LTS</li> <li>AR-1936 Khadas Vim1s: Fix display output</li> <li>AR-1938 xradio: fix compilation for 6.1+ </li> <li>AR-1961 rangepi3lts: load wifi module via systemd service otherwise it crash</li> <li>AR-1962 Restore LED triggers for each ATA port indicating disk activity in mvebu-edge</li> <li>AR-1963 Fix broken HDMI output on rk3328</li> <li>AR-1964 Orange Pi 3 LTS: Fix ethernet broken for some users on 6.x kernel</li> <li>AR-1965 Fix LicheePi 4A audio problem</li> <li>AR-1966 Khadas Vim1s: Fix monitor not detected after its turned off and on again</li> <li>AR-1967 xiaomi-elish: update config for 6.6, and fix one bluetooth pairing issue</li> <li>AR-1968 bootscript: meson-s4t7: fix booting on ubuntu</li> <li>AR-1976 VIM1S: emmc 23.8.4 install fails to boot after running upgrade using beta repository</li> <li>AR-1977 Default renderer for NetPlan is not set on Debian variants</li> <li>AR-1982 rockpi-s still using ifconfig to set wlan MAC address</li> </ul>"},{"location":"Release_Changelog/#v23085-2023-10-11","title":"v23.08.5 (2023-10-11)","text":"<ul> <li>Recreated images for Khadas VIM4</li> </ul>"},{"location":"Release_Changelog/#solved-bugs_3","title":"Solved Bugs","text":"<ul> <li>AR-1887 Add fan support (fan.service) for VIM4.</li> <li>AR-1893 Fix wifi not working on VIM4N.</li> </ul>"},{"location":"Release_Changelog/#v23084-2023-10-09","title":"v23.08.4 (2023-10-09)","text":"<ul> <li>Recreated images for Khadas VIM1S, Khadas VIM4</li> </ul>"},{"location":"Release_Changelog/#solved-bugs_4","title":"Solved Bugs","text":"<ul> <li>AR-1894 HDMI not working in Armbian Image on VIM1S and VIM4. Its fixed and works on most monitor now in Debian based images, Ubuntu images will also be fixed soon.</li> <li>AR-1895 Fix HDMI monitor does not work after its turned off and on again on VIM1S</li> </ul>"},{"location":"Release_Changelog/#v23083-2023-09-20","title":"v23.08.3 (2023-09-20)","text":"<ul> <li>Recreated images for NanoPi Duo, Orange Pi Zero, Orange Pi Zero 2, Orange Pi 3 LTS</li> </ul>"},{"location":"Release_Changelog/#closed-tasks_3","title":"Closed Tasks","text":"<ul> <li>AR-1506 Reworked AC200 support for Allwinner current and edge kernels</li> </ul>"},{"location":"Release_Changelog/#solved-bugs_5","title":"Solved Bugs","text":"<ul> <li>AR-1280 Xradio xr819 wireless driver not available in Allwinner current and edge kernels</li> <li>AR-1833 Slow network speed reported by iperf3 and nuttcp on Allwinner boards with Gigabit NIC</li> <li>AR-1866 Unisoc UWE5622 wireless driver not available in Allwinner legacy, current and edge kernels</li> </ul>"},{"location":"Release_Changelog/#v23082-2023-09-11","title":"v23.08.2 (2023-09-11)","text":"<ul> <li>Recreated images for Orangepi 5 Plus, Bananapi M1</li> </ul>"},{"location":"Release_Changelog/#v23081-2023-09-01","title":"v23.08.1 (2023-09-01)","text":""},{"location":"Release_Changelog/#closed-projects_3","title":"Closed projects","text":"<ul> <li>AR-1690 Add Crust to Allwinner boards to enable power management functions</li> <li>AR-1700 Add support for most recent memory chips on BPi M5</li> <li>AR-1723 Backport Bananapi CM4 to kernel 6.1 LTS</li> <li>AR-1744 Provide official distro upgrades</li> <li>AR-1838 Adding armbian-gaming as extension</li> <li>AR-1841 Introduce grub-with-dtb extension</li> <li>AR-1842 Add Lenovo X13S as WIP board</li> <li>AR-1843 Khadas VIM3/VIM3L u-boot 23.07-rc4 + SPI-NOR/MTD booting support</li> <li>AR-1850 Odroid M1 de-infest Petitboot &amp; use Kwiboo\u2019s 2023.10-rc2+gmac u-boot</li> </ul>"},{"location":"Release_Changelog/#closed-tasks_4","title":"Closed Tasks","text":"<ul> <li>AR-1647 Enable missing modules in sunxi64</li> <li>AR-1718 Optimise images download build lists</li> <li>AR-1719 Add and test 4G PCI modem on Bananapi CM4</li> <li>AR-1722 Adjust Bananapi WiKi Pages</li> <li>AR-1725 Update CM4 download pages</li> <li>AR-1726 Add CM4 to auto-testing facility</li> <li>AR-1728 Check if appropriate build targets has been generating</li> <li>AR-1730 Make a hires photo of CM4 with modules placed on</li> <li>AR-1780 Adjust u-boot patches to apply correctly</li> <li>AR-1803 Enable wireless driver for MT7921U on all kernels</li> <li>AR-1806 Generate all images that are declared in targets.yaml for single device</li> <li>AR-1807 Test data visualisation JSON / PHP / HTML</li> <li>AR-1824 Move Debian riscv64 from ports as its not 1st class citizen</li> <li>AR-1826 Timezone select is too closed on status of the countries</li> <li>AR-1834 Add gnome-calculator back to the default package base</li> <li>AR-1836 Add SPI boot support for Rock5A</li> <li>AR-1837 Add Orange Pi Plus</li> <li>AR-1839 Introduce PASTE_URL to make easy to change paste service used</li> <li>AR-1840 Add pwm-fan support to Nanopi R4S</li> <li>AR-1844 NanoPi Duo2: enable powerbutton and ethernet</li> <li>AR-1845 Add bluetooth-hciattach extension to Orange Pi 5</li> <li>AR-1846 Add Collabora rockchip-rk3588 mainline based branch</li> <li>AR-1847 Add Radxa CM5 with I/O board</li> <li>AR-1848 Fix thermal monitoring in 6.1 kernel</li> <li>AR-1849 NanoPC-T6 Collabora: add PCIe 3</li> <li>AR-1851 Add Debian Trixie host and target support</li> </ul>"},{"location":"Release_Changelog/#solved-bugs_6","title":"Solved Bugs","text":"<ul> <li>AR-1539 XFCE image Rpi is missing from web download</li> <li>AR-1570 Incomplete information in /etc/armbian-(image)-release</li> <li>AR-1684 Synaptic search is super slow</li> <li>AR-1707 Nightly images are not build with beta repository</li> <li>AR-1724 CM4: Onboard WiFi and Bluetooth does not work</li> <li>AR-1729 Userpatches support for series.conf seems broken</li> <li>AR-1764 Some Allwinner 32bit boards hangs at boot</li> <li>AR-1765 Recreate images that are missing in 23.05 release</li> <li>AR-1771 Rockpi4c+ link on download page broken</li> <li>AR-1772 RockPI-S serial console drops keystrokes</li> <li>AR-1787 Installing Khadas Vim3 image directly to eMMC fails</li> <li>AR-1798 Orangepi 3 / LTS and Nanopi Black 5 does not boot</li> <li>AR-1802 Possible bug in image assembly process</li> <li>AR-1814 Installing M2PRO to eMMC fails to boot from eMMC</li> <li>AR-1817 Enable wireless driver for MT7915E on all kernels</li> <li>AR-1835 mkfs.vfat command is missing in minimal images</li> </ul>"},{"location":"Release_Changelog/#v230524-2023-08-02","title":"v23.05.24 (2023-08-02)","text":"<ul> <li>Recreated images for: Banana M2S, Odroid C2, Khadas VIM3</li> </ul>"},{"location":"Release_Changelog/#v23052-2023-06-06","title":"v23.05.2 (2023-06-06)","text":"<ul> <li>AR-1765 Recreate images that are broken/missing in 23.05 release</li> </ul>"},{"location":"Release_Changelog/#v23051-2023-05-31","title":"v23.05.1 (2023-05-31)","text":""},{"location":"Release_Changelog/#closed-projects_4","title":"Closed projects","text":"<ul> <li>AR-1516 Clean base desktops</li> <li>AR-1536 Cleanup CLI packages list</li> <li>AR-1543 Update RK35xx legacy kernel to 5.10</li> <li>AR-1546 Merge all RK3588 under one kernel</li> <li>AR-1549 Unify architecture definitions</li> <li>AR-1557 Cleaning and adjusting CLI packages base</li> <li>AR-1567 Generating JSON matrix</li> <li>AR-1625 Extending JSON generation to support build matrix(es)</li> <li>AR-1639 Enable armbian-config ORAS cache</li> <li>AR-1693 Test as many images for upcoming 23.05 release as possible</li> <li>AR-1700 Add support for most recent memory chips on BPi M5</li> <li>AR-1748 Generate a sticky topic with instructions how to upgrade to Bookworm</li> </ul>"},{"location":"Release_Changelog/#closed-task","title":"Closed Task","text":"<ul> <li>AR-241 Remove NAND hacks from packaging </li> <li>AR-345 Label trigger/workflow issue to jira</li> <li>AR-773 Add support and bug report URL to /etc/os-release</li> <li>AR-1512 Switch Docker pull to armbian/cache repository</li> <li>AR-1526 UWE5622 driver consolidation for rockchip64</li> <li>AR-1542 Add architecture property for distributions</li> <li>AR-1573 Move UEFI kernels to 6.2, move current to legacy</li> <li>AR-1574 Move Rpi kernels to 6.2, move current to legacy</li> <li>AR-1575 Move Odroid M1 to 6.2.y</li> <li>AR-1577 Move mvebu edge kernels to 6.2, current to 6.1, current to legacy</li> <li>AR-1590 Add another package to minimal images</li> <li>AR-1591 Armbian buster xfce image build fails at installing package numix-icon-theme-circle</li> <li>AR-1593 Add &amp; adjust (c) in files</li> <li>AR-1598 Minimal builds are missing apt-utils package</li> <li>AR-1601 Add sudo, wget and htop to minimal packages</li> <li>AR-1602 add `fonts-noto-color-emoji` for terminal Emoji support</li> <li>AR-1620 Effectively remove Ubuntu PRO ads</li> <li>AR-1627 Automatically clean docker images</li> <li>AR-1642 Could not create a username containing a number </li> <li>AR-1645 Installer should handle input in the same way everywhere</li> <li>AR-1651 Change Debian Bookworm into supported target</li> <li>AR-1655 Enable CONFIG_EXFAT_FS on remaining kernels</li> <li>AR-1656 Execute build train if kernel config changes</li> <li>AR-1660 Enable OrangePi Zero (LTS) TV output</li> <li>AR-1663 Add NanoPi R6S / R6C</li> <li>AR-1664 Rebuild board selection for generating official images</li> <li>AR-1669 Optimise PNG images we are using</li> <li>AR-1674 Bump rockchip 32 bit edge to kernel 6.3</li> <li>AR-1679 Drop kernel-jetson-nano-legacy</li> <li>AR-1680 Drop kernel-rockchip-legacy</li> <li>AR-1681 Drop kernel-rk3399-legacy</li> <li>AR-1682 Drop kernel-rockchip64-legacy</li> <li>AR-1683 Enable H616 CPU freq scaling</li> <li>AR-1695 Bump rockchip64 current to 6.1.y</li> <li>AR-1697 Add support for FriendlyElec NanoPi R4SE</li> <li>AR-1698 Add NILFS2 fs support</li> <li>AR-1699 Improve SD card compatibility on Radxa E25</li> <li>AR-1706 Disable SKEL update mechanism from postinst</li> <li>AR-1708 Improve i3-wm support</li> <li>AR-1713 Introduce armbian-base-files artefact</li> <li>AR-1717 Disable debug for postinst</li> <li>AR-1747 Orangepi-r1plus-lts Network Interface logical names have changed and broken networking</li> <li>AR-1760 Move Khadas Edge 2 to supported build targets</li> <li>AR-1586 Consolidate RTL8723CS driver for all families</li> </ul>"},{"location":"Release_Changelog/#solved-bug","title":"Solved Bug","text":"<ul> <li>AR-1443 NanoPi R4S patch overwriting mainline base DTS, needs refactored</li> <li>AR-1474 Emoji not shown </li> <li>AR-1523 UEFI install seems to be broken to some degree</li> <li>AR-1528 Nanopi Neo stuck in boot loop</li> <li>AR-1537 Missing man-db in images</li> <li>AR-1541 UEFI swap problem and missing UUID for EFI partition</li> <li>AR-1545 Update jethub prepackages python modules to install via apt</li> <li>AR-1547 Jetson Nano legacy fails do build kernel</li> <li>AR-1548 Odroid XU4 kernel compilation is failing current / edge</li> <li>AR-1556 \u201cNo space left on device\u201d while rsync root files to image</li> <li>AR-1569 APT cache needs to be cleaned before closing image</li> <li>AR-1578 Missing blobs for Riscv</li> <li>AR-1588 Linter checking for bash shebang is incorrect</li> <li>AR-1589 Kernel analysis is checking too many files</li> <li>AR-1603 Broken wireless driver  8821cu-20210118 </li> <li>AR-1611 Armbian install broken when installing to USB</li> <li>AR-1615 Bad links Orangepizero2</li> <li>AR-1621 Raspberry Pi does not build</li> <li>AR-1623 Armbian install fails to start on minimal images</li> <li>AR-1628 Orange Pi Zero 2 doesn\u2019t work</li> <li>AR-1644 armbian-audio-config fails in minimal images; alsa-utils missing</li> <li>AR-1648 Debian SID also split non-free firmware packages</li> <li>AR-1650 Remote Desktop doesn\u2019t work on desktop images</li> <li>AR-1653 Both Firefox and Chromium are not installing from our repo</li> <li>AR-1658 Wrong artefacts creation</li> <li>AR-1666 File with unexpected execution rights</li> <li>AR-1667 RockPI-S audio support is gone</li> <li>AR-1671 Packages are being downgraded to their repo versions</li> <li>AR-1673 uboot v2018.05-sun50iw9 compile error</li> <li>AR-1675 Nezha has wrong manufactur attached</li> <li>AR-1676 Can\u2019t build linux-u-boot-radxa-e25-legacy and edge</li> <li>AR-1677 Fix building rk322x with vendor 4.4 kernel</li> <li>AR-1678 Can\u2019t build Macchiatobin-doubleshot</li> <li>AR-1685 Rock 3A is missing current kernel def</li> <li>AR-1692 Raspberry Pi does not boot</li> <li>AR-1705 Jethome repository missing Lunar and Bookworm index</li> <li>AR-1714 Our packages md hash files contains temporally path</li> <li>AR-1715 Permission problem when building with GHA</li> <li>AR-1733 Base files does not work for riscv64 due to anomaly</li> <li>AR-1750 Missing information in BSP about repository and build FW commit</li> <li>AR-1751 Ubuntu Advantage is not completely removed</li> </ul>"},{"location":"Release_Changelog/#v23021-2023-02-25","title":"v23.02.1 (2023-02-25)","text":""},{"location":"Release_Changelog/#closed-projects_5","title":"Closed projects","text":"<ul> <li>AR-1281 Armbian community automated build</li> <li>AR-1360 Bump Rockchip64 u-boot to 2022.07</li> <li>AR-1408 Enable EDGE branch on RK3588</li> <li>AR-1424 Refactor release index generation</li> <li>AR-1432 Adjust 3rd party drivers for kernel 6.1</li> <li>AR-1435 Generate CODEOWNER on GitHub</li> <li>AR-1444 Move repo management from the build system</li> <li>AR-1449 Adjust action scripts to adjusted logic</li> <li>AR-1457 Create kernel config security analysis </li> <li>AR-1458 Enable AUFS on 6.1.y</li> <li>AR-1460 Address corner case when looking for default route</li> <li>AR-1461 Move hostapd from packages list</li> <li>AR-1470 Improve new issue / request handling</li> <li>AR-1484 Move meson64 CURRENT to 6.1.y</li> <li>AR-1531 Add support for various HID game controllers and Waydroid</li> <li>AR-1532 Split Bananapi M2PRO from M5</li> </ul>"},{"location":"Release_Changelog/#closed-task_1","title":"Closed Task","text":"<ul> <li>AR-1313 Mvebu EDGE needs to be bumped to 6.1.y</li> <li>AR-1507 Move UWE5622 from kernel patches to misc</li> <li>AR-1379 Add support for minimal images build in CI</li> <li>AR-1412 Move btrfs-progs to the minimal images</li> <li>AR-1413 Port meson sm1 emmc related patches from edge to current</li> <li>AR-1414 Move Bananapi M5 to the previous u-boot version</li> <li>AR-1417 Add gnome-disk-utility to the desktops</li> <li>AR-1418 Replace nand-sata-install with symlink to armbian-install</li> <li>AR-1419 Limit automated swap creation to 16Gb</li> <li>AR-1421 Add  nfs-common package too all except minimal</li> <li>AR-1429 Switch to better 882xbu wireless driver</li> <li>AR-1431 Improve audio config script</li> <li>AR-1433 Change error reporting when linting scripts</li> <li>AR-1434 Bump EDGE kernels to 6.1.y</li> <li>AR-1448 Update u-boot patches for JetHub D1/D1+</li> <li>AR-1495 Change old not supported releases to EOS</li> <li>AR-1509 Orange Pi R1 Plus LTS add 2 device tree overlays for rk3328 uart1 and i2C0. Network and LED\u2019s enhancements.</li> <li>AR-1521 Add next Debian Bookworm</li> <li>AR-1533 Disable event debugging</li> <li>AR-1534 Add wpasupplicant to bookworm</li> </ul>"},{"location":"Release_Changelog/#solved-bugs_7","title":"Solved Bugs","text":"<ul> <li>AR-1367 PCIe is stuck at Gen1 speed even tho overlay pcie-gen2 is specificed</li> <li>AR-1416 Missing font in Bullseye desktop cause strange fonts in Terminator</li> <li>AR-1437 Change to GitHub workflow badge routes</li> <li>AR-1438 rockPi-S patchset overwriting mainline device tree</li> <li>AR-1439 Rockchip64 NanoPi patches overwriting mainline DTS</li> <li>AR-1450 MOTD shows error on some devices</li> <li>AR-1463 Remove code was added to the sources, which creates a mess in rk3399-rock-pi-4.dts</li> <li>AR-1467 Raspberry Pi 3 is unbootable, 4 boots</li> <li>AR-1476 Missing firmware on Nanopi R2S</li> <li>AR-1482 Do not generate swap larger the 16Gb</li> <li>AR-1522 Fix SDIO port irq level bug found in 6.0+ kernel</li> <li>AR-1524 Cracklib check library must be present in all</li> <li>AR-1527 Update patches for RTL8822CS</li> </ul>"},{"location":"Release_Changelog/#v22114-2023-01-23","title":"v22.11.4 (2023-01-23)","text":"<ul> <li>Added image for Bananapi R2 PRO</li> <li>kernel(s) update</li> </ul>"},{"location":"Release_Changelog/#v22113-2022-12-31","title":"v22.11.3 (2022-12-31)","text":"<ul> <li>Added image for Orange Pi 5 (WIP)</li> <li>Updated images for Bananapi M5/M2P</li> <li>Updated images for Orangepi Zero 2</li> </ul>"},{"location":"Release_Changelog/#v22112-2022-12-09","title":"v22.11.2 (2022-12-09)","text":"<ul> <li>Re-added image for Nanopi Duo</li> <li>Regenerated images Rock 5b (updated kernel)</li> </ul>"},{"location":"Release_Changelog/#v22111-2022-12-03","title":"v22.11.1 (2022-12-03)","text":""},{"location":"Release_Changelog/#closed-projects_6","title":"Closed projects","text":"<ul> <li>AR-1278 Implement plymouth for kernel &gt; 5.19.y</li> <li>AR-1319 Upgrade Allwinner boot loader to 2022.08</li> <li>AR-1335 Add gpiod library to armhf and arm64 server + desktop images</li> <li>AR-1346 Grub optimisations</li> <li>AR-1355 Add support for UEFI install to the nand-sata-install</li> <li>AR-1362 Add Bananapi M5 to the build system</li> <li>AR-1389 Refactor u-boot patches</li> <li>AR-1390 Add Riscv64 support</li> <li>AR-1399 Enable BASH linter at PR on changed files</li> <li>AR-1402 Enable ES8316 audio properly on Radxa Rock Pi 4</li> </ul>"},{"location":"Release_Changelog/#closed-task_2","title":"Closed Task","text":"<ul> <li>AR-668 Using extlinux.conf instead of the legacy set of boot.scr + text files.</li> <li>AR-949 Initial board setup</li> <li>AR-977 Add package version number to the rootfs cache</li> <li>AR-1034 Add missing Docker dependencies</li> <li>AR-1112 Add ZFS repository</li> <li>AR-1301 Add Rockpi 4C plus</li> <li>AR-1312 Clean bootlogo patches</li> <li>AR-1317 Remove nfs-kernel-server from default install</li> <li>AR-1325 Deploy Chromium repo and keys to CLI images too</li> <li>AR-1326 Add SKEL distribution to all existing users to the postinst script</li> <li>AR-1336 Fix wallpaper not showing correct in virtual desktop</li> <li>AR-1337 Re-enable Thunderbird email client for Debian Sid</li> <li>AR-1338 Add Codium to Debian builds</li> <li>AR-1342 Switch Codium with Code on x86</li> <li>AR-1343 Update UEFI configs with latest Ubuntu desktop 22.04</li> <li>AR-1349 Add Intel sound firmware to the desktops</li> <li>AR-1350 Deprecating Buster and Focal</li> <li>AR-1351 Adjust desktop support status</li> <li>AR-1352 Add initial configuration for Terminator</li> <li>AR-1353 Define panel shortcuts for Gnome x64 per appgroup</li> <li>AR-1373 Port legacy kernel Rockchip Hardware Random Number Generator forward into Edge</li> <li>AR-1376 Replace Ubuntu PRO advertisement</li> <li>AR-1377 Add plymouth package to base images except minimal</li> <li>AR-1388 Change purge releases action</li> <li>AR-1404 Updated box86 and box64</li> </ul>"},{"location":"Release_Changelog/#solved-bugs_8","title":"Solved Bugs","text":"<ul> <li>AR-577 Fix USB port on Rockpi S</li> <li>AR-1060 Freshly build image doesn\u2019t have BRANCH info in /etc/armbian-release</li> <li>AR-1186 Screen power savings does not work</li> <li>AR-1265 Rock PI-S images will not boot from internal EMMC (SDNAND)</li> <li>AR-1268 RockPI-S WiFi throughput only 300K bytes/second</li> <li>AR-1269 RockPI WiFi assigned different MAC address on each boot</li> <li>AR-1305 CI build wrong images in cron</li> <li>AR-1309 Some images doesn\u2019t want to be built, some are corrupted</li> <li>AR-1310 Update JetHub D1 (j100) u-boot patchset</li> <li>AR-1318 Replace expired GPG key for Github CLI</li> <li>AR-1330 CLI images can ran out of space</li> <li>AR-1332 Missing dependency in Docker images</li> <li>AR-1334 Nanopi Neo3 does not have DT file in  EDGE</li> <li>AR-1340 Disable event debugging on UEFI builds</li> <li>AR-1341 Missing wallpaper in XFCE login screen Armbian Sid</li> <li>AR-1344 Wrong location of package uninstall</li> <li>AR-1345 Thunderbird 32b is no more, refactoring - provide it only for 64b</li> <li>AR-1348 Pine64H b and NPI R1 does not build u-boot</li> <li>AR-1363 Kernel freezing in armbian-kernel might not work correctly</li> <li>AR-1374 Hostapd needs to be workarounded</li> <li>AR-1381 XU4: On a fresh install, after moving root to f2fs eMMC, it fails to boot</li> <li>AR-1384 Fix RTL8822CS driver. Update build config</li> <li>AR-1385 Ambian\u2019s password rules are annoying</li> <li>AR-1391 MOTD is not displaying messages correctly</li> <li>AR-1392 Error triggered when changing BSP package</li> <li>AR-1393 Converting to u-boot fails on riscv</li> <li>AR-1394 Update kernel meson mmc driver to set phase clock from dts</li> <li>AR-1395 Don\u2019t add PPA\u2019s to the CLI images</li> <li>AR-1398 nand-sata-install must fail with a proper error message if the chosen mkfs.xyz is not installed</li> <li>AR-1400 Raspberry Pi is unbootable</li> <li>AR-1403 Wrong post install handling on install</li> <li>AR-1405 When using PPA sources we need to run install_ppa_prerequisites</li> </ul>"},{"location":"Release_Changelog/#v22088-2022-10-29","title":"v22.08.8 (2022-10-29)","text":"<ul> <li>added test images for Odroid M1</li> <li>update rockchip64 kernels</li> <li>Regenerated images for Rockpro64, Rock64, Nanopi M4, Nanopi M4V2, Bananapi, Bananapi PRO, Bananapi M2Plus</li> </ul>"},{"location":"Release_Changelog/#v22087-2022-10-20","title":"v22.08.7 (2022-10-20)","text":"<ul> <li>Regenerated images for Rockpi S, Bananapi M1, PRO, M2+, M5, M64, UEFI, RPi4, ClockworkPi, Nanopi Neo3, Pinebook PRO, Renegade, Tinkerboard, OrangePi Zero, OrangePi Zero 2, OrangePi Zero plus</li> <li>AR-1269 RockPI WiFi assigned different MAC address on each boot</li> <li>AR-1268 RockPI-S WiFi throughput only 300K bytes/second</li> <li>AR-1265 Rock PI-S images will not boot from internal EMMC (SDNAND)</li> </ul>"},{"location":"Release_Changelog/#v22085-2022-10-14","title":"v22.08.5 (2022-10-14)","text":"<ul> <li>Regenerated images for arm64 and x86 UEFI with improved installer</li> </ul>"},{"location":"Release_Changelog/#v2208-2022-08-30","title":"v22.08 (2022-08-30)","text":""},{"location":"Release_Changelog/#solved-bugs_9","title":"Solved Bugs","text":"<ul> <li>AR-1304 Boot splash is broken due to changes in kernel source</li> <li>AR-1299 Debian throws out locale garbage at 1st login</li> <li>AR-1296 JetHub D1 u-boot 2022.07+ bug</li> <li>AR-1295 Switch KDE plasma to Wayland</li> <li>AR-1294 Remove broken packages from Debian SID</li> <li>AR-1291 Several wireless drivers break down starting with 5.19.2</li> <li>AR-1287 Debian SID package deprecation</li> <li>AR-1285 Primary interface problem</li> <li>AR-1282 Upstream wireless driver is broken</li> <li>AR-1270 RockPi cannot host a desktop because it outputs no video</li> <li>AR-1266 Media EDGE and media CURRENT are not compiling</li> <li>AR-1263 Fix armbian-led-state-save.sh wrong behavior on boards without gpio leds.</li> <li>AR-1235 Fix NanoPi (rk3399) boards missing correct device tree files in rk3399-legacy</li> <li>AR-1224 AUFS breaks on 5.15.y</li> <li>AR-1206 Firefox from Mozilla team is n/a on Focal</li> <li>AR-1203 Rock3a only has one recommended target</li> <li>AR-1202 Tinkerboard has only one recommended image on the download page</li> <li>AR-1092 Docker is not working on some 5.15.y. / 5.16.y</li> <li>AR-1037 Missing some repository install options</li> <li>AR-1025 Samba timeouts and throws out error</li> <li>AR-982 Broken / invisible fonts on KDE plasma</li> <li>AR-932 HDMI rules could make troubles on some boards</li> </ul>"},{"location":"Release_Changelog/#story","title":"Story","text":"<ul> <li>AR-1303 Merging download target</li> <li>AR-1288 Move DUT ip addresses to the database</li> <li>AR-1284 Improve GitHub UX</li> <li>AR-1277 Refactor rootfs cache system</li> <li>AR-1248 Add support for month offset when creating cache</li> <li>AR-1239 Wrong board status report at first login</li> <li>AR-1238 Github Actions fine tuning</li> <li>AR-1236 Add images integrity checking script</li> <li>AR-1230 Refactor rootfs cache system</li> <li>AR-1229 Enable code security analysis</li> <li>AR-1220 Create nightly images directly on Github</li> <li>AR-1130 Improve Pull request review culture and participation</li> <li>AR-1081 Setup own mirror for kernel.org git</li> <li>AR-580 Generate CONTRIBUTION.md at build script repository</li> </ul>"},{"location":"Release_Changelog/#closed-sub-task_1","title":"Closed Sub-task","text":"<ul> <li>AR-1231 update meson64 edge kernel to 5.19</li> <li>AR-686 Migrate beta.armiban.com to redirect</li> </ul>"},{"location":"Release_Changelog/#closed-task_3","title":"Closed Task","text":"<ul> <li>AR-1300 Add patches to support PiKVM</li> <li>AR-1292 Conduct forum upgrade to latest version</li> <li>AR-1279 Upgrade Rockchip (32 bit) edge kernel to v5.19</li> <li>AR-1272 Move CSC targets that doesn\u2019t build to EOS</li> <li>AR-1251 When generating rootfs cache also store package versions</li> <li>AR-1249 Enable Debian Sid Gnome, Budgie and Cinnamon to some powerful boards</li> <li>AR-1237 Add a small tool to help with unifying kernel configs</li> <li>AR-1232 JetHome: add JetHub D1p support</li> <li>AR-1223 Desktops are missing calculator</li> <li>AR-1211 add rock-3a emmc support</li> <li>AR-1210 add spi boot support for rock-3a</li> <li>AR-1182 Orange Pi 4 LTS support</li> <li>AR-1132 Update meson64 edge&amp;current kernels</li> <li>AR-1127 Change build train runners to use our runners</li> <li>AR-1073 Remove /lib/build-all.sh</li> <li>AR-1042 Sum important information in CONTRIBUTION.md</li> <li>AR-1028 Add support for rootfs / toolchain bind mount</li> <li>AR-984 Integrate Khadas boards related fixes</li> <li>AR-668 Using extlinux.conf instead of the legacy set of boot.scr + text files.</li> </ul>"},{"location":"Release_Changelog/#v22054-2022-07-14","title":"v22.05.4 (2022-07-14)","text":"<ul> <li>Added more desktop flavors for boards which are capable (Budgie, Gnome, KDE Plasma, Xfce and Cinnamon)</li> </ul>"},{"location":"Release_Changelog/#v22053-2022-06-23","title":"v22.05.3 (2022-06-23)","text":"<ul> <li>All board images have been rebuilt due to corruption found in certain images</li> <li>Fixed Orange Pi 3 LTS bluetooth support</li> <li>AR-1182 - Added board images for Orange Pi 4 LTS</li> <li>AR-1228 - Upgraded bootloader to 22.04 for Rockchip family boards</li> </ul>"},{"location":"Release_Changelog/#v2205-2022-05-28","title":"v22.05 (2022-05-28)","text":""},{"location":"Release_Changelog/#solved-bugs_10","title":"Solved Bugs","text":"<ul> <li>AR-1204 - Orangepi R1plus-lts - USB3 Ethernet not working</li> <li>AR-1202 - Tinkerboard has only one recommended image on the download page</li> <li>AR-1199 - Orangepizero2 legacy images doesn\u2019t boot</li> <li>AR-1197 - Support status shows unsupported even distro variant is supported (random Focal image)</li> <li>AR-1196 - Mainline Kernel patch breaks spidev in 5.15+</li> <li>AR-1195 - Odroid N2 legacy kernel image does not build on Jammy</li> <li>AR-1194 - Legacy kernels doesn\u2019t want to be added to repository</li> <li>AR-1193 - Images without device tree blobs fails to build via CI</li> <li>AR-1192 - Allwinner H5 boards fails on ATF compilation</li> <li>AR-1190 - Docker image creation fails on Jammy host</li> <li>AR-1189 - U-boot xt-q8l-v10 legacy fails to build at CI</li> <li>AR-1185 - Remmina is missing RDP and VNC options</li> <li>AR-1178 - Docker images creation is broken</li> <li>AR-1173 - Github action for generating desktops does not start</li> <li>AR-1172 - Load induced RX bug in the r8152 driver on 5.15 and 5.17</li> <li>AR-1171 - Budgie desktop fails to build on Jammy</li> <li>AR-1170 - Switching to beta repository at images sometimes failed</li> <li>AR-1169 - Chromium does not install on Jammy desktops</li> <li>AR-1167 - Update config to support Linux 5.15.36</li> <li>AR-1160 - When seeking changed kernels two are always marked as changed</li> <li>AR-1151 - Kernel 5.10.y need patch adjustment for boot splash</li> <li>AR-1149 - Current build failure due to packages</li> <li>AR-1148 - radxa zero 512MB (no eMMC) does not load img from SD</li> <li>AR-1141 - Ubuntu Budgie on Focal Jammy / Focal fails</li> <li>AR-1135 - fix armbian ramlog instability</li> <li>AR-1129 - Gnome desktop on Jammy fails to start</li> <li>AR-1115 - Package discrepancy in Jammy</li> <li>AR-1102 - Missing wallpapers in desktop packages</li> <li>AR-1097 - net: stmmac: dwmac-meson8b: interface sometimes does not come up at boot.</li> <li>AR-1091 - Wireless driver for 8822bs is not compatible with 5.15.y and up</li> <li>AR-1061 - udev HDMI rules are causing flickering</li> <li>AR-1033 - U-boot packages doesn\u2019t want to be assembled with Docker</li> <li>AR-1015 - Toolchain download only from a single source</li> <li>AR-712 - Broken framebuffer on A20</li> <li>AR-583 - RK3328 DMC driver needs small (hopefully) update for kernel 5.10</li> <li>AR-191 - SATA doesn\u2019t show up on Banana</li> </ul>"},{"location":"Release_Changelog/#story_1","title":"Story","text":"<ul> <li>AR-988 - Add support for running x86_64 applications</li> <li>AR-775 - Bring Marvell A3700-utils-marvell and mv-ddr-marvell.git to follow master</li> <li>AR-273 - Improve CI autotests facility</li> </ul>"},{"location":"Release_Changelog/#closed-tasks_5","title":"Closed tasks","text":"<ul> <li>AR-1180 - Merge rk35xx-edge into rockchip64-edge</li> <li>AR-1177 - Update only supported repositories</li> <li>AR-1175 - Temperature monitoring for Jetson nano</li> <li>AR-1166 - Add box86 package from 3rd party repository</li> <li>AR-1165 - Update JetHub D1 u-boot patches</li> <li>AR-1164 - Upgrade mvebu64 kernel to 5.17.y</li> <li>AR-1159 - Upgrade UEFI EDGE kernels to 5.17.y</li> <li>AR-1150 - Adjust hash calculating method</li> <li>AR-1132 - Update meson64 edge&amp;current kernels</li> <li>AR-1128 - Add Nvidia driver to the x86 desktop images</li> <li>AR-1126 - Enable desktop compilation at merge request</li> <li>AR-1120 - Sync beta repository in the CI process</li> <li>AR-1108 - Missing images in download section for following boards</li> <li>AR-1076 - Add support for Orangepi 3 LTS</li> <li>AR-1057 - Advertise recommended targets at download pages</li> <li>AR-1008 - Update vars in amlogic u-boot script to match names of default u-boot vars</li> <li>AR-959 - Unifying TAGS as much as possible - as universal as possible</li> <li>AR-628 - Bump Meson64 u-boot</li> <li>AR-296 - Remove compressed indexes for apt?</li> </ul>"},{"location":"Release_Changelog/#v2202-2022-02-28","title":"v22.02 (2022-02-28)","text":""},{"location":"Release_Changelog/#solved-bugs_11","title":"Solved Bugs","text":"<ul> <li>AR-1101 - DRM patch is failing on Rockchip</li> <li>AR-1079 - Ubuntu archive redirector is not providing best service</li> <li>AR-1077 - Fix RPi4 userland audio</li> <li>AR-1069 - First login doesn\u2019t pick up correct shell</li> <li>AR-1065 - Twitter forum registration is not working</li> <li>AR-1063 - X86 desktop images are not enabled in CI</li> <li>AR-1062 - When selecting repository install u-boot might not be flashed</li> <li>AR-1055 - Aptly repository seems to be out of business</li> <li>AR-1048 - Rpi kernel image is not updated on upgrade</li> <li>AR-1043 - linux-firmware repository change branch from \u201cmaster\u201d  to \u201cmain\u201d</li> <li>AR-973 - boot building is failing after update to 2021.10</li> <li>AR-871 - Debian SID broken wallpaper</li> </ul>"},{"location":"Release_Changelog/#story_2","title":"Story","text":"<ul> <li>AR-1074 - Switch all CURRENT to 5.15.y and EDGE to 5.16.y</li> <li>AR-1009 - Armbian Framework extensions and UEFI support</li> </ul>"},{"location":"Release_Changelog/#closed-tasks_6","title":"Closed tasks","text":"<ul> <li>AR-1100 - Support for Orange Pi R1 Plus LTS</li> <li>AR-1084 - 3D support on Debian desktop</li> <li>AR-1078 - Add additional forum plugins and adjust settings</li> <li>AR-1068 - Add gnome-system-monitor to Focal and Jammy</li> <li>AR-1049 - Add ZFS that supports kernel 5.15.y</li> <li>AR-1044 - Improve Raspberry Pi support</li> <li>AR-1041 - JetHome: fix brcm (AP6255) firmware links</li> <li>AR-1040 - Refactor armbian-bsp-cli package creation</li> <li>AR-931 - Using Docker image for building kernels</li> <li>AR-893 - Cleanup rockchip64 u-boot scenarios</li> <li>AR-757 - Adding Raspberry Pi</li> <li>AR-586 - Implement fan controller for Nanopi M4V2</li> </ul>"},{"location":"Release_Changelog/#v2108-2021-08-31","title":"v21.08 (2021-08-31)","text":""},{"location":"Release_Changelog/#solved-bugs_12","title":"Solved Bugs","text":"<ul> <li>AR-886 - u-boot package naming</li> <li>AR-885 - Odroid C4 / HC4 boot failure</li> <li>AR-881 - First login shows \u201cdegraded\u201d</li> <li>AR-879 - RK3328 5.10 + GPU failure</li> <li>AR-875 - Homepage fix</li> <li>AR-874 - Add SATA fix for eBin</li> <li>AR-873 - khadas vim3 no sound</li> <li>AR-872 - When reverting u-boot to last known, some boards are broken</li> <li>AR-867 - H6 Freezing</li> <li>AR-863 - Unstable u-boot also noticed on H3 based boards</li> <li>AR-862 - normalize RK3399 xorg configs</li> <li>AR-857 - Qemu custom hook executing on non-targeted images</li> <li>AR-854 - Pinebook PRO desktop doesn\u2019t build in CI</li> <li>AR-853 - Missing folder when making BSP file</li> <li>AR-852 - Error when placing wallpaper</li> <li>AR-850 - Disable XFWM compositor on XFCE4 desktop to make it run smoother</li> <li>AR-844 - CI is picking up wrong kernel</li> <li>AR-835 - Amlogic GLX desktop fails</li> <li>AR-834 - edge v network weirdness</li> <li>AR-833 - Khadas Edge V no HDMI audio</li> <li>AR-830 - CI needs to rsync cache before start to building new images.</li> <li>AR-829 - CI pipeline could not find some files when signing rootfs cache</li> <li>AR-825 - Fixing I2S related errors on RK3399</li> <li>AR-824 - Broken wifi on Station boards and kernel 5.12.y</li> <li>AR-823 - Pine H64 doesn\u2019t boot kernel 5.12.y</li> <li>AR-822 - Motd false reporting of unsupported</li> <li>AR-821 - Docker creation failed to load repository keys</li> <li>AR-820 - Broken Odroid C2 audio patch</li> <li>AR-819 - Wireguard repo errors</li> <li>AR-818 - When building selected images via CI, status is changed to user-built</li> <li>AR-816 - ZRAM is missing in Jeston Nano legacy</li> <li>AR-780 - Nanopi R4S USB broken</li> <li>AR-779 - New bsp package is common. Per branch changes doesn\u2019t work anymore</li> <li>AR-777 - Docker doesn\u2019t install on Hirsute host</li> <li>AR-776 - Tinkerboard legacy have some troubles booting</li> <li>AR-774 - Orangepi Lite 2 EDGE is failing</li> <li>AR-770 - U-boot fails to install when switching kernel to EDGE</li> <li>AR-764 - Htop configuration exploit / vulnerability</li> <li>AR-749 - Allwinner A20 bootloops on 5.12.y / 2021.04</li> <li>AR-748 - Headers install broken</li> <li>AR-747 - Deeping Desktop doesn\u2019t want to reboot / poweroff</li> <li>AR-744 - Nanopi K2 S905 network is broken</li> <li>AR-741 - Pinebook pro desktop missing tweaks</li> <li>AR-740 - Vnstat throws out garbage</li> <li>AR-737 - Jetson nano throws out some error on boot loader compilation</li> <li>AR-736 - Rockpi S u-boot doesn\u2019t build on GCC.-10</li> <li>AR-713 - Board specific desktop things are going into common desktop package</li> <li>AR-593 - Rockpi S doesn\u2019t boot mainline based kernel</li> </ul>"},{"location":"Release_Changelog/#epic","title":"Epic","text":"<ul> <li>AR-788 - Add Official Support for Some Khadas devices</li> </ul>"},{"location":"Release_Changelog/#story_3","title":"Story","text":"<ul> <li>AR-877 - build_all needs separate logs per image</li> <li>AR-847 - Tinkerboard 2 Support</li> <li>AR-746 - Upgrade EDGE to 5.12.y</li> <li>AR-734 - CSC Support for Avnet MicroZed</li> <li>AR-214 - CI improvements</li> <li>AR-202 - Drop packaging patches and introduce own packaging</li> <li>AR-42 - Merge packaging patches</li> </ul>"},{"location":"Release_Changelog/#closed-tasks_7","title":"Closed tasks","text":"<ul> <li>AR-892 - Promoting Bullseye to supported</li> <li>AR-890 - Desktop analysis with 3D enabled</li> <li>AR-887 - Re-enable Debian Stretch repository update</li> <li>AR-882 - Optimise image compression</li> <li>AR-876 - Make package lists in one row</li> <li>AR-869 - Upgrade ZFS on Linux to v2.1.0 (Focal / Bionic only)</li> <li>AR-865 - Updating driver for 2.5G NIC on Helios64</li> <li>AR-864 - Upgrading EDGE to K5.13.y</li> <li>AR-859 - set - apt.armbian.com - redirect default to http instead of https</li> <li>AR-856 - Basic RC Branch build support</li> <li>AR-846 - Add Ubuntu 21.10 Impish</li> <li>AR-794 - Khadas Edge-V support</li> <li>AR-793 - Khadas VIM3L support</li> <li>AR-792 - Preliminary Khadas VIM3 support</li> <li>AR-791 - Khadas VIM2 support</li> <li>AR-790 - Preliminary Khadas VIM1 support</li> <li>AR-785 - Move mainline boot console to UART0 on Rockpi S</li> <li>AR-784 - Add Nvidia Jetson Nano legacy kernel</li> <li>AR-782 - Provides NFS mount functionality out of the box on CLI images</li> <li>AR-778 - Do not pre-install obsolete apt-transport-https</li> <li>AR-768 - Move Odroid XU4 EDGE to mainline source</li> <li>AR-745 - chroot packaging: build script as separate function</li> <li>AR-743 - Delay first-run autologin</li> <li>AR-732 - Unlock Ubuntu Hirsute as supported target</li> <li>AR-714 - Adjusting support status</li> <li>AR-665 - rk3399 patch failure</li> <li>AR-649 - Adding Rockchip VPU support for 5.11.y</li> <li>AR-635 - Add legacy kernel for Zero2</li> <li>AR-537 - Create Armbian \u201cvirtual\u201d build target to run as VM</li> <li>AR-519 - Odroid N2 Mainline u-boot for edge kernel</li> <li>AR-315 - Add support for GPT table inside armbian-install</li> </ul>"},{"location":"Release_Changelog/#v21056-2021-06-21","title":"v21.05.6 (2021-06-21)","text":"<p>Solved Bugs</p> <p>Updated images for Orangepi Zero</p> <ul> <li>AR-593 - Rockpi S doesn\u2019t boot mainline kernel</li> </ul>"},{"location":"Release_Changelog/#v21053-2021-05-24","title":"v21.05.3 (2021-05-24)","text":"<p>Solved Bugs</p> <ul> <li>AR-780 - Nanopi R4S USB broken</li> <li>AR-816 - ZRAM is missing in Jeston Nano legacy</li> </ul>"},{"location":"Release_Changelog/#v21052-2021-05-24","title":"v21.05.2 (2021-05-24)","text":"<p>Solved Bugs</p> <ul> <li>AR-748 - Headers install broken</li> <li>AR-740 - Vnstat throws out garbage</li> <li>AR-764 - Fixing Htop security issue</li> </ul> <p>Closed Tasks</p> <p>ZFS updated to v2.0.4 (tested on 32bit Odroid HC1 and 64bit N2, Focal and Bionic userland) Added Hirsute CLI images with EDGE Linux 5.12.y for most of the boards</p>"},{"location":"Release_Changelog/#v2105-2021-05-09","title":"v21.05 (2021-05-09)","text":"<p>Solved Bugs</p> <ul> <li>AR-730 -          Duplicate packages error when updating repository</li> </ul> <ul> <li>AR-729 -          Fix Partition Alignment for resizes and armbian-install</li> </ul> <ul> <li>AR-711 -          Network troubles on Nanopi K2 / Odroids</li> </ul> <ul> <li>AR-709 -          Tinkerboard AP crash on client connect</li> </ul> <ul> <li>AR-708 -          Missing library for compiling u-boot</li> </ul> <ul> <li>AR-707 -          Wrong keyboard code detected</li> </ul> <ul> <li>AR-705 -          Compilation issues when building old u-boot</li> </ul> <ul> <li>AR-698 -          XU4 - current kernel oddness with docker</li> </ul> <ul> <li>AR-697 -          Fix Meson64 Default Governor</li> </ul> <ul> <li>AR-688 -          Firefly boot broken</li> </ul> <ul> <li>AR-674 -          Users can\u2019t change desktop wallpaper on Gnome</li> </ul> <ul> <li>AR-666 -          ZSH is disabled on upgrade</li> </ul> <ul> <li>AR-662 -          Distribution support status is not written to the /etc/armbian-release</li> </ul> <ul> <li>AR-659 -          Rootfs image runs out of inodes during build</li> </ul> <ul> <li>AR-653 -          builder issue with gnome</li> </ul> <ul> <li>AR-647 -          Wireless driver 8811CU is broken on 5.11.y</li> </ul> <ul> <li>AR-646 -          Bootsplash breaks compilation on 5.11.y</li> </ul> <ul> <li>AR-644 -          Wireless driver 8188 EU broken and disabled since 5.9.y</li> </ul> <ul> <li>AR-636 -          Odroid N2+ lost additional freq values</li> </ul> <ul> <li>AR-585 -          HDMI-CEC not working on rockchip64 Legacy</li> </ul> <ul> <li>AR-88 -          Banana Pi M3 does not boot</li> </ul> <p>Finished projects</p> <ul> <li>AR-694 -          Create Jira-based checklist for Desktop Testing</li> </ul> <ul> <li>AR-457 -          Enable native arm/arm64 building</li> </ul> <ul> <li>AR-454 -          Additional Desktop Configurations for use with new framework</li> </ul> <ul> <li>AR-444 -          Improving download infrastructure Phase 2</li> </ul> <ul> <li>AR-200 -          Improving Desktop images</li> </ul> <p>Closed Tasks</p> <ul> <li>AR-714 -          Adjusting support status</li> </ul> <ul> <li>AR-710 -          Create imx edge branch</li> </ul> <ul> <li>AR-706 -          Bump Allwinner u-boot to 2021.04</li> </ul> <ul> <li>AR-704 -          Distinguish between edge and normal image in motd</li> </ul> <ul> <li>AR-696 -          Improve Nvidia Jetson Nano support</li> </ul> <ul> <li>AR-673 -          Add few missing packages</li> </ul> <ul> <li>AR-670 -          Add additonal mirros for linux-firmware beside kernel source</li> </ul> <ul> <li>AR-667 -          Move Meson64 DEV to 5.10.y</li> </ul> <ul> <li>AR-657 -          Add instructions how to manual flash boot loader</li> </ul> <ul> <li>AR-656 -          Implement timeout on cache download</li> </ul> <ul> <li>AR-654 -          Fix stability issues of NanoPi M4V2 in current and dev</li> </ul> <ul> <li>AR-651 -          NanoPC-T4 legacy: enable USB-C DisplayPort &amp; eDP outs</li> </ul> <ul> <li>AR-648 -          Resolve GPIO &amp; PWM patches on mvebu</li> </ul> <ul> <li>AR-645 -          Detach rtl8812au from fixed commit ID if it builds from master</li> </ul> <ul> <li>AR-643 -          Bump DEV kernels to 5.11.y</li> </ul> <ul> <li>AR-634 -          Add Orangepi R1 Plus</li> </ul> <ul> <li>AR-633 -          Enable  hardware PRNG/TRNG/SHA on sun8i-ce platform</li> </ul> <ul> <li>AR-613 -          test/beta img auto builder</li> </ul> <ul> <li>AR-612 -          Update pine64 install instructions</li> </ul> <ul> <li>AR-600 -          RK3399\u2019s: Add multimedia and OC overlays</li> </ul> <ul> <li>AR-599 -          Enable HDMI-CEC and ISP1 camera support for rk3399 and rockchip64 legacy</li> </ul> <ul> <li>AR-369 -          Check kernel config changes</li> </ul>"},{"location":"Release_Changelog/#v21024-2021-04-04","title":"v21.02.4 (2021-04-04)","text":"<p>Added Nvidia Jetson Nano (community supported target)</p> <p>Rebuild images for Odroid N2, H4, HC4</p>"},{"location":"Release_Changelog/#v21023-2021-03-09","title":"v21.02.3 (2021-03-09)","text":"<p>All kernels received upstream updates</p> <p>All images has been rebuilt</p> <p>Fixed reboot troubles on meson64 family (Odroid N2, C2, H4, HC4)</p> <p>ZSH upgrade fixed</p> <p>Type-C DP support for the NanoPC T4</p> <ul> <li>AR-654 -         NanoPi M4V2 stability fix for current and dev</li> </ul> <p>Allwinner a20 fail to init hdmi in many cases / fixed (all images need to be rebuilt)</p> <ul> <li>AR-660 -         Attempt to improve stability on Helios64</li> </ul>"},{"location":"Release_Changelog/#v21022-2021-02-16","title":"v21.02.2 (2021-02-16)","text":"<p>All kernels received upstream updates</p> <ul> <li>AR-633 -         Enable  hardware PRNG/TRNG/SHA on sun8i-ce platform</li> </ul> <ul> <li>AR-636 -         Odroid N2+ lost additional freq values</li> </ul>"},{"location":"Release_Changelog/#v21021-2021-02-03","title":"v21.02.1 (2021-02-03)","text":"<p>Finished projects</p> <ul> <li>AR-235 -         Implement Device Tree Editor</li> </ul> <ul> <li>AR-476 -         Add sound to Odroid N2</li> </ul> <ul> <li>AR-485 -         Improve multicore compilation</li> </ul> <ul> <li>AR-487 -         Rework download pages</li> </ul> <ul> <li>AR-508 -         Add Odroid HC4</li> </ul> <ul> <li>AR-546 -         Added Pine64 Pinecube</li> </ul> <ul> <li>AR-566 -         Add Nanopi R4S</li> </ul> <ul> <li>AR-568 -         Add Orangepizero 2 WIP target</li> </ul> <ul> <li>AR-571 -         Move Meson64 DEV to 5.10.y</li> </ul> <ul> <li>AR-589 -         Add ZShell via armbian-zsh package</li> </ul> <ul> <li>AR-590 -         ZRAM Enhancements - decouple swap config from tmp</li> </ul> <p>Solved bugs</p> <ul> <li>AR-365 -         4k not detected properly on Amlogic, Rockchip devices</li> </ul> <ul> <li>AR-440 -         Errors shown at 1st login under certain conditions</li> </ul> <ul> <li>AR-512 -         Fix Ethernet for Opi3 and other devices with phymode for kernel 5.10</li> </ul> <ul> <li>AR-514 -         Download and verify not fully reliable</li> </ul> <ul> <li>AR-547 -         First login: adding a non-existing keyboard variant</li> </ul> <ul> <li>AR-548 -         mvebu DFS seems to cause system hang under high I/O</li> </ul> <ul> <li>AR-557 -         GCC compatibility issues</li> </ul> <ul> <li>AR-559 -         First login script - not all locales have UTF8 encoding</li> </ul> <ul> <li>AR-565 -         SATA on HC4 is not recognized</li> </ul> <ul> <li>AR-570 -         Improper order in getty override.conf</li> </ul> <ul> <li>AR-584 -         Nanopi M4V2 hangs on bluetooth loading</li> </ul> <ul> <li>AR-595 -         Rockpi 4B 1GB not booting</li> </ul> <ul> <li>AR-605 -         Booting troubles on Odroid C4 / HC4</li> </ul> <ul> <li>AR-606 -         Force boot script update throws out some error</li> </ul> <ul> <li>AR-608 -         Broken building out-of-tree modules</li> </ul> <ul> <li>AR-610 -         Nanopi Neo2 black sometimes nic doesn't init</li> </ul> <ul> <li>AR-615 -         Helios64 unstable 2.5Gbps Interface on LK5.x</li> </ul> <ul> <li>AR-616 -         Ubuntu Bionic ZSH / BASH changing issue</li> </ul> <ul> <li>AR-617 -         Locales detection doesn't work properly in some cases</li> </ul> <ul> <li>AR-627 -         Ubuntu update is overwriting our welcome screen</li> </ul> <ul> <li>AR-629 -         Odroid HC4 SATA failure</li> </ul> <ul> <li>AR-631 -         Orangepi Zero2 broken network</li> </ul> <ul> <li>AR-632 -         Desktop fails to load at second run</li> </ul> <p>Closed task</p> <ul> <li>AR-163 -         Systematically cleanup distribution defaults</li> </ul> <ul> <li>AR-206 -         Improve memory performance on Renegade (roc-rk3328-cc) in current</li> </ul> <ul> <li>AR-399 -         Improve Pinebook PRO support</li> </ul> <ul> <li>AR-467 -         Enable AUFS support back</li> </ul> <ul> <li>AR-472 -         Added support for Ubuntu 20.10 Groovy</li> </ul> <ul> <li>AR-517 -         Mark Bionic builds host as deprecated</li> </ul> <ul> <li>AR-520 -         Move Rock64 to CSC in build script</li> </ul> <ul> <li>AR-525 -         Bump Rockchip 32bit to 5.9.y</li> </ul> <ul> <li>AR-526 -         Move mvebu-dev kernel to 5.9+</li> </ul> <ul> <li>AR-551 -         Update fan configuration, enable network LED and enable UPS timer</li> </ul> <ul> <li>AR-552 -         Re-enable UHS SDR104 mode for Helios64 and roc-rk3399-pc</li> </ul> <ul> <li>AR-553 -         Update builder to retrieve web seeds from mirrors api</li> </ul> <ul> <li>AR-554 -         OdroidN2 Ethernet Failure Pt2</li> </ul> <ul> <li>AR-556 -         Adding vnstat and ZFS support to MOTD</li> </ul> <ul> <li>AR-558 -         Switch mvebu current to K5.9</li> </ul> <ul> <li>AR-563 -         Improve headers compilation</li> </ul> <ul> <li>AR-576 -         Enabled debug on RockpiS</li> </ul> <ul> <li>AR-579 -         Improve (oh-my)ZSH loading speed</li> </ul> <ul> <li>AR-587 -         Fix kernel switching for rk3399 family</li> </ul> <ul> <li>AR-594 -         Upgrade Meson64 u-boot to 2020.10</li> </ul> <ul> <li>AR-598 -         Switch rockchip64 u-boot to 2020.10</li> </ul> <ul> <li>AR-601 -         Move sunxi-current to 5.10.y</li> </ul> <ul> <li>AR-603 -         Enable SPI boot option for roc-rk3399-pc</li> </ul> <ul> <li>AR-607 -         Move Meson64 Current to 5.10.y</li> </ul> <ul> <li>AR-609 -         Move Mvebu Current to 5.10.y</li> </ul> <ul> <li>AR-611 -         Switch rockchip64-current to 5.10.y</li> </ul> <ul> <li>AR-614 -         Upgrade ZFS packages</li> </ul> <ul> <li>AR-618 -         Upgrade mvebu64 current to 5.10.y</li> </ul> <ul> <li>AR-619 -         Bump rockchip current to 5.10.y</li> </ul> <ul> <li>AR-620 -         Enable network link leds for NanoPi R4S by default</li> </ul> <ul> <li>AR-622 -         Enable DMC for Station-M1 in current and dev</li> </ul> <ul> <li>AR-623 -         Enable RTC (hym8563) for Station P1 in dev and current</li> </ul> <ul> <li>AR-624 -         Provide an option to skip autodetection at first login</li> </ul> <ul> <li>AR-628 -         Bump Meson64 u-boot to 2021.01</li> </ul> <ul> <li>AR-630 -         Bump Odroid XU4 DEV to 5.10.y</li> </ul>"},{"location":"Release_Changelog/#v201110-2021-01-25","title":"v20.11.10 (2021-01-25)","text":"<p>All images rebuild due to torrent system corruption</p>"},{"location":"Release_Changelog/#v20119-2021-01-23","title":"v20.11.9 (2021-01-23)","text":"<p>Broken Nanopi Neo buster image rebuild, adding Station M1 and P1 legacy images, Odroid XU4 update</p>"},{"location":"Release_Changelog/#v20118-2021-01-17","title":"v20.11.8 (2021-01-17)","text":"<ul> <li>AR-614 -         Upgrade ZFS on Focal and Buster (64bit only) to v2.0.1</li> </ul>"},{"location":"Release_Changelog/#v20117-2021-01-06","title":"v20.11.7 (2021-01-06)","text":"<ul> <li>AR-605 -         Booting troubles on Odroid C4 / HC4</li> </ul> <p>all images were rebuilt - we had a few corrupted ones in previous build</p>"},{"location":"Release_Changelog/#v20116-2021-01-03","title":"v20.11.6 (2021-01-03)","text":"<ul> <li>AR-601 -         Move sunxi-current to 5.10.y</li> </ul> <ul> <li>AR-235 -         Implement Device Tree Editor in armbian-config</li> </ul> <ul> <li>AR-589 -         Add armbian-zsh package</li> </ul> <ul> <li>AR-590 -         ZRAM Enhancements - decouple swap config from tmp</li> </ul> <ul> <li>AR-554 -         Fix Odroid N2 Ethernet Failure</li> </ul> <ul> <li>AR-556 -         Adding vnstat and ZFS support to MOTD</li> </ul> <ul> <li>AR-579 -         Improve (oh-my)ZSH loading speed</li> </ul> <ul> <li>AR-512 -         Fix Ethernet for Opi3 and other devices with phymode for kernel 5.10</li> </ul> <ul> <li>AR-547 -         First login: adding a non-existing keyboard variant</li> </ul> <ul> <li>AR-565 -         Fix SATA on HC4 is not recognized</li> </ul> <ul> <li>AR-595 -         Fix Rockpi 4B 1GB not booting</li> </ul>"},{"location":"Release_Changelog/#v20115-2020-12-31","title":"v20.11.5 (2020-12-31)","text":"<p>AR-566 - Add Nanopi R4S preview images</p>"},{"location":"Release_Changelog/#v20114-2020-12-15","title":"v20.11.4 (2020-12-15)","text":"<ul> <li>Re-adding accidentally removed network driver on Helios64 added OpenHab 3 to the armbian-config software installer</li> </ul> <ul> <li>AR-587 - Fix kernel switching for rk3399 family</li> </ul>"},{"location":"Release_Changelog/#v20113-2020-12-12","title":"v20.11.3 (2020-12-12)","text":"<p>Bugfix release</p> <ul> <li>AR-559 - First login script - not all locales have UTF8 encoding</li> <li>AR-163 - Systematically cleanup distribution defaults</li> <li>AR-206 - Improve memory performance on Renegade (roc-rk3328-cc) in current</li> <li>AR-472 - Added support for Ubuntu 20.10 Groovy</li> <li>AR-476 - Add sound to Odroid N2</li> <li>AR-485 - Improve multicore compilation</li> <li>AR-487 - Rework download pages</li> <li>AR-508 - Add Odroid HC4</li> <li>AR-514 - Download and verify not fully reliable</li> <li>AR-517 - Mark Bionic builds host as deprecated</li> <li>AR-525 - Bump Rockchip 32bit to 5.9.y</li> <li>AR-526 - Move mvebu-dev kernel to 5.9+</li> <li>AR-546 - Added Pine64 Pinecube</li> <li>AR-547 - First login: adding a non-existing keyboard variant</li> <li>AR-548 - mvebu DFS seems to cause system hang under high I/O</li> <li>AR-551 - Update fan configuration, enable network LED and enable UPS timer</li> <li>AR-552 - Re-enable UHS SDR104 mode for Helios64 and roc-rk3399-pc</li> <li>AR-553 - Update builder to retrieve web seeds from mirrors api</li> <li>AR-556 - Adding vnstat and ZFS support to MOTD</li> <li>AR-557 - GCC compatibility issues</li> <li>AR-558 - Switch mvebu current to K5.9</li> <li>AR-563 - Improve headers compilation</li> <li>AR-565 - SATA on HC4 is not recognized</li> <li>AR-568 - Add Orangepizero 2 WIP target</li> <li>AR-570 - Improper order in getty override.conf</li> <li>AR-571 - Move Meson64 DEV to 5.10.y</li> </ul>"},{"location":"Release_Changelog/#v20111-2020-12-04","title":"v20.11.1 (2020-12-04)","text":"<ul> <li>AR-551 - Update fan configuration, enable network LED and enable UPS timer</li> <li>AR-565 - SATA on HC4 is not recognized Updated Odroid C4/HC4, Helios64, Rockpi 4* images and rockchip64 kernels</li> </ul>"},{"location":"Release_Changelog/#v2011-2020-11-24","title":"v20.11 (2020-11-24)","text":"<p>Finished projects</p> <ul> <li>AR-2 - Improving download infrastructure Phase 1</li> <li>AR-151 - Integrate JMCCs Multimedia script</li> <li>AR-230 - Decide what to do with TVboxes</li> <li>AR-412 - Update Odroid XU4 kernels</li> <li>AR-424 - Improve HTOP config</li> <li>AR-456 - Upgrading Allwinner u-boot to 2020.10</li> <li>AR-476 - Add sound to Odroid N2</li> <li>AR-485 - Improve multicore compilation</li> <li>AR-508 - Add Odroid HC4</li> <li>AR-509 - Upgrade meson64 to 5.9.y</li> <li>AR-510 - Move meson (Odroid C1) to 5.9.y</li> <li>AR-532 - Move Odroid C4 from legacy u-boot toward mainline</li> </ul> <p>Solved bugs</p> <ul> <li>AR-314 - Links to SHA files at download pages are wrong</li> <li>AR-372 - Meson64 Reboot failure kernel 5.7</li> <li>AR-373 - Rock64 no HDMI (must be unplugged)</li> <li>AR-382 - Fix zram creation on bigger memory devices</li> <li>AR-391 - Warning a reboot is needed doesn\u2019t go away after reboot</li> <li>AR-407 - Bug in first login script</li> <li>AR-417 - HTOP in Bullseye needs higher package version</li> <li>AR-420 - GPIO SPI patch is failing on Rockchip64</li> <li>AR-422 - Improper version showing at upgrade</li> <li>AR-425 - Resize is finished but message doesn\u2019t disappear</li> <li>AR-428 - Firefox initial config has different location then ESR variant</li> <li>AR-436 - Rockpi S reports some error in postinst scripts</li> <li>AR-437 - MOTD cosmetic issue</li> <li>AR-439 - Automated rebuilds set image status to USER_BUILT</li> <li>AR-441 - Odroid C4 legacy bootscript problem</li> <li>AR-452 - Fix first boot locales selection and add desktop lang switching</li> <li>AR-459 - Missing package libreoffice-style-tango from Bullseye desktop</li> <li>AR-471 - Mitigate Git server failures</li> <li>AR-482 - Htop doesn\u2019t show CPU speed to normal user but shows properly to root</li> <li>AR-484 - Odroid C4 refuse to boot</li> <li>AR-491 - LEDs on Helios4 not working</li> <li>AR-493 - Patches are not creating</li> <li>AR-494 - Fix armbian-hardware-opitimization not being run</li> <li>AR-505 - armbian-hardware-optimization: eth0 tweak applied before it is appear on /proc/interrupts</li> <li>AR-527 - Rockchip 32bit sources were removed</li> <li>AR-528 - Improve creating images from repository</li> <li>AR-529 - Z28 PRO device tree doesn\u2019t exists in mainline</li> </ul> <p>Closed tasks</p> <ul> <li>AR-284 - Discuss if there is a cleaner way to install Chromium</li> <li>AR-350 - Switch rock64 to mainline u-boot</li> <li>AR-351 - Switch rockpro64 to mainline u-boot</li> <li>AR-363 - Switch mvebu current to K5.8.y</li> <li>AR-380 - Revisit RTL8812AU driver</li> <li>AR-387 - Switch from rk3399-bluetooth service to btbcm for loading firmware/patchram in dev/current</li> <li>AR-388 - XU4 - Introduce new Mem freq scaling patch and re-enable</li> <li>AR-390 - Add Radxa Rockpi 4C</li> <li>AR-400 - Enable overlays in rockchip64-legacy</li> <li>AR-401 - Enable creation of SPI flash u-boot image for ROCK Pi 4</li> <li>AR-403 - Enable overlays in rk3399-legacy</li> <li>AR-404 - Switch renegade to mainline u-boot</li> <li>AR-409 - Move imx6 current kernels to 5.8.y</li> <li>AR-413 - Improve reliability of Helios64\u2019s eMMC module</li> <li>AR-415 - Improve reboot reliability for Helios64</li> <li>AR-416 - Move Rockchip 32bit to 5.8.y</li> <li>AR-419 - Add dedicated DT for Nanopi Neo3</li> <li>AR-445 - systemd-journal not rotated with armbian-ramlog</li> <li>AR-458 - Update board support statuses</li> <li>AR-461 - Add Armbian to Neofetch</li> <li>AR-462 - Adapt helios64 device tree name to match upstream Linux</li> <li>AR-464 - Move Libre Computer Renegade to mainline u-boot</li> <li>AR-472 - Added support for Ubuntu 20.10 Groovy</li> <li>AR-473 - Add interactive option to use precompiled packages from Armbian repository</li> <li>AR-477 - Advanced recovery options for rockchip64 boards</li> <li>AR-483 - Fix analog (3.5 jack) audio on ROCK Pi 4C</li> <li>AR-490 - Enable RTC on Odroid N2</li> <li>AR-495 - Allow building images with kernels 5.8.17+ and 5.9.2+</li> <li>AR-499 - Enable Watchdog for G12/Odroidn2</li> <li>AR-504 - Helios64: Switch fusb302 driver to mainline and enable DP over TypeC</li> <li>AR-511 - Switch rockchip64-current to linux 5.9.y</li> <li>AR-513 - Move Odroid XU4 kernels up</li> <li>AR-515 - Upgrade imx6 to 5.9.y</li> <li>AR-521 - Exchange mv with rsync</li> <li>AR-522 - Allow setting MTU for Rockchip64\u2019s dwmac interface</li> <li>AR-523 - enable CONFIG_TARGET_CORE for iSCSI target support</li> <li>AR-524 - Upgrade rockpis legacy kernel</li> <li>AR-531 - Check why disabling one update-initramfs breaks Ubuntu initrd making on update</li> </ul>"},{"location":"Release_Changelog/#v200822-2020-11-8","title":"v20.08.22 (2020-11-8)","text":"<p>Added WIP images for Odroid HC4 Updated images for Odroid C4, N2, C2, Lafrite, Lepotato, KVIM1</p>"},{"location":"Release_Changelog/#v200813-2020-10-19","title":"v20.08.13 (2020-10-19)","text":"<ul> <li>AR-363 - Switch mvebu current to K5.8.y</li> <li>AR-466 - Enable Recovery button on Helios64</li> <li>AR-416 - Move Rockchip 32bit to 5.8.y</li> <li>AR-476 - Add sound to Odroid N2 update all kernels Rebuild images for Helios4, Helios64 and Odroid N2</li> </ul>"},{"location":"Release_Changelog/#v200811-2020-10-16","title":"v20.08.11 (2020-10-16)","text":"<ul> <li>AR-465 - Helios64 cannot boot from eMMC enable Ubuntu 20.10 Groovy as a CSC build option (need build parameter EXPERT=\u201dyes\u201d) update u-boot loader to 2020.10 on Allwinner platform update all kernels update images for Helios 64 add option to build images from prebuild packages from repository which drastically improves build time in case you don\u2019t need to rebuild kernel</li> </ul>"},{"location":"Release_Changelog/#v20088-2020-10-05","title":"v20.08.8 (2020-10-05)","text":"<ul> <li>AR-463 - Improve Helios64 Stability, updated images Adapt Helios64 devicetree name to match upstream Linux</li> </ul>"},{"location":"Release_Changelog/#v20084-2020-09-23","title":"v20.08.4 (2020-09-23)","text":"<ul> <li>AR-399 - Improve Pinebook PRO support, updated images Updated Helios64 images</li> </ul>"},{"location":"Release_Changelog/#v20083-2020-09-21","title":"v20.08.3 (2020-09-21)","text":"<ul> <li>updated mainline kernel based images to Linux 5.8.10</li> <li>all other kernels updated to respective latest version</li> <li>improved htop with showing network status dynamically, GPU temp, improved CPU speed display</li> <li>fixed usbip for sharing usb over network</li> <li>fixed Odroid C4 boot script bug; adding normal and higher CPU speeds</li> <li>added many improvements for Helios64</li> <li>enabled GPU temperatures in htop for XU4, meson64 (Odroid N2/N2+) and rockchip64/32</li> <li>fixed initial configuration for Firefox</li> <li>fixed tx offloading for Rockchip64 NIC\u2019s</li> <li>move rockchip 32bit to 5.8.y (Tinkerboard / MiQi)</li> <li>improved RK3399 stability by mingling OPP</li> <li>fixed a bunch of bugs related to encrypted root filesystem</li> <li>enabled hardware watchdog support for mvebu64 / Espressobin</li> <li>cosmetic fixes to motd</li> <li>enabling I2S and spdif on Nanopi Neo3 by default</li> <li>fixes wrong memory calculation on ZRAM display</li> <li>fixing firstlogin bug preventing running xrdp</li> <li>move Espressobin kernel to 5.8.y</li> <li>adjust / fix Kali Linux wifi injections patches</li> </ul> <p>Known bugs:</p> <ul> <li>Some Rockpro64 boards have troubles with upgrade</li> <li>Bananapi M3 eMMC can\u2019t boot from eMMC (solution is available)</li> <li>H6 stability issues on some boards</li> <li>RockpiS shows some error on upgrade but upgrade suceeds</li> <li>4K and audio on mainline based meson64 boards</li> </ul>"},{"location":"Release_Changelog/#v2008-2020-08-20","title":"v20.08 (2020-08-20)","text":"<p>Finished projects</p> <ul> <li>AR-45 - Make first login more user friendly</li> <li>AR-71 - Create a document: How we will use Jira</li> <li>AR-182 - Unify / merge kernel configs</li> <li>AR-201 - Introduce CI autotest facility</li> <li>AR-227 - Move Espressobin current to K5.6</li> <li>AR-313 - Ability to work in offline mode</li> <li>AR-320 - Initial support for Rockpi E</li> <li>AR-324 - Add Rockchip RK322X SoC support</li> <li>AR-328 - Meson64 move current to 5.7.y</li> <li>AR-329 - Switch sunxi dev target to kernel 5.7</li> <li>AR-331 - Enable kernel boot splash as an option</li> <li>AR-335 - Improve patch making</li> <li>AR-392 - Add Odroid N2+</li> <li>AR-402 - Add Helios64</li> </ul> <p>Solved bugs</p> <ul> <li>AR-282 - Rockpi 4B 1Gb doesn\u2019t boot modern kernel / u-boot</li> <li>AR-295 - Odroid C2: no more USB devices after upgrade</li> <li>AR-298 - Missing default SElinux policy</li> <li>AR-303 - Create a download page for BPI M2 zero</li> <li>AR-305 - K-worker creates load on Allwinner devices</li> <li>AR-319 - Armbian config failed to switch kernels</li> <li>AR-330 - Shell check bugs</li> <li>AR-332 - When making all kernels - building sometimes fails</li> <li>AR-337 - Odroid XU4 Memcopy Slow on all Kernel 5.x 80MB/sec instead of 370+MB/sec</li> <li>AR-338 - Bananapi R2 does not boot at all</li> <li>AR-340 - Fix WiFi on Nanopi M4V2</li> <li>AR-348 - Confirm RK3399 TcpOffloading bug</li> <li>AR-352 - Fix Random MAC on H3 boards</li> <li>AR-354 - Support User Provided EDID Firmware</li> <li>AR-355 - backport Linux v5.8 fbtft/fb_st7789v invert colors, proper gamma</li> <li>AR-356 - Building multiple u-boot targets breaks</li> <li>AR-371 - CPU frequency scaling broken on H6</li> <li>AR-378 - Increase address room for initial ramdisk</li> <li>AR-381 - selinux-policy-default missing on Debian Bullseye</li> <li>AR-393 - Ask for setting locale at first run</li> </ul> <p>Closed tasks</p> <ul> <li>AR-28 - Added new GCC compilers</li> <li>AR-225 - Introduce PACKAGE_LIST for BOARD and FAMILY</li> <li>AR-300 - Enable HDMI audio for OrangePi 4</li> <li>AR-317 - Move Odroid XU4 dev to mainline + patches</li> <li>AR-318 - Upgrade Odroid XU4 legacy kernel</li> <li>AR-321 - Upgrade Meson (C1) current to 5.7.y</li> <li>AR-323 - Allow install to SD NAND for Rockpi S</li> <li>AR-326 - Make USB3 support of ROCK Pi E on par with other rk3328 boards</li> <li>AR-327 - Bump imx6 current kernel to 5.7.y</li> <li>AR-333 - Update Odroid XU4 kernels</li> <li>AR-334 - Cleanup boot environment files</li> <li>AR-336 - Add support for cheap 2.5GB USB network dongles</li> <li>AR-341 - Follow-up N2 CPU Affinity</li> <li>AR-349 - Update mainline u-boot to v2020.07 for rockchip64 and rk3399</li> <li>AR-357 - IRQ affinity improvements for G12B</li> <li>AR-358 - Added initial support for Neo 3</li> <li>AR-361 - Update Odroid XU4 boot.ini</li> <li>AR-362 - HDMI sound support for Allwinner A10, A20, A31</li> <li>AR-364 - Change sunxi legacy to 5.4.y, current to 5.7.y</li> <li>AR-366 - Move rockchip/64 current to 5.7.y</li> <li>AR-383 - Upgrades for Tapatalk plugin</li> <li>AR-389 - Add PACKAGE_LIST_BOARD_REMOVE option</li> </ul>"},{"location":"Release_Changelog/#v20057-2020-07-02","title":"v20.05.7 (2020-07-02)","text":"<ul> <li>AR-308 - Disable HDMI in u-boot for rk3399 boards</li> <li>AR-338 - Bananapi R2 does not boot at all</li> <li>AR-337 - Odroid XU4 Memcopy Slow on all Kernel 5.x 80MB/sec instead of 370+MB/sec Update images for: NanoPC T4, Nanopi M4,Nanopi M4v2, Nanopi Neo4, Orangepi 4, Firefly RK3399, Bananapi R2, Odroid XU4</li> </ul>"},{"location":"Release_Changelog/#v20056-2020-06-19","title":"v20.05.6 (2020-06-19)","text":"<ul> <li>AR-324 - Add Rockchip RK322X SoC support</li> <li>AR-320 - Initial support for Rockpi E</li> <li>AR-323 - Allow install to SD NAND for Rockpi S</li> </ul>"},{"location":"Release_Changelog/#v20055","title":"v20.05.5","text":"<p>never released/skipped</p>"},{"location":"Release_Changelog/#v20054-2020-06-16","title":"v20.05.4 (2020-06-16)","text":"<ul> <li>AR-311 - Initrd on Focal can get corrupted followup fix</li> </ul>"},{"location":"Release_Changelog/#v20053-2020-06-10","title":"v20.05.3 (2020-06-10)","text":"<ul> <li>AR-300 - Enable HDMI audio for OrangePi 4</li> <li>AR-305 - K-worker creates load on Allwinner devices</li> <li>AR-282 - Rockpi 4B 1Gb doesn't boot modern kernel / u-boot</li> </ul>"},{"location":"Release_Changelog/#v20052-2020-06-05","title":"v20.05.2 (2020-06-05)","text":"<ul> <li>AR-294 - Initrd on Focal can get corrupted</li> </ul>"},{"location":"Release_Changelog/#v20051-2020-05-31","title":"v20.05.1 (2020-05-31)","text":"<p>Kagu</p> <p>Finished projects</p> <ul> <li>AR-108 - Upgrade remaining kernels to 5.4.y</li> <li>AR-158 - Update 3rd party wireless drivers</li> <li>AR-159 - Switch fake-hwclock to hardware RTC on mvebu family</li> <li>AR-168 - Add NanoPi R2S board support</li> <li>AR-180 - Update Wireguard drivers on kernels below 5.4.y</li> <li>AR-184 - Improve slow booting on Rockchip RK3399 devices</li> <li>AR-185 - Change download images compression format</li> <li>AR-190 - Update wireless driver for RTL88x2BU</li> <li>AR-196 - Upgrade u-boot to 2020.04 where possible</li> <li>AR-201 - Introduce CI autotest facility</li> <li>AR-207 - Merge rockpis-dev into rockchip64</li> <li>AR-208 - Consolidate u-boot variants for mvebu family</li> <li>AR-210 - Add support for more HDMI resolutions on Rockchip RK3288 devices</li> <li>AR-215 - Move meson64 dev branch to 5.6.y</li> <li>AR-221 - Upgrade imx6 current to 5.6.y</li> <li>AR-222 - Port Docker image building to Ubuntu 20.04</li> <li>AR-226 - Add Hardkernel Odroid C4 mainline u-boot / kernel</li> <li>AR-236 - Attach Meson64 CURRENT to 5.6.y</li> <li>AR-238 - Updating hostapd, PSD and theme package in repository</li> <li>AR-247 - Revitalise Udoo board</li> <li>AR-250 - Improve usage of external patches</li> <li>AR-253 - Add prerm script for headers</li> <li>AR-254 - Add Banana Pi M2 Zero</li> <li>AR-257 - Bring Odroid C1 back from the EOL with latest upstream kernel</li> <li>AR-260 - Add Nanopi A64 board support</li> <li>AR-261 - Add Rockpi S mainline board support</li> <li>AR-262 - Move Allwinner development branch to 5.6.y</li> <li>AR-278 - Add snap free Chromium to Ubuntu Focal</li> <li>AR-279 - Add Hardkernel Odroid C4 stock kernel</li> </ul> <p>Solved bugs</p> <ul> <li>AR-109 - Upgrade is not done properly on some boards</li> <li>AR-165 - Instability with Rock64 and Rock PRO</li> <li>AR-177 - No serial gadget console on Nanopi Neo2 black</li> <li>AR-181 - Odroid N2 crashes during USB rsync backups</li> <li>AR-198 - Olimex Lime 2 doesn\u2019t boot from eMMC</li> <li>AR-204 - CPUfreq defaults missing on update</li> <li>AR-205 - No sound output with OrangePi 4 in dev and current</li> <li>AR-211 - Chrony fails to start on Ubuntu Focal</li> <li>AR-212 - Random MAC on Nanopi R2S</li> <li>AR-220 - Disable 3D support in Bionic due to broken mesa packages</li> <li>AR-231 - Unstable stmmac network driver on Meson64</li> <li>AR-237 - Desktop install on Ubuntu Focal installs Gnome3 desktop</li> <li>AR-239 - Chrony fails to start on Focal</li> <li>AR-240 - Broken VFAT kernel upgrade</li> <li>AR-244 - Thermal throttling on H5 doesn\u2019t work properly</li> <li>AR-245 - Hostapd doesn\u2019t go up</li> <li>AR-248 - Odroid C4 CPU speed is limited to 1.5Ghz</li> <li>AR-249 - Problems with CI testings</li> <li>AR-251 - Fix kernel 5.7.y packages patch</li> <li>AR-255 - Fix Debian mirrors URL</li> <li>AR-263 - Fix audio on Renegade</li> <li>AR-269 - Add correct CPU regulator configuration for the NanoPI R1</li> <li>AR-274 - Add missing iozone3 package to the minimal image</li> <li>AR-277 - Distinguish nightly and stable images at the download pages</li> <li>AR-286 - Armbian-resize-filesystem fails on first run due to missing fdisk in Bullseye</li> <li>AR-287 - Make sure cryptsetup-initramfs is installed in any case</li> </ul> <p>Closed tasks</p> <ul> <li>AR-150 - Disable Stretch image creation for Helios4 and Clearfog</li> <li>AR-157 - Add Ubuntu Focal 20.04 as a supported build host</li> <li>AR-186 - Blacklist 3D engine on headless images</li> <li>AR-189 - Move wireless driver for 8189ES from patch to git</li> <li>AR-195 - Adding Ubuntu 20.04 to all builds</li> <li>AR-209 - Disable CONFIG_VIDEO_DE2 in u-boot for Allwinner devices</li> <li>AR-213 - Make manual for .xz images and check their authentication</li> <li>AR-228 - Enable audio and USB on Nanopi A64</li> <li>AR-229 - Bump with AUFS for DEV kernels</li> <li>AR-232 - Switch Odroid XU4 DEV branch to Libreelec branch</li> <li>AR-234 - Disable ZSH update prompt on every two weeks</li> <li>AR-242 - Enable SELinux</li> <li>AR-252 - Improve source code cleaning</li> <li>AR-258 - Enables PCIE PHY with Mezzanine NVME</li> <li>AR-259 - Add mp8859 regulator to current for RK3399-ROC-PC</li> <li>AR-264 - Enable RTL8723DS WiFI driver</li> <li>AR-265 - Remove Xenial from supported host OS</li> <li>AR-266 - Fix dependency for native building on Linux Mint and Debian Buster</li> <li>AR-267 - Enable Cedrus video acceleration on Allwinner kernels</li> <li>AR-268 - Add higher clock for Allwinner H6</li> <li>AR-270 - Add support for alternate console UARTs in Allwinner H3 u-boot</li> <li>AR-271 - Lower DDR clock rate to 504MHz for H5 boards</li> <li>AR-280 - Update CONF, CSC and WIP statuses according to support level</li> <li>AR-285 - Improve thermal throttling on Allwinner H6</li> <li>AR-288 - Add vendor name to the board config files</li> </ul>"},{"location":"Release_Changelog/#v200212-2020-04-27","title":"v20.02.12 (2020-04-27)","text":"<ul> <li>Added preview images for Odroid C4</li> </ul>"},{"location":"Release_Changelog/#v20028-2020-03-26","title":"v20.02.8 (2020-03-26)","text":"<ul> <li>update kernels with upstream versions, synchronise and test kernel sources download</li> </ul>"},{"location":"Release_Changelog/#v20027-2020-03-26","title":"v20.02.7 (2020-03-26)","text":"<ul> <li>Updated images for Rockpi S, Odroid XU4 and FriendlyARM Nanopc T3, T3+, M3, Fire3</li> </ul>"},{"location":"Release_Changelog/#v20026-2020-03-23","title":"v20.02.6 (2020-03-23)","text":"<ul> <li>Updated images for Rockpi S and Orangepi 4</li> <li>Updated armbian-config (fixed OMV installer)</li> </ul>"},{"location":"Release_Changelog/#v20025-2020-03-19","title":"v20.02.5 (2020-03-19)","text":"<ul> <li>Updated images for Orangepi 4, Bananapi and Rockpi S</li> </ul>"},{"location":"Release_Changelog/#v20024-2020-03-18","title":"v20.02.4 (2020-03-18)","text":"<ul> <li>Added images for Nanopi R2S and Bananapi M2 Zero</li> <li>Kernel update for Odroud XU4</li> </ul>"},{"location":"Release_Changelog/#v20023-2020-02-21","title":"v20.02.3 (2020-02-21)","text":"<ul> <li>Updating images for Le potato, Khadas Vim1,La Frite, Nanopik2 S905, Odroid N2/C2 - fixing audio</li> <li>Updating images for Orangepi 4 - boot loader problem</li> </ul>"},{"location":"Release_Changelog/#v20022-2020-02-18","title":"v20.02.2 (2020-02-18)","text":"<p>Chiru</p> <p>Tasks</p> <ul> <li>AR-46 - Support for single function run</li> <li>AR-47 - Adding Docker shell support</li> <li>AR-49 - Move sunxi kernel to 5.4.y</li> <li>AR-79 - Check and adjust AUFS patch for 5.4.y</li> <li>AR-80 - Move imx6 to 5.4.y</li> <li>AR-81 - Enable Meson64 DEV at 5.4.y</li> <li>AR-82 - Move Mvebu64 / Espressobin dev kernel to 5.4.y</li> <li>AR-84 - Move rockchip64 current to 5.4.y</li> <li>AR-85 - Adjusted Sunvell R69</li> <li>AR-90 - Add support for Nanopi M4 v2</li> <li>AR-92 - Enable stable MAC address from cpuid on rk3399</li> <li>AR-96 - Update Xradio wireless driver</li> <li>AR-97 - Tag supported builds properly at download pages</li> <li>AR-98 - Enable missing Kuberenetes kernel dependency</li> <li>AR-100 - Add Debian Bullseye and Ubuntu Focal</li> <li>AR-112 - Enabled internal WLAN on RockPi S</li> <li>AR-113 - Install wireguard tools only when selected</li> <li>AR-114 - Enable audio codec on Orangepi Win</li> <li>AR-115 - Add drivers for Realtek RTL8811CU and RTL8821C chipsets</li> <li>AR-116 - Remove annoying debug message filling logs on 8189es</li> <li>AR-117 - Add Pine H64 model B</li> <li>AR-124 - Enable wireless on Rockpi-S</li> <li>AR-127 - Refactoring wifi patches</li> <li>AR-128 - Adding WIP support for Pinebook PRO</li> <li>AR-129 - Move NanopiM4 V2 and Pine H64 under supported</li> <li>AR-134 - Update AUFS version on Odroid XU4 and Nanopi Fire3/T3/T3+</li> <li>AR-138 - Update RK3399 legacy kernel (Nanopi M4, T4, Neo4) to latest upstream version</li> <li>AR-139 - Nanpi R1 - move primary serial console to ttyS1 which is on the chassis</li> <li>AR-143 - Create OpenHab installation instructions for their official documentation</li> <li>AR-146 - Update rockchip-legacy to most recent upstream kernel version</li> <li>AR-147 - Enable analogue audio on Allwinner H6</li> <li>AR-148 - [ mvebu-current ] Fix cpufreq (dynamic frequency scaling)</li> <li>AR-149 - [ mvebu-current ] Fix pcie issues</li> <li>AR-153 - Enable USB3 for Rock64/Renegade with RK3328 on mainline kernel</li> <li>AR-154 - Add analogue audio driver to Allwinner H6</li> <li>AR-155 - Enable Cedrus video acceleration support on Allwinner boards</li> <li>AR-167 - Add upstream patches for Odroid XU4</li> <li>AR-172 - USB3 Support for Rockchip</li> </ul> <p>Bugs</p> <ul> <li>AR-74 - User patches directories not created</li> <li>AR-76 - Rockchip64 missing CPU_MIN variable</li> <li>AR-77 - Wrong board name variable for Orangepi RK 3399</li> <li>AR-83 - Packaging patch broken for kernel 5.4.y</li> <li>AR-86 - CPU freq scaling for H6 doesn't work in K5.4</li> <li>AR-88 - Banana Pi M3 does not boot</li> <li>AR-89 - Tinkerboard S doesn't start from eMMC</li> <li>AR-91 - Broken Allwinner overlays</li> <li>AR-94 - Espressobin v7 with 2gb of ram fail to boot</li> <li>AR-102 - Missing packaging patch for Rockpis legacy kernel</li> <li>AR-103 - PPA way of adding sources are failing on Ubuntu</li> <li>AR-104 - 32bit rust compiler doesn't run new kernels</li> <li>AR-105 - Orangepi Zero Plus 2 doesn't boot</li> <li>AR-106 - Wireguard breaks building on 5.4.y</li> <li>AR-107 - Improve compiler and rootfs download process</li> <li>AR-110 - Missing Bionic image for Nanopi Neo Plus2</li> <li>AR-111 - Some versions of Orangepi Win does not boot modern kernel</li> <li>AR-118 - NanoPi M4V2 ethernet partialy broken in one side</li> <li>AR-123 - OpenHAB2 installation is failing</li> <li>AR-125 - Wireless driver for 8188EUS breaks on K4.14</li> <li>AR-126 - Nanopi M3/Fire3/PC3 compilation breaks</li> <li>AR-130 - Instability with various A64 boards</li> <li>AR-131 - Add support for 3rd version of Pinebook A64 panel</li> <li>AR-133 - Odroid XU4 legacy kernel images instability</li> <li>AR-141 - Odroid XU4 current with kernel 5.4.y seems unstable</li> <li>AR-142 - Cryptsetup disk encryption build feature broken</li> <li>AR-144 - Tinkerboard break booting</li> <li>AR-145 - Missing HDMI audio on H3 boards</li> <li>AR-152 - Display issues with Bionic Mesa update</li> <li>AR-164 - Htop package does not build in qemu under Ubuntu Focal 20.04</li> <li>AR-166 - Rootfs cache number creates a window of 12h when users are forced to rebuild cache</li> <li>AR-170 - Wireless not connecting for SBCs</li> <li>AR-171 - Fix broken loading process on MiQi</li> <li>AR-173 - Fix makefile of kernel headers 4.4.210 for rk3399</li> <li>AR-174 - Teres Keyboard Not Working</li> </ul> <p>Stories</p> <ul> <li>AR-48 - Bump u-boot to 2020.01 on RK3399 boards</li> <li>AR-156 - WIP orangepi 4 preliminary support</li> </ul>"},{"location":"Release_Changelog/#v19113-2019-11-20","title":"v19.11.3 (2019-11-20)","text":"<p>Tasks</p> <ul> <li>AR-1 - Adding support category for distributions</li> <li>AR-4 - Remove Allwinner legacy</li> <li>AR-5 - Drop Udoo family and move Udoo board into newly created imx6 family</li> <li>AR-9 - Rename sunxi-next to sunxi-legacy</li> <li>AR-10 - Rename sunxi-dev to sunxi-current</li> <li>AR-11 - Adding Radxa Rockpi S support</li> <li>AR-13 - Rename rockchip64-default to rockchip64-legacy</li> <li>AR-14 - Add rockchip64-current as mainline source</li> <li>AR-15 - Drop Rockchip 4.19.y NEXT, current become 5.3.y</li> <li>AR-16 - Rename RK3399 default to legacy</li> <li>AR-17 - Rename Odroid XU4 next and default to legacy 4.14.y, add DEV 5.4.y</li> <li>AR-18 - Add Odroid N2 current mainline</li> <li>AR-19 - Move Odroid C1 to meson family</li> <li>AR-20 - Rename mvebu64-default to mvebu64-legacy</li> <li>AR-21 - Rename mvebu-default to mvebu-legacy</li> <li>AR-22 - Rename mvebu-next to mvebu-current</li> <li>AR-23 - Drop meson64 default and next, current becomes former DEV 5.3.y</li> <li>AR-24 - Drop cubox family and move Cubox/Hummingboard boards under imx6</li> <li>AR-26 - Adjust motd</li> <li>AR-27 - Enabling distribution release status</li> <li>AR-28 - Added new GCC compilers</li> <li>AR-29 - Implementing Ubuntu Eoan</li> <li>AR-30 - Add desktop packages per board or family</li> <li>AR-31 - Remove (Ubuntu/Debian) distribution name from image filename</li> <li>AR-32 - Move arch configs from configuration.sh to separate arm64 and armhf config files</li> <li>AR-33 - Revision numbers for beta builds changed to day_in_the_year</li> <li>AR-34 - Patches support linked patches</li> <li>AR-35 - Break meson64 family into gxbb and gxl</li> <li>AR-36 - Add Nanopineo2 Black</li> <li>AR-38 - Upgrade option from old branches to new one via armbian-config</li> <li>AR-41 - Show full timezone info</li> <li>AR-43 - Merge Odroid N2 to meson64</li> <li>AR-44 - Enable FORCE_BOOTSCRIPT_UPDATE for all builds</li> <li>AR-57 - New kernel feature requested CONFIG_BLK_DEV_DRBD</li> <li>AR-60 - Modified logrotate.service</li> <li>AR-63 - Docker maintenance features</li> </ul> <p>Bugs</p> <ul> <li>AR-25 - Armbian resize stopped working in Ubuntu 19.10 or higher</li> <li>AR-40 - When changing console layout it does not change</li> <li>AR-51 - Prevent configuring locale</li> <li>AR-52 - Broken desktop install</li> <li>AR-54 - Upstream package name changed</li> <li>AR-55 - Wireless driver remove patch for Odroid XU4 broke down</li> <li>AR-56 - Missing CPU regulator</li> <li>AR-58 - Troubles with wireless on Nanopi DUO &amp; Opi Zero</li> <li>AR-59 - Compressed files are getting back to /var/log</li> <li>AR-62 - No HDMI sound on various meson64 boards</li> <li>AR-64 - Docker require root</li> <li>AR-68 - Broken Ethernet on Pine64+</li> </ul> <p>Stories</p> <ul> <li>AR-61 - Adding support for LOCAL_MIRROR</li> <li>AR-65 - Moving configs under userpatches</li> <li>AR-66 - Enable build system torrent download by default</li> <li>AR-67 - Install Docker when we want to build under Docker</li> <li>AR-69 - Use kernel command line instead of a patch</li> <li>AR-70 - Enable Lima kernel driver on meson64</li> <li>AR-73 - Enable PCI on Rockpi 4 and overlay for GEN2 speed</li> </ul>"},{"location":"Release_Changelog/#v598-2019-10-09","title":"v5.98 (2019-10-09)","text":"<ul> <li>changed ntptime with chrony</li> <li>fixed serial console on several hosts</li> <li>added FriendlyARM ZeroPi</li> <li>enabled gadgets on rockchip64</li> <li>bumped RK3399 boards to latest kernel, recreate images and repository</li> <li>merged odroidxu4 down to default since we only have one kernel</li> <li>fixed Cubox images, move them to stock kernel</li> <li>fixed low Synaptic search speed</li> </ul> <p>Build script:</p> <ul> <li>script configurations were migrated to userpatches</li> <li>added option to create minimal images with around 500Mb in size BUILD_MINIMAL=\u201dyes\u201d</li> <li>added initial support of MCIMX7SABRE board (CSC)</li> <li>updates for xt-q8l-v10 (CSC)</li> <li>Docker is installed automatically if one want use it (Debian based build host only)</li> <li>refactor build all images scripting that images can be build in full parallel mode</li> <li>added one file for storing which combinations shell be made for each board</li> <li>replaced Etcher with dd + verify for directly burning images when done</li> <li>cleaned initial config and remove confusing advanced options out</li> </ul>"},{"location":"Release_Changelog/#v592-2019-08-02","title":"v5.92 (2019-08-02)","text":"<ul> <li>updated sunxi NEXT (4.19.63) and DEV (5.2.5) kernels</li> <li>updated htop application to show cpu speed and temperature (buster / disco)</li> </ul>"},{"location":"Release_Changelog/#v591-2019-07-31","title":"v5.91 (2019-07-31)","text":"<ul> <li>created new images for Helios4 and Clearfog Pro/Base</li> <li>moved mvebu DEFAULT, NEXT and DEV branch to next kernel (LTS) and U-boot version</li> <li>fixed armada_thermal sensor reading, adjusted Helios4 fancontrol configuration</li> <li>fixed ODT on data signals of DDR RAM for Armada A388 SOMs</li> <li>recreated Armbian Buster images due to a bug in Network manager which in some cases failed to initiate network connection</li> </ul> <p>Armbian-config:</p> <ul> <li>added Emby installation</li> <li>updated Plex install to use official repo</li> <li>added netmask-to-CIDR function for manual IP configuration</li> </ul>"},{"location":"Release_Changelog/#v590-2019-07-07","title":"v5.90 (2019-07-07)","text":"<ul> <li>added Armbian Buster images for all boards</li> <li>added Macchiatobin Doubleshot CSS target and images</li> <li>added images with test kernel v5.1.y for: Orangepi3, Lite2, One+, PineH64, Odroid C1, Teres, Pinebook</li> <li>added wireless drivers for 88x2bu</li> <li>added eMMC support for Nanopi K2 (booting from doesn\u2019t work yet)</li> <li>added dual w1 overlay for meson64 family</li> <li>updated wireless drivers for Realtek 8811, 8812, 8814 and 8821</li> <li>updated wireless drivers for rtl8188eus &amp; rtl8188eu &amp; rtl8188etv</li> <li>added latest Wireguard driver</li> <li>enable eMMC on Orangepi Win Plus</li> <li>enable Bluetooth on Tinkerboard, Nanopi4, Rockpi 4 CLI images</li> <li>improved ALSA config on Tinkerboard</li> <li>fixed Bluetooth on Nanopi M4/Neo4/T4 and Rockpi4</li> <li>fixed wireless drivers on OPi3 &amp; Lite2</li> <li>fixed temperature readout on Allwinner H5 boards</li> <li>fixed SPI related bug on Allwinner 5.1.y kernel</li> <li>fixed HDMI output and bump kernel to 5.1.y on imx6 boards</li> <li>fixed eMMC install, add rootdev= to armbianEnv if missing</li> <li>fixed A10/A20 SATA write speed</li> <li>set default build target from Debian Stretch to Buster for all boards</li> <li>changed CPU clock back to 1.5/1.8Ghz defaults on boards with RK3399 to minimise thermal throttling</li> <li>changed motd console welcome text to: \u201cWelcome to Debian Stretch with Armbian Linux 5.1.6-sunxi\u201d</li> <li>changed display manager to lightdm by default and remove nodm completely</li> <li>changed u-boot for A64 to upstream sources</li> <li>changed RK3399 to U-boot 2019.04</li> <li>added URL to the build script and commit hash to /etc/armbian-release file</li> <li>added synaptic package manager and on-board keyboard to the desktop base</li> <li>added \u201clogout\u201d to the panel/menu</li> <li>added normal users to additional groups: disk tty users games</li> <li>updated all kernels with upstream</li> <li>updated ATF and bootloader on Espressobin, supporting all versions</li> </ul> <p>Build script:</p> <ul> <li>added mirrors for speed-up building in China mainland</li> <li>added support for download compilers and rootfs cache via torrent network</li> <li>added new output image compression option (xz)</li> <li>enabled Debian Buster and Ubuntu Disco (unsupported) targets</li> <li>few Docker building improvements, caching image</li> <li>replace curl with aria2</li> <li>Linaro compilers update to 2019.02</li> </ul> <p>Armbian-config:</p> <ul> <li>added Gimp installation</li> <li>added enable/disable Avahi</li> <li>updated OMV installer, OMV5 preparations</li> <li>enable screen resolution changer for Odroid N2</li> <li>enable CPU speed and governor adjustment</li> </ul>"},{"location":"Release_Changelog/#v587-2019-05-26","title":"v5.87 (2019-05-26)","text":"<ul> <li>added support for Odroid N2, Nanopi R1, Nanopi Duo2</li> <li>enabled nightly images for Orangepi3, One+, Lite2, PineH64, Rock64pro, RockPi4b</li> <li>enabled nigtly Buster and Disco images for Le Potato</li> <li>recompiled all images and pushed update where updates are known to work (sunxi, sunxi64, meson64, \u2026)</li> <li>improved SATA write speed on A20 chips for up to 300%</li> <li>fixed thermal throtling for H5 devices</li> <li>mainline u-boot moved 2019.04</li> <li>most development kernels moved to 5.1.y</li> <li>added separate DT for espressobinv7, updated boot loader</li> <li>enable WoL for eth0 on Helios4</li> </ul> <p>Build script:</p> <ul> <li>added Debian Buster and Ubuntu Disco (WIP)</li> <li>improved building under Docker. Source code is not copied to docker image, caching image</li> <li>Linaro compilers update to 2019.02</li> <li>fixed incomplete cleaning of the source code</li> </ul> <p>Armbian-config:</p> <ul> <li>fixed kernel changing</li> <li>fixed sources download</li> <li>fixed Hass.IO and TVheadend install</li> <li>added menu driven CPU frequency/governor adjustement</li> <li>improved two-factor authentication</li> <li>added meson64 and rockchip to overlay/hardware configuration</li> <li>improved hostapd management</li> </ul> <p>Infrastructure:</p> <ul> <li>main download server has been hooked to 10GbE connection.</li> <li>added web/http seeds to torrent download. Torrent download could/should fully utilize your download capacity.</li> <li>major forum upgrade (v4.4.3)</li> <li>added another IPV6 capable EU mirror https://mirrors.dotsrc.org</li> </ul>"},{"location":"Release_Changelog/#v576-2019-02-11","title":"v5.76 (2019-02-11)","text":"<ul> <li>remove Exagear Desktop</li> </ul>"},{"location":"Release_Changelog/#v575-2019-02-10","title":"v5.75 (2019-02-10)","text":"<ul> <li>added updated driver for Realtek 8811, 8812, 8814 and 8821 chipsets</li> <li>added Wireguard support to remaining kernels (except lower than 3.10)</li> <li>images rebuild with latest upstream sources, mainline u-boot was bumped to 2018.11</li> </ul>"},{"location":"Release_Changelog/#v574-2019-01-31","title":"v5.74 (2019-01-31)","text":"<ul> <li>fixing systemd related bug found in sunxi legacy 3.4.y kernels</li> </ul>"},{"location":"Release_Changelog/#v573-2019-01-29","title":"v5.73 (2019-01-29)","text":"<ul> <li>much faster armbian-install operations. Thanks to @dedalodaelus</li> <li>added support for @wireguard on all kernels higher than 3.10.y</li> <li>fixed drivers for popular DVB tuner S960 (all kernels)</li> <li>fixed bug in wireless drivers on Cubietruck, BananpiPRO, Bananapi+</li> <li>fixed AP mode on Orangepi PC+, Prime, One, .. when using kernel 4.19.y</li> <li>added prolific USB-to-USB bridges in mvebu-next/dev</li> <li>added nftables masquerade in mvebu64-next</li> <li>added MD raid support for SUNXI64</li> <li>upgrade bugfix for Helios4</li> <li>updated hostapd to 2.7</li> <li>fixed 1512MHz OPP on Renegade</li> <li>fixed DRM crashing for rockchip64</li> <li>mainline u-boot bumped to 2018.11 (update goes manually from armbian-install utility)</li> <li>added testing images for Orangepi RK3399 and Radxa Rockpi 4B</li> </ul>"},{"location":"Release_Changelog/#v572-2019-01-16","title":"v5.72 (2019-01-16)","text":"<ul> <li>added additional repository mirror (updated armbian-config)</li> <li>fixed Tinkerboard DTB in repository and images rebuild</li> </ul>"},{"location":"Release_Changelog/#v571-2019-01-16","title":"v5.71 (2019-01-16)","text":"<ul> <li>updated images for Odroid C2, Lepotato and Nanopik2-S905 due to this bug</li> </ul>"},{"location":"Release_Changelog/#v570-2019-01-12","title":"v5.70 (2019-01-12)","text":"<ul> <li>sunxi-next and sunxi64-next were moved from 4.14.y to 4.19.y (remake of all AW images)</li> <li>better DVFS on H3/H5/A64, enabled higher cpu speed.</li> <li>added overlay support for Tinkerboard/rockchip next and kernel upped to 4.19.y</li> <li>updated next kernel for Odroid XU4 to 4.19.y</li> <li>updated next kernel for Odroid C2, Lepotato and Nanopik2-S905 to 4.19.y with overlay support</li> <li>fixed poweroff on H5</li> <li>H5/A64 lost experimental status,</li> <li>upgraded images and upstream/bugfix kernel upgrade for Rock64, Renegade,</li> <li>u-boot update is moved from automated to manual (armbian-config) to minimize boot related troubles</li> <li>added two repository mirrors: China and France (armbian-config -&gt; Personal -&gt; Mirror)</li> <li>changed switching to alternative kernels from armbian-config. It is possible to select a direct version and it only replaces kernel (safer)</li> <li>first official build for Olimex Teres</li> <li>mainline kernel builds for: Pine64, Pine64so, Olinuxino A64, OrangepiWin</li> <li>added more download variants for Rock64, Renegade, Tritium H3&amp;H5</li> <li>updated images for Z28PRO, Bananapi PRO, Espressobin, Olimex Micro, Lime, Udoo, Bananapi M2, Bananapi M2U,</li> </ul>"},{"location":"Release_Changelog/#v568-2018-12-30","title":"v5.68 (2018-12-30)","text":"<ul> <li>updated Espressobin images, kernel updated to 4.19.y</li> </ul>"},{"location":"Release_Changelog/#v567-2018-11-26","title":"v5.67 (2018-11-26)","text":"<ul> <li>updated Helios4 images</li> <li>added experimental mainline kernel images for Pinebook and Pinebook 1080p</li> </ul>"},{"location":"Release_Changelog/#v567-2018-11-12","title":"v5.67 (2018-11-12)","text":"<ul> <li>updated images for Bananapi R2 with eMMC install support.</li> </ul>"},{"location":"Release_Changelog/#v566-2018-11-08","title":"v5.66 (2018-11-08)","text":"<ul> <li>added Mediatek MT7623 family.</li> <li>added images for Bananapi R2 with kernel 4.19.y without official support.</li> </ul>"},{"location":"Release_Changelog/#v566-2018-11-07","title":"v5.66 (2018-11-07)","text":"<ul> <li>removing Odroid C2 official support, drop its default 3.16.y kernel from build engine and merge with the meson64 family.</li> <li>attach meson64 dev to 4.19.y</li> <li>drop Udoo Neo completly, drop Udoo Quad default and dev kernel.</li> <li>Odroid XU4: drop kernel 3.10.y, default branch is upgraded to offical 4.14.y, next becomes vanilla 4.19.y</li> </ul>"},{"location":"Release_Changelog/#v565-2018-11-06","title":"v5.65 (2018-11-06)","text":"<ul> <li>Cubox-i/Hummigboard: drop kernel 3.14.y and move 4.14.y to default, next becomes 4.19.y, dev 4.19.y with a mainline u-boot</li> </ul>"},{"location":"Release_Changelog/#v564-2018-10-09","title":"v5.64 (2018-10-09)","text":"<ul> <li>updated images and packages for Helios4.</li> <li>added images for Nanopi Neo4.</li> </ul>"},{"location":"Release_Changelog/#v563-2018-10-08","title":"v5.63 (2018-10-08)","text":"<ul> <li>updated images for Helios4 with SPI booting support.</li> <li>updated armbian-config. Added advanced ZSH shell install with most used plugins and tmux.</li> </ul>"},{"location":"Release_Changelog/#v562-2018-10-01","title":"v5.62 (2018-10-01)","text":"<ul> <li>updated armbian-config</li> </ul>"},{"location":"Release_Changelog/#v561-2018-09-26","title":"v5.61 (2018-09-26)","text":"<ul> <li>updated armbian-config,</li> <li>fixed Chromium on Debian builds with a workaround. We are overwriting package with last known working one. It will show some error on startup which is safe to ignore. This workaround will fade out with Chromium upstream update.</li> </ul>"},{"location":"Release_Changelog/#v560-2018-09-19","title":"v5.60 (2018-09-19)","text":"<p>Changes overview:</p> <p>General:</p> <ul> <li>Ubuntu Xenial was replaced with Bionic unless kernel was too old for the change,</li> <li>Debian Jessie becomes EOL and its building is not maintained anymore while you will still receive kernel updates,</li> <li>Emergency swap file creation is disabled by default since we use compressed memory (ZRAM) as an alternative,</li> <li><code>vm.swappiness</code> has been changed from 0 to 100 (if you run databases on your board you might want to revert this change in <code>/etc/sysctl.conf</code>),</li> <li>RAM logging also uses ZRAM now and rotates logs automagically,</li> <li>all images were rebuilt, except boards for which support ended,</li> <li>significantly lighter - browser only - desktop images (&lt; 1.5G),</li> <li>fixed hanging on headers installation,</li> <li>install boot script (BSP package) if not present. This fixes upgrade or kernel switching problems,</li> <li>Proper bind mount directory when installing to SATA/USB and booting from SD,</li> <li>update for wireless drivers 8812/11/14AU, 8188EU and AUFS,</li> <li>Bugfix when a temperature is not present or readings are invalid,</li> <li>Also showing bridge IP addresses in MOTD,</li> <li>storing package list compressed - saves 50-70Mb,</li> <li>enlarging automated apt-get update and purge intervals,</li> <li>smaller overhead for CLI images,</li> <li>improved alternative kernel switching,</li> <li>stop setting Google\u2019s DNS server as default for privacy reasons.</li> </ul> <p>Family:</p> <ul> <li>sunxi and sunxi64, u-boot was bumped to 2018.05, NEXT branch was updated to the latest 4.14.y, DEV is attached to 4.18.y + fixed overlay support,</li> <li>mvebu64, default BSP kernel was upgraded to 4.14.y, NEXT to 4.18.y,</li> <li>odroidc1, experimental NEXT kernel branch was attached to 4.18.y,</li> <li>odroidc2 kernel was merged with meson64 on the source level,</li> <li>meson64 u-boot was pushed to 2018.05, a default was updated to the latest 4.14.y, NEXT to 4.18.y,</li> <li>rk3288, u-boot was pushed to 2018.05, legacy kernel cleaned and fixed after upstream troubles, NEXT branch was updated to the latest 4.14.y,</li> <li>rockchip64, rk3399 was split into rk3399 for Friendly ARM boards and rockchip64 for Rock64 and RockPro, Ayufan repository. Merging is postponed for the future,</li> <li>s5p6818 family support added NEXT branch was updated to the latest 4.14.y,</li> <li>mvebu, NEXT branch was updated to latest 4.14.y, DEV attached to 4.18.y,</li> <li>fixed randomly failing X server on imx6 family,</li> </ul> <p>Board:</p> <ul> <li>added WIP support for Firefly RK3399, Lime A64, Renegade, Rockpro64, Olimex Teres</li> <li>added experimental images for Bananapi M3 and Cubietruck+,</li> <li>adeed support for: Tinkerboard S, Rock64, Orangepi Zero Plus, Nanopi Neo Core2, Nanopi M4,</li> <li>added NEO 1.1 regulator overlay,</li> <li>added Helios4 device tree with FAN control for modern kernel,</li> <li>enabled SPI access on Espressobin,</li> <li>updated SPI boot firmware on Espressobin (18.09.1) with many fixes and support for booting from USB, SATA, eMMC or SD,</li> <li>added Tinkerboard S DC-IN voltage to armbianmonitor,</li> <li>fixed network interface initialization,</li> <li>fixed clock drift on Bananapi boards,</li> <li>enabled concurrent AP/STA mode on Tinkerboard,</li> <li>improved support for NanoPi Fire 3 (added SPU1705, DVFS, thermal tables, etc.),</li> <li>fixed network crashing on high load. Affected: Odroid C1/C2, Le Potato kernel 4.18.y,</li> <li>fixed wireless, eMMC and Bluetooth on (unsupported) Z28 PRO and changed boot order,</li> <li>fixed eMMC install on NanoPC T3+ and Docker dependencies on Fire3, M3, NanoPC T3+,</li> <li>added eMMC and DVFS support on Espressobin mainline kernel,</li> <li>ported Tinkerboard UMS to modern u-boot,</li> <li>enabled 1392 MHz cpufreq OPP on all RK3328 devices,</li> <li>enabled 1992/1512MHz cpufreq OPP on all RK3399 devices,</li> <li>added eMMC to OlinuXino A64 kernel and u-boot,</li> <li>added Sunvell R69 CSC target,</li> <li>OrangepiWin: fixed BT,</li> <li>fixed ethernet on (unsupported) Bananapi M64.</li> </ul> <p>Build script:</p> <ul> <li>changed recommended build host to Bionic, Xenial still supported for everything except building Bionic images,</li> <li>added support for burning image directly to SD card when your build is done by using Etcher for CLI,</li> <li>added support for making LUKS encrypted root images, parameters: CRYPTROOT_ENABLE=yes, CRYPTROOT_PASSPHRASE=unlockpass,</li> <li>fixed building under Docker, bumped to Bionic host,</li> <li>added building Bionic and block building it for images with too old kernels,</li> <li>added multibranch support (LIB_TAG).</li> </ul> <p>Infrastructure:</p> <ul> <li>build machine main SSD and memory upgrade, switched from bare metal Ubuntu Xenial to fully optimsed Debian KVM server, free build capacity is avaliable for any armbian related activity upon request,</li> <li>download server drive capacity and download speed upgrade, IPV6,</li> <li>geo load balancing for repository and download server is under testing,</li> <li>improved repository management. Possibility to add packages via Github,</li> <li>introducing new internal parameter, example: BUILD_ALL=\u201dyes\u201d REBUILD_IMAGES=\u201dbananapi,udoo,rock64\u201d to specify which images need rebuilding,</li> <li>main torrent server cleanup, removed deprecated images,</li> <li>creating report https://beta.armbian.com/buildlogs/report.html when building all kernels. Prepared to include simple per board testing report where exists armbian/testings.</li> </ul> <p>Known bugs:</p> <ul> <li>modern kernel support on A64 boards is mainly broken.</li> </ul>"},{"location":"Release_Changelog/#v559-2018-08-18","title":"v5.59 (2018-08-18)","text":"<ul> <li>rebuilt images for Espressobin with kernel 4.18.y, Nanopc T4</li> </ul>"},{"location":"Release_Changelog/#v558-2018-08-13","title":"v5.58 (2018-08-13)","text":"<ul> <li>rebuilt images for Bananapi, Bananapi Pro, Bananapi+, Odroid C2, Odroid XU4</li> <li>updated repository for Odroid C2/XU4, changed NEXT from 4.9.y to 4.14.y</li> </ul>"},{"location":"Release_Changelog/#v558-2018-08-13_1","title":"v5.58 (2018-08-13)","text":"<ul> <li>rebuilt images for Bananapi, Bananapi Pro, Bananapi+</li> </ul>"},{"location":"Release_Changelog/#v557-2018-08-11","title":"v5.57 (2018-08-11)","text":"<ul> <li>added Bionic desktop and Stretch CLI images for RK3399 powered Nanopc T4</li> </ul>"},{"location":"Release_Changelog/#v556-2018-08-10","title":"v5.56 (2018-08-10)","text":"<ul> <li>rebuilt images for Pinebook. Added Bionic build</li> </ul>"},{"location":"Release_Changelog/#v555-2018-08-09","title":"v5.55 (2018-08-09)","text":"<ul> <li>rebuilt images for Orangepi One+, Orangepi Lite 2 and Pine H64. Enabled USB3, network, THS, DVFS, higher frequencies, HDMI on 4.18.y DEV branch images.</li> </ul>"},{"location":"Release_Changelog/#v555-2018-08-03","title":"v5.55 (2018-08-03)","text":"<ul> <li>added Stretch and Bionic mainline kernel images for Odroid C1 (testing),</li> <li>rebuilt images for Bananapi M3 (fixed ethernet)</li> </ul>"},{"location":"Release_Changelog/#v554-2018-07-25","title":"v5.54 (2018-07-25)","text":"<ul> <li>updated images for Odroid C2, Nanopi M3, Nanopi Fire 3 and NanoPC T3+, Espressobin, Cubox-i/HB and Le potato</li> <li>added preview images without end user support for Bananapi M3,Cubietruck+ and Bananapi M2 Berry.</li> </ul>"},{"location":"Release_Changelog/#v553-2018-07-23","title":"v5.53 (2018-07-23)","text":"<ul> <li>Z28PRO images updated. Fixed wireless and Bluetooth</li> <li>FriendlyARM Nanopi K2 S905 images updated. Fixed ethernet problems.</li> <li>FriendlyARM Nanopi K1+ images updated. Fixed HDMI out and wireless</li> </ul>"},{"location":"Release_Changelog/#v551-2018-07-04","title":"v5.51 (2018-07-04)","text":"<ul> <li>Helios4 Stretch and Bionic images update</li> </ul>"},{"location":"Release_Changelog/#v550-2018-06-28","title":"v5.50 (2018-06-28)","text":"<ul> <li>Espressobin images rebuild and repository update, default 4.4.138, next 4.17.3, dev 4.18.RC, hardware crypto support in 4.17.y, zram and zswap</li> <li>Odroid C2 bugfix update</li> </ul>"},{"location":"Release_Changelog/#v549-2018-06-28","title":"v5.49 (2018-06-28)","text":"<ul> <li>Amlogic Meson64 family (Odroid C2, Lepotato and FriendlyARM K2 S905) were merged into one kernel. Default images comes with kernel 4.14.52, next with 4.17.3 and DEV with 4.18.RC, updated boot scripts, implemented latest kernel bug fixes</li> <li>updated kernels, desktop packages and armbian config on the stable repository (apt update &amp; upgrade)</li> </ul>"},{"location":"Release_Changelog/#v548-2018-06-26","title":"v5.48 (2018-06-26)","text":"<ul> <li>added nightly images for Odroid C2 with 4.16.y (NEXT) and 4.18.y (DEV) and hopefully fixed ethernet driver</li> </ul>"},{"location":"Release_Changelog/#v547-2018-06-22","title":"v5.47 (2018-06-22)","text":"<ul> <li>Odroid C2 images rebuild. Legacy kernel was upgraded to 3.16.57, next to 4.14.51, u-boot to 2018.05</li> <li>Added Tritium H5</li> </ul>"},{"location":"Release_Changelog/#v546-2018-06-20","title":"v5.46 (2018-06-20)","text":"<ul> <li>Added Olimex Teres nightly builds</li> <li>Added FriendlyARM Nanopi K1 plus</li> </ul>"},{"location":"Release_Changelog/#v546-2018-06-06","title":"v5.46 (2018-06-06)","text":"<ul> <li>Added Orange Pi Lite 2 and One plus nightly builds</li> </ul>"},{"location":"Release_Changelog/#v545-2018-05-23","title":"v5.45 (2018-05-23)","text":"<ul> <li>Orangepi Zero+ images rebuild</li> </ul>"},{"location":"Release_Changelog/#v544-2018-05-10","title":"v5.44 (2018-05-10)","text":"<ul> <li>Espressobin images were rebuilt and moved under stable. Kernel 4.14.40, Stretch, Xenial and Bionic. Fixed bootloader, ath10 wireless card support</li> <li>added initial Bionic storage to the main apt repository</li> <li>Cubox-i / Hummingboard bugfix update to 4.16.y and images rebuild</li> <li>Odroid C2 images rebuild</li> </ul>"},{"location":"Release_Changelog/#v541-2018-02-10","title":"v5.41 (2018-02-10)","text":"<ul> <li>fixed LED driver on Helios4</li> <li>bugfix update on sunxi/sunxi64 kernel. Updated to 4.14.18</li> <li>kernel update for MVEBU next (4.14.18 and default 4.4.115) for Clearfog and Helios4. Upstream fixes,AUFS and Realtek 881yAU drivers update</li> </ul>"},{"location":"Release_Changelog/#v540-2018-02-05","title":"v5.40 (2018-02-05)","text":"<ul> <li>fixed eMMC support on Odroid C2 NEXT, kernel 4.14.y</li> <li>updated PWM driver on Helios4</li> <li>kernel update for MVEBU next (Clearfog, Helios4)</li> </ul>"},{"location":"Release_Changelog/#v538-2018-01-29","title":"v5.38 (2018-01-29)","text":"<ul> <li>updated all images</li> <li>added H3/H5 testing images with kernel 4.14.y</li> <li>added Nanopi M3/T3+/Fire testing image</li> <li>fixed Bluetooth on Orangepi Win</li> <li>main repository update with recent kernel on all NEXT builds</li> </ul>"},{"location":"Release_Changelog/#v537-2018-01-23","title":"v5.37 (2018-01-23)","text":"<ul> <li>bugfix release</li> <li>armbianmonitor -u fix</li> <li>setting cronjob permissions</li> <li>replace broken u-boot packages on A20 boards</li> <li>updated utilities: hostapd, sunxi-tools, armbian-config</li> <li>updated images: Bananapi, PRO, M2, BeelinkX2, Clearfog,Cubieboard2, Cubietruck, Cubox-i/HB, Espressobin, Helios4</li> </ul>"},{"location":"Release_Changelog/#v536-2017-12-03","title":"v5.36 (2017-12-03)","text":"<ul> <li>bugfix release</li> </ul>"},{"location":"Release_Changelog/#v535-2017-11-25","title":"v5.35 (2017-11-25)","text":"<ul> <li>mainline kernel updated to 4.13.y</li> <li>mainline u-boot updated to v2017.09</li> <li>added new sunxi Device Tree overlays, fixed and improved old overlays</li> <li>Micro-USB g_serial console is enabled by default on most small Allwiner based boards</li> <li>Olimex Lime2 and Micro: merging eMMC and normal versions</li> <li>Odroid C2: next and dev branches migrated to mainline u-boot</li> <li>Odroid XU4: added dev branch, next branch migrated to mainline u-boot</li> <li>Clearfog: added dev branch with mainline u-boot</li> <li>added supports for 7\u201d RPi display to Tinkerboard with legacy kernel</li> <li>All mainline kernels: added Realtek 8811AU/8812AU/8814AU USB wireless driver with monitor mode and frame injection</li> <li>All boards: added kernel source packages to the repository (Package names <code>linux-source-${BRANCH}-${LINUXFAMILY}</code>, i.e. <code>linux-source-sunxi-next</code>)</li> <li>Kernel headers are no longer installed by default to new images</li> <li>Additional out of tree drivers and USB Redirector are no longer installed by default to new images</li> <li>Switching from emergency swap to zram on new Ubuntu Xenial images</li> <li>New hardware support (stable/supported images): NanoPi Duo, Orange Pi R1, Pinebook</li> <li>New hardware support (experimental): Le Potato, NanoPi NEO 2, Orange Pi Zero Plus, Orange Pi Zero Plus 2 (H5)</li> <li>sunxi mainline u-boot: reenabled USB keyboard support and disabled stopping the boot sequence with any key - autoboot now can be aborted with  <p>Desktop images:</p> <ul> <li>xterm was replaced with full featured xfce terminal,</li> <li>added memory profile caching for Chromium,</li> <li>added OpenVPN connector,</li> <li>shortcuts to armbian-config, support and donate were moved to menu,</li> <li>default icon theme was changed to lighter one (Numix),</li> <li>fixed login greeter theme,</li> <li>changed wallpaper.</li> <li>changed CMA handling on Allwinner legacy kernels</li> </ul> <p>armbian-config:</p> <ul> <li>was splitted from board support packages to a new package <code>armbian-config</code></li> <li>managing board hardware configurations, hotspot, Bluetooth, SSH server</li> <li>freezing/unfreezing kernel upgrade</li> <li>switching between stable and beta builds,</li> <li>switching between alternative kernels,</li> <li>installing/uninstalling kernel headers,</li> <li>changing timezone, locales, hostname,</li> <li>running diagnostic tools,</li> <li>enabling/disabling RDP server,</li> <li>3rd party software installer: Samba, OMV, Pi hole, Transmission, \u2026</li> </ul> <p>Build script:</p> <ul> <li>added Debian Stretch</li> <li>most tweaks moved from inline files to separate files in board support package</li> <li>firmware blobs moved to a separate repository</li> <li>disabled distcc in extra software compilation process due to toolchain compatibility issues</li> </ul> <ul> <li>Known problems</li> </ul> <ul> <li>Allwinner A20/sun7i legacy boards. Changed CMA settings prevents playing video. You need to add cma=96M to kernel command line</li> </ul>"},{"location":"Release_Changelog/#v534-2017-10-18","title":"v5.34 (2017-10-18)","text":"<ul> <li>bugfix Odroid XU4/HC1 image rebuild due to broken USB install on kernel 4.9.x</li> <li>added Le Potato and Orange Pi Zero testing image (mainline kernel)</li> <li>Tinkerboard, MiQi and Pinebook images rebuilt</li> </ul>"},{"location":"Release_Changelog/#v533-2017-09-24","title":"v5.33 (2017-09-24)","text":"<ul> <li>Odroid XU4/HC1 images were rebuilt.</li> </ul>"},{"location":"Release_Changelog/#v533-2017-09-21","title":"v5.33 (2017-09-21)","text":"<ul> <li>Tinkerboard and MiQi images were rebuilt. Rockchip legacy kernel was updated to 4.4.88 and mainline (NEXT) to 4.13.3.</li> </ul>"},{"location":"Release_Changelog/#v532-2017-06-23","title":"v5.32 (2017-06-23)","text":"<ul> <li>bugfix release due to broken crypto functions on kernel 4.11.x</li> </ul>"},{"location":"Release_Changelog/#v531-2017-06-15","title":"v5.31 (2017-06-15)","text":"<ul> <li>bugfix release due to network failure on some A10 / A20 boards</li> </ul> <p>End of support notice</p> <p>Following boards are no longer receiving support and updates since this version:</p> <ul> <li>Cubieboard (Allwinner A10) - not enough hardware samples to maintain support</li> <li>Lamobo R1 (Allwinner A20) - hardware design flaws, poor software support for the onboard switch</li> <li>Olimex Lime A10</li> </ul>"},{"location":"Release_Changelog/#v530-2017-06-14","title":"v5.30 (2017-06-14)","text":"<ul> <li>mainline kernel updated to 4.11</li> <li>mainline u-boot updated to v2017.05</li> <li>Firefox was replaced with Chromium (desktop images)</li> <li>sunxi mainline configuration: added Device Tree overlays support (new images only)</li> <li>sunxi mainline configuration: added <code>armbian-add-overlay</code> helper for compiling and activating DT overlays (new images only)</li> <li>log2ram: fixed saving <code>/var/log</code> contents on shutdown</li> <li>new hardware support (stable/supported images): Xunlong Orange Pi Zero Plus 2 (H3), ASUS TinkerBoard, MiQi</li> <li>reworked package updates MOTD script to speed up the login process</li> <li>added config file <code>/etc/default/armbian-motd</code> for disabling MOTD components</li> <li>added <code>armbian-config</code> dialog-based configuration program (WIP)</li> <li>Banana Pi M2: fixed HDMI video output</li> <li>Clearfog: adjusted temperature readout</li> <li>i.MX6 mainline: enabled support for HDMI audio and PCIe bus</li> </ul> <p>End of support notice</p> <p>Following boards are no longer receiving support and updates since this version:</p> <ul> <li>Orange Pi (Allwinner A20) - no hardware samples, out of stock</li> <li>Orange Pi Mini (Allwinner A20) - no hardware samples, out of stock</li> <li>LeMaker Guitar (Actions S500)</li> <li>Roseapple Pi (Actions S500)</li> </ul>"},{"location":"Release_Changelog/#v526-v527-2017-02-24","title":"v5.26, v5.27 (2017-02-24)","text":"<ul> <li>security update for most kernels (packages only)</li> <li>fixes for hostapd configuration</li> </ul>"},{"location":"Release_Changelog/#v525-2017-02-02","title":"v5.25 (2017-02-02)","text":"<ul> <li>armbian-install expanded functionality: you can partition destination and choose file-system type: ext2, ext3, ext4 and BTRFS (BTRFS requires kernel 4.4+)</li> <li>added new boards: Clearfog Base, Lime2 eMMC, Lime A33, NanoPi M1+, OrangePi Zero, OrangePi PC2 (mainline only, experimental)</li> <li>new default kernel for Clearfog(s), changed kernel family to \u201cmvebu\u201d to avoid conflicts</li> <li>disabled wireless power management by default to improve performance with certain drivers</li> <li>added wireless drivers to mainline kernels: OrangePi Zero, Neo Air</li> <li>implemented initrd loading support for all boards</li> <li>moved all images to single ext4 partition scheme</li> <li>changed default wallpaper, startup icon, shadows to windows on desktop builds</li> <li>Firefox web cache moved to memory</li> <li>added g_serial driver to boards without a network connector, working on both kernel (Opi Zero,Opi Lite,FA Neo Air)</li> <li>added \u201cSoftware boutique\u201d application installer on desktop builds (currently not working properly on arm64)</li> <li>added per board patching option</li> <li>added u-boot video driver and boot logo to H3 based boards</li> <li>added simplefb video driver (HDMI only) to mainline H3 kernel</li> <li>updated MALI driver on H3 platform, fixed problems on 2GB boards</li> <li>changed Ethernet switch driver on Lamobo R1 to DSA based one (mainline kernel)</li> <li>fixed soft cursor (CLI) for H3 legacy and Odroid C2</li> <li>expand and adjust multiple kernel configurations based on user requests</li> <li>adjusted sunxi boot script to support booting in SPI flash + USB storage scenario (w/o the SD card)</li> <li>dropped support for Debian Wheezy and Ubuntu Trusty releases</li> <li>sunxi mainline kernel was updated to 4.9.x, some dev kernels to 4.10</li> <li>added log2ram (Ramlog alternative) to default installation</li> <li>changed first run logic, disabled forced automatic reboot</li> <li>changed new user account creation logic, disabled forced reboot on user creation failure</li> </ul>"},{"location":"Release_Changelog/#v524","title":"v5.24","text":"<ul> <li>this version is not released, it was used for the nightly or user-built images</li> </ul>"},{"location":"Release_Changelog/#v523-2016-10-23","title":"v5.23 (2016-10-23)","text":"<ul> <li>fixed bug in armbian-install</li> <li>fixed u-boot update bug on Allwinner platform</li> </ul> <p>Known problems:</p> <ul> <li>Lamobo R1 fails to boot upon upgrade</li> </ul>"},{"location":"Release_Changelog/#v522-2016-10-22","title":"v5.22 (2016-10-22)","text":"<ul> <li>fixed eMMC install on Odroid C2</li> <li>firmware package was splitted into minimal (default) and full versions</li> <li>patched Dirty COW exploit on all kernels</li> <li>added Odroid XU4 mainline kernel image</li> <li>added Olimex A33 mainline kernel image</li> <li>added Overlay FS for Cubox, Udoo and Udoo Neo</li> <li>booting problems fixed on more boards</li> <li>updated wireless driver on M2+ (dhd)</li> <li>updated driver for OV5640 on sun8i default kernel</li> <li>sunxi-next kernel version updated to 4.8.4</li> <li>BananaPi M1+ now uses upstream DTB file <code>sun7i-a20-bananapi-m1-plus.dtb</code>, boot script adjusting may be required for existing images</li> </ul> <p>Desktop images:</p> <ul> <li>prebuilt mpv and FFmpeg were removed in favor of providing only configuration files</li> <li>fixed an issue with video brightness on A10/A20 based boards</li> </ul> <p>Build script:</p> <ul> <li>DEBUG_MODE was renamed to CREATE_PATCHES</li> <li>GLshim was moved to a private directory, it can be activated for selected applications by changing <code>LD_LIBRARY_PATH</code></li> </ul> <p>Known problems:</p> <ul> <li>eMMC install fails (will be fixed in bugfix update)</li> <li>H3 development kernel (4.8.4) update fails to boot</li> <li>C2 upgrade hangs on compiling headers (Jessie)</li> </ul>"},{"location":"Release_Changelog/#v520-2016-09-16","title":"v5.20 (2016-09-16)","text":"<ul> <li>added FriendlyARM Neo legacy and mainline images (experimental)</li> <li>added Orange Pi PC+ mainline kernel (experimental)</li> <li>added Pine64 / Pine64+ images with legacy kernel</li> <li>added UUID support for NAND/SATA/USB installer</li> <li>added desktop images for Cubox(s) / Hummingboard(s) with mainline kernel</li> <li>enabled MIDI sequencer and snd-rawmidi-seq in H3 legacy kernel</li> <li>added H3 consumption tool to control board consumtion level on legacy kernel</li> <li>fixed and enabled Bluetooth on Cubietruck and Cubox(s) / Hummigboard(s) desktop, both kernels</li> <li>masked p2p0 wifi direct device on Bluetooth legacy kernel</li> <li>Odroid C1/C2 upgrade fail fixed</li> <li>wireless enabled by default on Banana Pi PRO</li> <li>added new screen resolutions to H3 boards with legacy kernel</li> <li>DeviceTree Overlay ConfigFS interface for H3 mainline kernel</li> <li>update of mainline u-boot to 2016.09 should fix boot failures on H3 boards with eMMC</li> <li>disabled USB keyboard support in mainline u-boot should fix boot failures with connected USB devices</li> </ul> <p>Desktop images:</p> <ul> <li>WICD was replaced with NetworkManager</li> <li>ALSA was replaced with PulseAudio</li> <li>sunxi boards: GLshim was added to desktop images with Mali support (except for Orange Pi Plus and Orange Pi Plus 2e)</li> <li>sunxi boards: prebuilt mpv now supports OSD and subtitles, activated by setting environment variable <code>VDPAU_OSD=1</code></li> </ul> <p>Build script:</p> <ul> <li>complete desktop building rework - now packages are built from sources</li> <li>added Lime 2 eMMC as build target (WIP)</li> <li>added Pine64 / Pine64+ mainline (dev) target (experimental)</li> <li>added FriendlyArm Neo as build target</li> <li>fixed MT7601 wifi driver building</li> <li>github download rework</li> <li>external toolchain rework</li> </ul> <p>Added additional packages, not installed by default:</p> <ul> <li>hostapd-realtek: replacement for hostapd with support for several Realtek Wi-Fi adapters</li> <li>fswebcam-gc2035: replacement for fswebcam with support for GC2035 camera driver for H3 based boards</li> <li>guvcview: replacement for stock guvcview with support for H3-based Orange Pi CMOS cameras</li> </ul> <p>Known problems:</p> <ul> <li>Mali OpenGL ES does not work on H3 boards with 2GB RAM (Orange Pi Plus 2, Orange Pi Plus 2e)</li> <li>Hardware video decoding on A10/A20 based boards produces dark video</li> <li>Some applications that depend on livav libraries (i.e. minidlna) may not work on Jessie images</li> </ul>"},{"location":"Release_Changelog/#v517-2016-07-07","title":"v5.17 (2016-07-07)","text":"<ul> <li>bugfix release on some boards.</li> </ul>"},{"location":"Release_Changelog/#v516-2016-07-05","title":"v5.16 (2016-07-05)","text":"<ul> <li>bugfix release. In 5.15 we accidentaly overwrote default network settings. Check /etc/network/interfaces if you use advanced network settings or fixed ip.</li> <li>small changes.</li> </ul>"},{"location":"Release_Changelog/#v515-2016-07-01","title":"v5.15 (2016-07-01)","text":"<ul> <li>Added improved camera driver for Xunlong\u2019s cheap 2MP GC2035 camera</li> <li>Improved throttling/DRAM settings for the new 3 overheating H3 devices (BPi M2+, NanoPi M1, Beelink X2)</li> <li>Added official support for Beelink X2, NanoPi M1, Banana Pi M2+</li> <li>Improved console output (serial + display)</li> <li>Finally got rid of (broken) board auto detection. We do not ship any more one image for several devices that tries to detect/fix things on 1st boot but provide one dedicated image per board (Plus and Plus 2 and both NanoPi M1 variants being handled as the same device since only size of DRAM/eMMC differs)</li> <li>Tried to improve user experience with better/unified led handling (light directly after boot, communicate booting states through blinking)</li> <li>Improve partitioning and filesystem resize on 1st boot making it easier to clone every installation media afterwards</li> <li>fully support installation on eMMC on all H3 devices (<code>u-boot</code> and <code>armbian-install.sh</code> fixes)</li> <li>Improved performance/thermal/throttling behaviour on all H3 boards (especially newer Oranges)</li> <li>Prevent HDMI screen artefacts (disabling interfering TV Out by default)</li> <li>Enhanced 8189ETV driver for older Oranges</li> <li>Added support for OPi Lite, PC Plus and Plus 2E including new 8189FTV Wi-Fi (client, AP and monitoring mode, added fix for random MAC address)</li> <li>Added in-kernel corekeeper patch (bringing back killed CPU cores after heavy overheating situations when thermal situation is ok again)</li> <li>Added TV Out patch for Orange Pi PC</li> <li>Further improve driver compilation due to improved kernel headers scripts compilation</li> <li>Initrd support</li> <li>increased kernel version to 3.4.112</li> <li>Exchanged whole kernel source tree to newer BSP variant, cleaned up sources, rebased all +100 patches (fixed display issues and kswapd bug, new and more performant GPU driver, increase Mali400MP2 clock to 600MHz)</li> <li>Added RTL2832U drivers to kernel (DVB-T)</li> <li>Fixed Docker on Odroid XU4</li> <li>Added overlay fs to Clearfog and Odroid XU4</li> <li>Many minor fixes</li> </ul>"},{"location":"Release_Changelog/#v514-2016-06-14","title":"v5.14 (2016-06-14)","text":"<ul> <li>all images rebuilt, most of them were manually tested</li> <li>added Beelink X2 image</li> <li>Cubox / Hummingboard kernel upgrade to 3.14.72 and 4.6.2</li> <li>Trusty was replaced with Xenial</li> </ul>"},{"location":"Release_Changelog/#v512-2016-05-31","title":"v5.12 (2016-05-31)","text":"<ul> <li>updated C1 images</li> <li>added wifi driver for new Oranges (modprobe 8189fs)</li> <li>added Orange Pi Lite, PC Plus and Plus 2E images</li> </ul>"},{"location":"Release_Changelog/#v511-2016-05-24","title":"v5.11 (2016-05-24)","text":"<ul> <li>Various bug fixes</li> <li>new working images for Actions Semi S500 boards</li> </ul>"},{"location":"Release_Changelog/#v510-2016-05-01","title":"v5.10 (2016-05-01)","text":"<p>Images:</p> <ul> <li>all 3.10+ kernels are Docker ready</li> <li>all A10/A20/H3 comes with HW accelerated video playback in desktop build</li> <li>fixed root exploit on H3 boards</li> <li>fixed kswapd 100% bug on H3 boards</li> <li>fixed SPDIF / I2S audio driver in legacy kernel</li> <li>fixed Udoo Neo wireless</li> <li>fixed slow SD cards boot</li> <li>fixed Allwinner SS driver</li> <li>fixed bluetooth on Cubietruck, both kernels</li> <li>fixed wireless driver on H3 boards</li> <li>fixed R1 switch driver</li> <li>kernel for Allwinner boards was upgraded to 3.4.112 &amp; 4.5.2</li> <li>kernel for iMx6 boards was upgraded to 3.14.67 &amp; 4.5.2</li> <li>kernel for Armada (Clearfog) was upgraded to 3.10.101 &amp; 4.5.2</li> <li>kernel for Udoo boards was updated to 3.14.67 &amp; 4.4.8</li> <li>kernel for Guitar (Lemaker) was upgraded to 3.10.101</li> <li>kernel for H3/sun8i legacy come from new Allwinner updated source (friendlyarm)</li> <li>added support for Olimex Lime2 eMMC</li> <li>increased MALI clockspeed on sun8i/legacy</li> <li>added Armbianmonitor</li> <li>added Odroid C1, C2(arm64), Nanopi M1, Banana M2+, Pcduino 2 and Pcduino 3. CLI and desktop</li> <li>added wifi radar to desktop</li> <li>added preview mainline kernel images for H3 boards (4.6.RC1)</li> <li>added initrd creation on all Allwinner images</li> <li>added Hummigboard 2 with working PCI and onboard wireless with legacy kernel 3.14.65</li> <li>added eMMC installer for H3</li> <li>added support for IFB and net scheduling for sun7i-legacy</li> <li>added ax88179_178a USB 3.0 Ethernet driver for sun7i-legacy</li> <li>hostapd comes as separate package (armbian-hostapd)</li> <li>changed first boot procedure and force user creation</li> <li>verbose / no verbose boot works almost on all boards</li> <li>enabled I2S on sun8i</li> <li>removed Debian Wheezy from auto build</li> <li>installing headers autocompile scripts</li> <li>all images come compressed with 7zip</li> </ul> <p>Build script:</p> <ul> <li>GCC 5 support for mainline and allwinner legacy</li> <li>RAW images are not compressed by default</li> <li>added arm64 building support</li> <li>added docker as host</li> <li>Added Belink X2 (H3 based media player), and Roseapple (S500) as WIP target</li> <li>introducted CLI_TARGET per board</li> <li>prepared Xenial target</li> <li>fixed USB redirector building on all kernels</li> <li>support for Xenial as a build host is 95% ready.</li> <li>implemented automatic toolchain selection</li> <li>come cleanup, configurations are subfoldered</li> <li>extended_deboostrap becomes default</li> </ul> <p>Known bugs:</p> <ul> <li>Udoo Neo reboots takes a while, 1min+</li> <li>headers within sun8i needs some fixing</li> <li>H3 board autodetection fail under certain conditions</li> </ul>"},{"location":"Release_Changelog/#v506-2016-03-18","title":"v5.06 (2016-03-18)","text":"<ul> <li>increase kernel version to 3.4.111</li> <li>headers auto creation while install (eases kernel/driver compilation)</li> <li>improved SD card partitioning to help old/slow cards with wear leveling and garbage collection</li> <li>Possible to use Ubuntu Xenial Xerus as target</li> <li>changed behaviour of board leds (green == power, red == warning)</li> <li>speed improvements for 1st automated reboot</li> <li>Integrates OverlayFS backport</li> </ul>"},{"location":"Release_Changelog/#v505-2016-03-08","title":"v5.05 (2016-03-08)","text":"<ul> <li>Auto detection for the Orange Pi 2 does work now</li> <li>Mali acceleration works for all users not only root</li> <li>verbose boot logging on 1st boot and after crashes (you can toggle verbose logging using <code>sudo armbianmonitor -b</code>)</li> <li>more WiFi dongles supported due to backported firmware loader patch</li> <li>all 3 USB ports on Orange Pi One (Lite) available (2 of them need soldering)</li> <li>I2S possible on all Orange Pis (compare with the mini tutorial since you need to tweak script.bin)</li> <li>default display resolution set to 720p60 to fix possible overscan issues on 1st boot</li> <li>HW accelerated video decoding works for most formats</li> <li>Booting from eMMC on OPi Plus now possible</li> <li>Udoo quad images upgraded to 4.4.4</li> </ul>"},{"location":"Release_Changelog/#v504-2016-03-01","title":"v5.04 (2016-03-01)","text":"<ul> <li>HDMI/DVI works (bug in boot.cmd settings)</li> <li>Reboot issues fixed (bug in fex settings)</li> <li>1-Wire useable (we chose to stay compatible to loboris\u2019 images so the data pin is 37 by default. You\u2019re able to change this in the fex file)</li> <li>changing display resolution and choosing between HDMI and DVI is now possible with the included h3disp tool (should also work in the stand-alone version with Debian based OS images from loboris/Xunlong). Use <code>sudo h3disp</code> in a terminal to get the idea.</li> <li>Ethernet issues fixed (combination of kernel and fex fixes)</li> <li>USB-to-SATA bridge on the Orange Pi Plus works</li> <li>stability problems on Orange Pi One fixed (due to undervoltage based on wrong fex settings)</li> <li>problems with 2 USB ports on the PC fixed (wrong kernel config)</li> <li>Mali400MP acceleration (EGL/GLES) works now</li> <li>suspend to RAM and resume by power button works now (consumption less than 0.4W without peripherals)</li> <li>Enforce user account creation before starting the GUI</li> <li>USB and Ethernet IRQs distributed nicely accross CPU cores</li> <li>Full HDMI colour-range adjustable/accessible through h3disp utility</li> <li>already useable as stable headless/server board</li> <li>rebuilt Cubieboard 1 &amp; 2 with 3.4.110 and 4.4.3</li> <li>fixed Bluetooth on Cubietruck + rebuild with 3.4.110 and 4.4.3</li> <li>all new images has no login policy: forced user generation</li> </ul>"},{"location":"Release_Changelog/#v503-2016-02-20","title":"v5.03 (2016-02-20)","text":"<ul> <li>H3 images rebuilt</li> </ul>"},{"location":"Release_Changelog/#v502-2016-02-18","title":"v5.02 (2016-02-18)","text":"<ul> <li>H3 images rebuilt</li> </ul>"},{"location":"Release_Changelog/#v501-2016-02-17","title":"v5.01 (2016-02-17)","text":"<ul> <li>Bugfix update for Allwinner boards</li> <li>Update for H3 based boards</li> </ul>"},{"location":"Release_Changelog/#v500-2016-02-12","title":"v5.00 (2016-02-12)","text":"<ul> <li>mainline kernel for Allwinner based boards upgraded to 4.4.1</li> <li>Allwinner audio driver playback and capture on kernel 4.4.1, UAS, USB OTG, battery readings,</li> <li>added Marvel Armada kernel 3.10.96, 4.4.1 and patches for changing mPCI to SATA</li> <li>added Cubox / Hummingboard kernel 4.4.1 (serial console only)</li> <li>firstrun does autoreboot only if needed: wheezy and some legacy kernels.</li> <li>added motd to /etc/updated.motd \u2026 redesign, added battery info for Allwinner boards, bugfix, coloring</li> <li>fixed temperature reading on Cubox / Hummingboard legacy kernel</li> <li>fixed FB turbo building on Allwinner</li> <li>fixed NAND install on A10 boards (Legacy kernel only)</li> <li>fixed USB boot, added PWM on mainline</li> <li>fixed Banana PRO/+ onboard wireless on mainline kernel - running with normal Banana DT.</li> <li>readded USB sound</li> <li>added A13 Olimex SOM</li> <li>added LIRC GPIO receive and send driver for legacy Allwinner</li> <li>added LED MMC activity to mainline kernels for Cubietruck and Cubieboard A10</li> <li>build script: option to build images with F2FS root filesystem for Allwinner boards</li> <li>build script: added alternative kernel for Lemaker Guitar (NEXT), Cubox (DEV)</li> </ul>"},{"location":"Release_Changelog/#v481-2015-12-28","title":"v4.81 (2015-12-28)","text":"<ul> <li>complete build script rework</li> <li>new development kernel package linux-image-dev-sunxi (4.4RC6) for Allwinner boards</li> <li>added Lemaker Guitar, kernel 3.10.55</li> <li>added Odroid XU3/4, kernel 3.10.94 and mainline 4.2.8</li> <li>mainline kernel for Allwinner based boards upgraded to 4.3.3</li> <li>Udoo mainline upgraded to 4.2.8, legacy to 3.14.58</li> <li>cubox / hummingboard upgraded to 3.14.58, added mainline kernel 4.4</li> <li>fixed Jessie RTC bug, systemd default on Jessie images</li> </ul>"},{"location":"Release_Changelog/#v470-2015-11-30","title":"v4.70 (2015-11-30)","text":"<ul> <li>Bugfix update(apt-get update &amp;&amp; apt-get upgrade)</li> <li>small changes and fixes</li> </ul>"},{"location":"Release_Changelog/#v46-2015-11-24","title":"v4.6 (2015-11-24)","text":"<ul> <li>Update only (apt-get update &amp;&amp; apt-get upgrade)</li> <li>mainline kernel for Allwinner based boards upgraded to 4.2.6</li> <li>Legacy kernel for Allwinner based boards upgraded to 3.4.110</li> <li>added new board: Udoo Neo</li> <li>added USB printer, CAN, CMA, ZSWAP, USB video class, CDROM fs, sensor classs, \u2026 to Allwinner mainline kernel</li> <li>armbian-install scripts rewrite. Now it\u2019s possible to install to any partition.</li> <li>fixed nand install for Allwinner A10 based boards: Cubieboard 1 / Lime A10</li> <li>universal upgrade script bugfix / rewrite.</li> <li>8 channel HDMI support for legacy Allwinner kernel</li> <li>unattended upgrade fixed</li> <li>sunxi tools fixed</li> <li>added two new options to build script: keep kernel config and use_ccache</li> <li>added kernel version to motd</li> </ul>"},{"location":"Release_Changelog/#v45-2015-10-14","title":"v4.5 (2015-10-14)","text":"<ul> <li>mainline kernel upgraded to 4.2.3 for Allwinner based boards</li> <li>legacy kernel for Allwinner compiled from new sources (linux-sunxi)</li> <li>udoo mainline upgraded to 4.2.3</li> <li>cubox / hummingboard upgraded to 3.14.54</li> <li>changed kernel naming: A10 = linux-image-sun4i, A20 = linux-image-sun7i</li> <li>new boards: Banana M2, Orange+(A31S), Cubieboard 1, Cubieboard 2 Dual SD, Lime A10</li> <li>fixed Udoo legacy wireless problems</li> <li>fixed Jessie boot problems by disabling systemd. It\u2019s possible to re-enable within boot scripts</li> <li>added ramlog to Jessie because we don\u2019t have systemd anymore</li> <li>changed wireless driver for Cubietruck and Banana PRO (now it\u2019s ap6210)</li> <li>added ZRAM to mainline kernel</li> <li>fixed dvbsky modules</li> </ul> <p>and a bunch of small fixes.</p>"},{"location":"Release_Changelog/#v44-2015-10-01","title":"v4.4 (2015-10-01)","text":"<p>Images:</p> <ul> <li>mainline kernel upgrade to 4.2.2 (Allwinner, Udoo Quad),</li> <li>legacy kernel upgraded to 3.4.109 (Allwinner),</li> <li>added I2C support and bunch of multimedia modules (DVB) (mainline Allwinner),</li> <li>Udoo quad images with fixed legacy kernel 3.14.28,</li> <li>Cubox and Hummingboard kernel upgrade to 3.14.53,</li> <li>brcmfmac driver fixes for mainline kernel (Banana PRO / Cubietruck)</li> <li>performance tweak: choosing a closest Debian mirror (Debian images)</li> <li>added Astrometa DVB firmware and dvb-tools</li> <li>added Nikkov SPDIF / I2S recent patch (legacy Allwinner)</li> <li>added patch for rtl8192cu: Add missing case in rtl92cu_get_hw_reg (Lamobo R1)</li> <li>bigger NAND boot partition on install</li> <li>install script bug fixes</li> </ul> <p>Script:</p> <ul> <li>force apt-get update on older rootfs cache,</li> <li>image harden manipulation security,</li> <li>packages NAND/FAT/same version install faling fixed,</li> <li>image shrinking function rework,</li> <li>better packages installation install checking,</li> <li>added Debian keys to suppress warnings in debootstrap process,</li> <li>added fancy progress bars,</li> <li>added whiptail downloading prior to usage (bugfix).</li> </ul>"},{"location":"Release_Changelog/#v43-2015-09-17","title":"v4.3 (2015-09-17)","text":"<ul> <li>kernel 4.2 for Allwinner based boards</li> <li>kernel 4.2 for Udoo Quad</li> <li>walk-around if ethernet is not detected on some boards due to RTC not set(?)</li> <li>update is done (semi) automatic if you are using Armbian 4.2. You only need to issue command: apt-get update &amp;&amp; apt-get upgrade. If you are coming from older system, check Documentation</li> <li>U-boot on R1 is now updated to latest stable version (2015.07)</li> <li>Fixed AW SOM. Working with latest u-boot but you need to build image by yourself.</li> <li>Enabled whole USB net and HID section in kernel for Allwinner boards v4.2</li> <li>Fixed upgrade script \u2013 only some minor bugs remains.</li> <li>Fixes to build script that it\u2019s working under Ubuntu 15.04</li> <li>Adding Bananapi Wireless driver (ap6210) back to legacy kernel</li> <li>Udoo official kernel (3.14.28) not updated due too many troubles.</li> </ul>"},{"location":"Release_Changelog/#v42-2015-09-01","title":"v4.2 (2015-09-01)","text":"<p>Images:</p> <ul> <li>Upgraded NAND / SATA installer. Possible to install to SATA/NAND boot in one step.</li> <li>Easy kernel switching between old 3.4 and 4.x</li> <li>Automatic kernel updating (to disable comment armbian repo /etc/apt/sources.list)</li> <li>Allwinner boards share one 4.x kernel and two 3.4</li> <li>All boards share the same revision number</li> <li>One minimal Ubuntu Desktop per board (Wicd, Firefox, Word)</li> <li>u-boot v2015.07 for most boards</li> <li>Aufs file system support</li> <li>kernel 4.1.6 and 3.4.108</li> <li>Added Orangepi Mini, Cubieboard 1 (4.x only), Udoo with official kernel</li> <li>Repository for Wheezy, Jessie and Trusty</li> <li>enabled USB audio in kernel 4.x</li> <li>kernel headers fixed. No need to rebuild when you update the kernel.</li> <li>fixed boot scripts that can load from FAT partition too</li> <li>removed Cubox binnary repository because of troubles</li> <li>Docker support (kernel 4.x). Already here for a while / forget to mention.</li> <li>nodm change default login</li> </ul> <p>Build script:</p> <ul> <li>changed structure: sources now in folder sources, output is what we produce, deb in one folder</li> <li>expanded desktop part</li> <li>possible to build all images at once, create package repository</li> <li>SD card initial size is 4Gb, variable transfered into configuration.sh</li> <li>Avaliable board list is now created from file configuration.sh</li> <li>Fixed image shrinking problem</li> <li>Patching part rework</li> <li>Using first FAT boot partition now fixes boot scripts</li> <li>Uboot TAG moved to configuration.sh and differs for some boards</li> <li>new variables for source branches. Only too remove errors when checking out</li> </ul>"},{"location":"Release_Changelog/#v41-2015-08-05","title":"v4.1 (2015-08-05)","text":"<ul> <li>Added desktop image</li> <li>U-Boot 2015.07 with many new features</li> <li>Added auto system update via repository apt.armbian.com</li> <li>Root password change is initialized at first boot.</li> <li>3.4.108 kernel fixes, 4.1.4 Allwinner Security System</li> </ul>"},{"location":"Release_Changelog/#v40-2015-07-12","title":"v4.0 (2015-07-12)","text":"<ul> <li>Fixed stability issues, temperature display in 4.x</li> <li>Kernel upgrades to 3.4.108 and 4.1.2</li> </ul>"},{"location":"Release_Changelog/#v39-2015-06-11","title":"v3.9 (2015-06-11)","text":"<ul> <li>Bugfix release</li> <li>Kernel 4.0.5 traffic control support</li> <li>SATA / USB install fixed on kernel 4.x</li> <li>Added 256Mb emergency swap area, created automatically @first boot</li> </ul>"},{"location":"Release_Changelog/#v38-2015-05-21","title":"v3.8 (2015-05-21)","text":"<ul> <li>Bugfix release: Cubietruck images successfully booted on Cubietruck. I waited for automatic reboot than tested remote login.</li> <li>Kernel 4.0.4 added support for power on/off button</li> <li>Both: Jessie fixed, Ethernet init fixed (uboot)</li> <li>armbian.com introduction</li> </ul>"},{"location":"Release_Changelog/#v37-2015-05-14","title":"v3.7 (2015-05-14)","text":"<ul> <li>Kernel 4.0.3 some new functionality</li> <li>Kernel 3.4.107 added sunxi display manager to change FB on demand</li> <li>Both: Ubuntu and jessie install errors fixed, removed busybox-syslogd and changed to default logger due to problems in Jessie and Ubuntu, apt-get upgrade fixed, documentations update, Uboot fixed to 2015.4 \u2013 no more from dev branch</li> <li>Build script rework - image size shrink to actual size, possible to have fat boot partition on SD card, several script bug fixes</li> </ul>"},{"location":"Release_Changelog/#v36-2015-04-29","title":"v3.6 (2015-04-29)","text":"<ul> <li>Kernel 3.19.6</li> <li>Kernel 3.4.107 with better BT loading solution</li> </ul>"},{"location":"Release_Changelog/#v35-2015-04-18","title":"v3.5 (2015-04-18)","text":"<ul> <li>Kernel 3.19.4: fixed AP mode, fixed USB, added 8192CU module</li> <li>Common: apt-get upgrade ready but not enabled yet, serial console fixed, fixed hostapd under jessie, easy kernel switching, latest patched hostapd for best performance \u2013 normal and for realtek adaptors, auto IO scheduler script</li> <li>Build script: everything packed as DEB</li> </ul>"},{"location":"Release_Changelog/#v34-2015-03-28","title":"v3.4 (2015-03-28)","text":"<ul> <li>Kernel 3.19.3: docker support, apple hid, pmp, nfsd, sata peformance fix</li> <li>Kernel 3.4.106: pmp, a20_tp - soc temp sensor</li> <li>Common: console setup fixed, headers bugfix, nand install fix</li> <li>Build script: kernel build only, custom packets install, hardware accelerated desktop build as option</li> </ul>"},{"location":"Release_Changelog/#v33-2015-02-28","title":"v3.3 (2015-02-28)","text":"<ul> <li>Kernel 3.19.0: many new functionality and fixes.</li> <li>Bugfixes: CT wireless works in all kernels</li> </ul>"},{"location":"Release_Changelog/#v32-2015-01-24","title":"v3.2 (2015-01-24)","text":"<ul> <li>Possible to compile external modules on both kernels</li> <li>Kernel 3.19.0 RC5</li> <li>Bugfixes: install script, headers, bashrc, spi</li> </ul>"},{"location":"Release_Changelog/#v31-2015-01-16","title":"v3.1 (2015-01-16)","text":"<ul> <li>Kernel 3.19.0 RC4</li> <li>Added Cubieboard 1 images</li> <li>Dualboot for CB2 and CT dropped due to u-boot change. Now separate images.</li> <li>New user friendly SATA + USB installer, also on mainline</li> </ul>"},{"location":"Release_Changelog/#v30-2014-12-29","title":"v3.0 (2014-12-29)","text":"<ul> <li>Kernel 3.18.1 for mainline image</li> <li>Added Ubuntu Trusty (14.04 LTS) image</li> <li>Bugfixes: auto packages update</li> </ul>"},{"location":"Release_Changelog/#v29-2014-12-03","title":"v2.9 (2014-12-03)","text":"<ul> <li>Kernel 3.4.105 with new MALI driver and other fixes</li> <li>Added: Jessie image</li> <li>Major build script rewrite - much faster image building</li> <li>Fixed: failed MIN/MAX settings</li> </ul>"},{"location":"Release_Changelog/#v28-2014-10-17","title":"v2.8 (2014-10-17)","text":"<ul> <li>Added: ondemand governor, fhandle, squashfs and btrfs</li> <li>Removed: bootsplash, lvm, version numbering in issue</li> <li>Fixed: custom scripts, Jessie upgrade</li> <li>Disabled: BT firmware loading, enable back with: insserv brcm40183-patch</li> <li>Added working driver for RT 8188C, 8192C</li> </ul>"},{"location":"Release_Changelog/#v27-2014-10-01","title":"v2.7 (2014-10-01)","text":"<ul> <li>Kernel 3.4.104</li> <li>Automatic Debian system updates</li> <li>VGA output is now default but if HDMI is attached at first boot than it switch to HDMI for good. After first restart!</li> <li>Fixed NAND install script. /boot is mounted by default. Kernel upgrade is now the same as on SD systems.</li> <li>Cubieboard2 - disabled Cubietruck dedicated scripts (BT firmware, LED disable)</li> <li>Added network bonding and configuration for \u201cnotebook\u201d mode (/etc/network/interfaces.bonding)</li> <li>IR receiver is preconfigured with default driver and LG remote (/etc/lirc/lircd.conf), advanced driver is present but disabled</li> <li>Added SPI and LVM functionality</li> <li>Added Debian logo boot splash image</li> <li>Added build essentials package</li> </ul>"},{"location":"Release_Changelog/#v26-2014-08-22","title":"v2.6 (2014-08-22)","text":"<ul> <li>Kernel 3.4.103 and 3.17.0-RC1</li> <li>Added GPIO patch (only for 3.4.103)</li> </ul>"},{"location":"Release_Changelog/#v25-2014-08-02","title":"v2.5 (2014-08-02)","text":"<ul> <li>Kernel 3.4.101 and 3.16.0-RC4</li> <li>major build script rewrite</li> </ul>"},{"location":"Release_Changelog/#v24-2014-07-11","title":"v2.4 (2014-07-11)","text":"<ul> <li>Kernel 3.4.98</li> <li>default root password (1234) expires at first login</li> <li>build script rewrite, now 100% non-interactive process, time zone as config option</li> <li>bug fixes: removed non-existing links in /lib/modules</li> </ul>"},{"location":"Release_Changelog/#v23-2014-07-02","title":"v2.3 (2014-07-02)","text":"<ul> <li>Kernel 3.4.96</li> <li>cpuinfo serial number added</li> <li>bug fixes: stability issues - downclocked to factory defaults, root SSH login enabled in Jessie, dedicated core for eth0 fix</li> <li>disp_vsync kernel patch</li> </ul>"},{"location":"Release_Changelog/#v22-2014-06-26","title":"v2.2 (2014-06-26)","text":"<ul> <li>Kernel 3.4.94</li> <li>Added Jessie distro image</li> <li>Updated hostapd, bashrc, build script</li> <li>bug fixes: disabled upgrade and best mirror search @firstboot, bluetooth enabler fix</li> <li>MD5 hash image protection</li> </ul>"},{"location":"Release_Changelog/#v21-2014-06-13","title":"v2.1 (2014-06-13)","text":"<ul> <li>Kernel 3.4.93</li> <li>Onboard Bluetooth finally works</li> <li>Small performance fix</li> <li>Allwinner Security System cryptographic accelerator</li> </ul>"},{"location":"Release_Changelog/#v20-2014-06-02","title":"v2.0 (2014-06-02)","text":"<ul> <li>Kernel 3.4.91 with many fixes</li> <li>Cubieboard 2 stability issues fix</li> <li>eth0 interrupts are using dedicated core</li> <li>Global bashrc /etc/bash.bashrc</li> <li>Verbose output and package upgrade @ first run</li> </ul>"},{"location":"Release_Changelog/#v19-2014-04-27","title":"v1.9 (2014-04-27)","text":"<ul> <li>Kernel headers included</li> <li>Clustering support</li> <li>Advanced\u00a0IR driver with RAW RX and TX</li> <li>Bluetooth ready\u00a0(working only with supported USB devices)</li> <li>Bugfixes: VLAN, login script, build script</li> <li>New packages: lirc, bluetooth</li> </ul>"},{"location":"Release_Changelog/#v18-2014-03-27","title":"v1.8 (2014-03-27)","text":"<ul> <li>Kernel 3.4.79</li> <li>Alsa I2S patch\u00a0+ basic ALSA utils</li> <li>Performance tweaks: CPU O.C. to 1.2Ghz, IO scheduler NOOP for SD, CFQ for sda, journal data writeback enabled</li> <li>Avaliable memory = 2000MB</li> <li>Minimized console output at boot</li> <li>MAC address from chip ID, manual optional</li> <li>Latest (Access point) hostapd, 2.1 final release</li> <li>Login script shows current CPU temp, hard drive temp &amp; actual free memory</li> <li>Fastest Debian mirror auto selection @first boot</li> <li>New packages: alsa-utils netselect-apt sysfsutils hddtemp bc</li> </ul>"},{"location":"Release_Changelog/#v17-2014-02-26","title":"v1.7 (2014-02-26)","text":"<ul> <li>Flash media performance tweaks, reduced writings, tmp &amp; logging to RAM with ramlog app \u2013 sync logs on shutdown</li> <li>SATA install script</li> <li>Dynamic MOTD: Cubieboard / Cubietruck</li> <li>Disabled Debian logo at startup</li> <li>New packages: figlet toilet screen hdparm libfuse2 ntfs-3g bash-completion</li> </ul>"},{"location":"Release_Changelog/#v16-2014-02-09","title":"v1.6 (2014-02-09)","text":"<ul> <li>Added support for Cubieboard 2</li> <li>Build script creates separate images for VGA and HDMI</li> <li>NAND install script added support for Cubieboard 2</li> </ul>"},{"location":"Release_Changelog/#v152-2014-02-07","title":"v1.52 (2014-02-07)","text":"<ul> <li>Various kernel tweaks, more modules enabled</li> <li>Root filesystem can be moved to USB drive</li> <li>Bugfixes: NAND install script</li> </ul>"},{"location":"Release_Changelog/#v15-2014-01-22","title":"v1.5 (2014-01-22)","text":"<ul> <li>Hotspot Wifi Access Point / Hostapd 2.1</li> <li>Bugfixes: MAC creation script, SSH keys creation, removed double packages, \u2026</li> <li>Graphics desktop environment upgrade ready</li> </ul>"},{"location":"Release_Changelog/#v14-2014-01-12","title":"v1.4 (2014-01-12)","text":"<ul> <li>Patwood\u2019s kernel 3.4.75+ with many features</li> <li>Optimized CPU frequency scaling 480-1010Mhz with interactive governor</li> <li>NAND install script included</li> <li>Cubietruck MOTD</li> <li>USB redirector\u00a0\u2013 for sharing USB over TCP/IP</li> </ul>"},{"location":"Release_Changelog/#v13-2014-01-03","title":"v1.3 (2014-01-03)","text":"<ul> <li>CPU frequency scaling 30-1000Mhz</li> <li>Patch for gpio</li> </ul>"},{"location":"Release_Changelog/#v123-2014-01-01","title":"v1.23 (2014-01-01)","text":"<ul> <li>added HDMI version</li> <li>added\u00a0sunxi-tools</li> <li>build.sh transfered to\u00a0Github repository</li> <li>disabled LED blinking</li> </ul>"},{"location":"Release_Changelog/#v12-2013-12-26","title":"v1.2 (2013-12-26)","text":"<ul> <li>changed kernel and hardware config repository</li> <li>kernel 3.4.61+</li> <li>wi-fi working</li> <li>updated manual how-to</li> </ul>"},{"location":"Release_Changelog/#v10-2013-12-24","title":"v1.0 (2013-12-24)","text":"<ul> <li>total memory available is 2G (disabled memory for GPU by default)</li> <li>gigabit ethernet is fully operational</li> <li>sata driver enabled</li> <li>root filesystem autoresize</li> <li>MAC address fixed at first boot</li> <li>Kernel 3.4.75</li> <li>root password=1234</li> <li>Bugs: wifi and BT not working</li> </ul>"},{"location":"User-Guide_Advanced-Configuration/","title":"Advanced features and tasks","text":"<p>While the underlying operating system offers tools and processes to make customizations, the preferred method to change most settings is using the interactive armbian-config tool which is shipped with all Armbian images. It also provides means to install preconfigured applications and advanced services.</p> <p>Usually, all of the following commands require elevated permissions, and must be run as root or prefixed by the sudo command.</p>"},{"location":"User-Guide_Advanced-Configuration/#keyboard-layout","title":"Keyboard layout","text":"<p>This is typically handled by armbian-config. For some corner cases, changing the keyboard layout can also be done with:</p> Bash<pre><code>dpkg-reconfigure keyboard-configuration\n</code></pre> <p>If the chosen standard is not available with the previous command, you may also need to set the keymap config.</p> Bash<pre><code># Check the actual keymap config\nlocalectl status | grep -i keymap\n\n# Set the desired keymap config. In the example below it is set to 'br-abnt2'\nlocalectl set-keymap br-abnt2\n</code></pre>"},{"location":"User-Guide_Advanced-Configuration/#system-language","title":"System language","text":"<p>This is typically handled by armbian-config. If necessary, to handle it with system tools, for Debian run:</p> Bash<pre><code>dpkg-reconfigure locales\n</code></pre> <p>And for Ubuntu</p> Bash<pre><code>update-locale LANG=[options] &amp;&amp; dpkg-reconfigure locales\n</code></pre>"},{"location":"User-Guide_Advanced-Configuration/#console-font-and-codepage","title":"Console font and codepage","text":"Bash<pre><code>dpkg-reconfigure console-setup\n</code></pre>"},{"location":"User-Guide_Advanced-Configuration/#time-zone","title":"Time zone","text":"<p>This is typically handled by armbian-config. If necessary, one can also run:</p> Bash<pre><code>dpkg-reconfigure tzdata\n</code></pre>"},{"location":"User-Guide_Advanced-Configuration/#default-sound-output","title":"Default sound output","text":"<p>Note</p> <p>In recent versions of Debian and Ubuntu, <code>pulseaudio</code> got replaced by <code>pipewire</code>. The following suggestions won\u2019t work in that case.</p> <p>To check the available sound output options (\u201csinks\u201d) with pulseaudio:</p> Bash<pre><code>pacmd list-sinks | less\n</code></pre> <p>The default sink will be marked with an asterisk \u201c*\u201c. Press q to exit.</p> <p>To define a new default sound output:</p> Bash<pre><code>pacmd set-default-sink &lt;NAME-OF-DESIRED-OPTION&gt;\n</code></pre> <p>The name of HDMI sound output devices may change accordingly to the device. If you don\u2019t want to deal with different names, you can run:</p> Bash<pre><code>pacmd set-default-sink $(pactl list short sinks | grep -i 'hdmi' | awk '{print $2}')\n</code></pre> <p>The command to define the default sink is not persistent. To make it persistent, add it to the file <code>~/.bashrc</code>.</p>"},{"location":"User-Guide_Advanced-Configuration/#fix-hdmi-screen-resolution-for-sunxiallwinner-soc","title":"Fix HDMI screen resolution for SunXi/Allwinner SoC","text":"<p>In rare cases, some SunXi/Allwinner boards failed to detect Full-HD support for HDMI and boot with only 720p. This issue should now be resolved, and the following steps are provided only for reference if it still occurs.</p> <p>Legacy versions</p> <p>Open the <code>/boot/boot.cmd</code> file with an editor of your choice (e.g. <code>nano</code>) and add or change the <code>disp.screen0_output_mode</code> option to the kernel command line. For a fixed mode (e.g. 1280x720 at 60 Hz), set it to:</p> Bash<pre><code>disp.screen0_output_mode=1280x720p60\n</code></pre> <p>Then run</p> Bash<pre><code>mkimage -C none -A arm -T script -d /boot/boot.cmd /boot/boot.scr\n</code></pre>"},{"location":"User-Guide_Advanced-Configuration/#enable-a-custom-screen-resolution-within-xorg","title":"Enable a custom screen resolution within X.Org","text":"<p>Sometimes, not all desired resolutions are supported out of the box. The following short howto shows how to enable a custom resolution and add it to your X.Org configuration. It is based on this forum post by user @maxlinux2000 (Thanks!). The <code>xrandr</code> and <code>cvt</code> commands must be executed as the current user in a graphical session, not by the root user!</p> <p>First, find the matching HDMI output (the <code>x11-xserver-utils</code> package must be installed):</p> Bash<pre><code>xrandr --listmonitors\n</code></pre> <p>Then, calculate the VESA CVT mode line. The following command does this for a custom resolution of 1440x900.</p> Bash<pre><code>cvt 1440 900\n</code></pre> <p>The command will output a new modeline. For our example, it may look like this:</p> Text Only<pre><code># 1440x900 59.89 Hz (CVT 1.30MA) hsync: 55.93 kHz; pclk: 106.50 MHz\nModeline \"1440x900_60.00\"  106.50  1440 1528 1672 1904  900 903 909 934 -hsync +vsync )\n</code></pre> <p>The new modeline can then be used directly to create and add the new mode, and enable it. The following commands will do that for the output device HDMI-1.</p> Bash<pre><code>xrandr --newmode \"1440x900_60.00\" 106.50 1440 1528 1672 1904 900 903 909 934 -hsync +vsync\nxrandr --addmode HDMI-1 1440x900_60.00\nxrandr --output HDMI-1 --mode 1440x900_60.00\n</code></pre> <p>If it works well, the new mode can also be added to X.Org\u2019s configuration in <code>/etc/X11/xorg.conf.d/</code> to make it permanently available/active. Otherwise, these commands will have to be executed after every reboot. To load this resolution automatically after starting the device, add the following section to e.g. <code>/etc/X11/xorg.conf.d/40-monitor.conf</code> (create the file if it does not exist):</p> Text Only<pre><code>Section \"Monitor\"\n    Identifier \"HDMI-1\"\n    Modeline \"1440x900_60.00\" 106.50 1440 1528 1672 1904 900 903 909 934 -hsync +vsync\n    Option \"PreferredMode\" \"1440x900\"\nEndSection\n</code></pre> <p>After a restart, the graphical session should automatically be shown in the chosen resolution.</p>"},{"location":"User-Guide_Advanced-Configuration/#alter-the-cpu-frequency","title":"Alter the CPU frequency","text":"<p>Legacy versions</p> <p>Some boards allow to adjust the CPU speed by editing the file <code>/etc/default/cpufrequtils</code> and alter the  min_speed and/or max_speed variable. Changing these values require restarting <code>cpufrequtils.service</code> to activate the new settings:</p> Bash<pre><code>systemctl restart cpufrequtils.service\n</code></pre>"},{"location":"User-Guide_Advanced-Configuration/#swap-for-experts","title":"Swap for experts","text":"<p>By default, Armbian implements ZRAM (writing nothing to \u2018disk\u2019, but compressing memory pages in RAM). In case you often run into out-of-memory (OOM) errors and your device has some capable storage (e.g. a securely attached NVMe or SATA SSD), you might want to use ZSWAP instead.</p> <p>Check whether your kernel has zswap enabled. If yes, the following command</p> Bash<pre><code>dmesg | grep zswap\n</code></pre> <p>should return some output. If that is the case, create a swapfile or a swap partition the traditional way: edit <code>/etc/default/armbian-zram-config</code> so that it reads <code>SWAP=false</code>. Reboot, and you\u2019re done.</p> <p>Zswap performs a lot better than the combination of ZRAM and \u2018swap on disk\u2019 in parallel.</p>"},{"location":"User-Guide_Advanced-Configuration/#switch-or-downgrade-kernels","title":"Switch or downgrade kernels","text":"<p>This is typically handled by armbian-config.</p> Bash<pre><code>armbian-config --cmd KER001\n</code></pre> <p>In rare cases, it can be necessary to downgrade a kernel package, e.g. to fall back to a previous version.</p> <p>Danger</p> <p>Version dependencies between packages can create serious conflicts when attempting a package downgrade. If you force anything here, you can easily destroy your system beyond the point of repair. Don\u2019t use that command lightly and better ask twice.</p> Bash<pre><code>apt install linux-image-current-rockchip64=25.5\n</code></pre>"},{"location":"User-Guide_Advanced-Configuration/#build-a-wireless-driver","title":"Build a wireless driver","text":"<p>The kernels provided by the project should contain the drivers, modules, and firmware to support most commonly used network devices/dongles. If you encounter that you have to build your own module and load it, the following example shows the general procedure because most modules follow the same structure and setup. It is, however, rarely necessary to build and load so-called \u201cout-of-tree\u201d kernel modules as shown in this example. Even the module we use here as an example is already supported by the current kernels.</p> <p>First, building a module always requires having the kernel headers installed. The correct version can be installed with:</p> Bash<pre><code>armbian-config --cmd HEAD01\n</code></pre> <p>Then download the driver\u2019s sources. Most drivers can probably be found in a Git repository like in our example.</p> Bash<pre><code>git clone https://github.com/morrownr/8821au-20210708.git\ncd 8821au-20210708\n</code></pre> <p>The build and install instructions can usually be found on the driver\u2019s homepage or in a file called <code>README.md</code> in the source. Read these instructions carefully. Usually, the following commands will suffice and result in an output as shown below.</p> Bash<pre><code>make\nmake install\n</code></pre> Build log Text Only<pre><code>make ARCH=arm64 CROSS_COMPILE= -C /lib/modules/6.6.62-current-sunxi64/build M=/root/8821au-20210708  modules\nmake[1]: Entering directory '/usr/src/linux-headers-6.6.62-current-sunxi64'\n  CC [M]  /root/8821au-20210708/core/rtw_cmd.o\n  CC [M]  /root/8821au-20210708/core/rtw_security.o\n  CC [M]  /root/8821au-20210708/core/rtw_debug.o\n  CC [M]  /root/8821au-20210708/core/rtw_io.o\n  CC [M]  /root/8821au-20210708/core/rtw_ioctl_query.o\n  CC [M]  /root/8821au-20210708/core/rtw_ioctl_set.o\n  CC [M]  /root/8821au-20210708/core/rtw_ieee80211.o\n  CC [M]  /root/8821au-20210708/core/rtw_mlme.o\n  CC [M]  /root/8821au-20210708/core/rtw_mlme_ext.o\n  ...\n  [ goes on for a while ]\n  ...\n  LD [M]  /root/8821au-20210708/8821au.o\n  MODPOST /root/8821au-20210708/Module.symvers\n  CC [M]  /root/8821au-20210708/8821au.mod.o\n  LD [M]  /root/8821au-20210708/8821au.ko\nmake[1]: Leaving directory '/usr/src/linux-headers-6.6.62-current-sunxi64'\n</code></pre> <p>If make succeeded, attempt to load the driver and check the <code>dmesg</code> output.</p> Bash<pre><code>insmod 8821au.ko\nusbcore: registered new interface driver rtl8821au\n</code></pre> <p>If everything was successful, plug the USB wireless adaptor in and proceed with the network configuration.</p>"},{"location":"User-Guide_Advanced-Configuration/#toggle-boot-output","title":"Toggle boot output","text":"<p>Boot parameters are edited or changed directly in <code>/boot/boot.cmd</code> (not recommended) or via variables in <code>/boot/armbianEnv.txt</code>:</p> Diff<pre><code>- console=both\n+ console=serial\n</code></pre> <p>To disable the console entirely (also not recommended and only as an example) one would set <code>console=none</code>.</p> <p>To recompile <code>boot.cmd</code> to <code>boot.scr</code> if it was changed:</p> Bash<pre><code>mkimage -C none -A arm -T script -d /boot/boot.cmd /boot/boot.scr\n</code></pre> <p>And reboot.</p> <p>The serial console on imx6 boards is <code>ttymxc0</code> (Hummingboard, Cubox-i) or <code>ttymxc1</code> (Udoo).</p>"},{"location":"User-Guide_Advanced-Configuration/#toggle-boot-verbosity","title":"Toggle boot verbosity","text":"<p>To change the boot verbosity, alter the <code>verbosity=</code> line in <code>/boot/armbianEnv.txt</code>. The lower the value, the lower the verbosity. The default is <code>1</code> and the maximum is <code>7</code>.</p> <p>Legacy versions</p> <p>Using Armbian from version 5.05 to 5.20, you have to touch or delete <code>/boot/.force-verbose</code> to increase the boot verbosity.</p>"},{"location":"User-Guide_Advanced-Configuration/#enable-boot-logs-for-inspection","title":"Enable boot logs for inspection","text":"<p>If your SBC behaves strange, the first step is to check the power supply and the integrity of the boot media as detailed in the Troubleshooting section. Also, run</p> Bash<pre><code>armbianmonitor -c \"$HOME\"\n</code></pre> <p>Then look into your kernel logs. Armbian also provides a tool that grabs some information and pastes it to an online pasteboard service. Please increase the boot verbosity to its maximum level (<code>verbosity=7</code>) as shown above, reboot and then run:</p> Bash<pre><code>sudo armbianmonitor -u\n</code></pre> <p>Then copy and past the URL of your log to the forum, mail, etc.</p>"},{"location":"User-Guide_Advanced-Configuration/#apt-mirror-selection","title":"APT mirror selection","text":"<p>Armbian has its own APT repository <code>http://apt.armbian.com</code> and mirrors for armbian-specific packages. The default domain is a round-robin to all mirrors. If you are having trouble updating or expereince slow speeds, you may want to choose a specific mirror.</p> <p>First, make sure that you have the <code>jq</code> package installed:</p> Bash<pre><code>apt install -y jq\n</code></pre> <p>To get a list of available mirrors from our <code>https://apt.armbian.com/mirrors</code> endpoint in JSON format, run:</p> Bash<pre><code>curl -s http://apt.armbian.com/mirrors | jq\n</code></pre> <p>You will see a result set similar to this (shortened), listing mirrors by region:</p> JSON<pre><code>{\n  \"AS\": [\n    \"http://mirror.twds.com.tw/armbian-apt/\",\n    \"http://mirror.albony.in/armbian/\",\n    \"http://jp.mirrors.naho.moe/armbian/\",\n    ...\n  ],\n  \"EU\": [\n    \"http://netcup-02.armbian.com/apt/\",\n    \"http://fi.mirror.armbian.de/apt/\",\n    \"http://armbian.nardol.ovh/apt/\",\n    ...\n  ],\n  \"NA\": [\n    \"http://mirrors.jevincanders.net/armbian/apt/\"\n  ],\n  \"OC\": [\n    \"http://au.sbcmirror.org/armbian/apt/\"\n  ],\n  \"default\": [\n    \"http://mirrors.jevincanders.net/armbian/apt/\",\n    \"http://netcup-02.armbian.com/apt/\",\n    \"http://fi.mirror.armbian.de/apt/\",\n    ...\n  ]\n}\n</code></pre> <p>Choose a mirror, edit <code>/etc/apt/sources.list.d/armbian.sources</code>, and replace the URL <code>http(s)://apt.armbian.com</code> with your preferred mirror.</p>"},{"location":"User-Guide_Advanced-Configuration/#install-docker","title":"Install Docker","text":"<p>Install either the minimal package \u2026</p> Bash<pre><code>armbian-config --CON001\n</code></pre> <p>\u2026 or the fully featured one.</p> Bash<pre><code>armbian-config --CON002\n</code></pre> <p>To test if Docker works correctly:</p> Bash<pre><code>docker run hello-world\n</code></pre> <p>If you get that kind of output, then Docker install went fine:</p> Bash<pre><code>Hello from Docker!\nThis message shows that your installation appears to be working correctly.\n</code></pre>"},{"location":"User-Guide_Armbian-Config/","title":"Armbian Config","text":"<pre><code>flowchart LR\n  A[armbian-config] -----&gt; B[\"System\"];\n  A[armbian-config] -----&gt; C[\"Network\"];\n  A[armbian-config] -----&gt; D[\"Localisation\"];\n  A[armbian-config] -----&gt; E[\"Software\"];\n  A[armbian-config] -----&gt; F[\"Help\"];</code></pre> <p>Utility for configuring your board, adjusting services, and installing applications. It comes with Armbian by default.</p> <p>To start the Armbian configuration utility, use the following command: Text Only<pre><code>armbian-config\n</code></pre></p>"},{"location":"User-Guide_Armbian-Config/#adding-a-new-feature","title":"Adding a new feature","text":"<p>Please check instructions.</p>"},{"location":"User-Guide_Armbian-Config/#sources","title":"Sources","text":"<p>armbian/configng</p>"},{"location":"User-Guide_Armbian-Config/#installation-on-3rd-party-linux-os","title":"Installation on 3rd party Linux OS","text":"<p>This tool is tailored to works best with Armbian Linux but it has also been automatically tested on:</p> <ul> <li>Debian Bookworm</li> <li>Ubuntu Jammy</li> <li>Ubuntu Noble</li> </ul> <p>In theory it should work on any systemd APT based Linux distributions such as: Linux Mint, Elementary OS, Kali Linux, MX Linux, Parrot OS, Proxmox, Raspberry Pi OS, \u2026</p> Text Only<pre><code>wget -qO - https://apt.armbian.com/armbian.key | gpg --dearmor | \\\nsudo tee /usr/share/keyrings/armbian.gpg &gt; /dev/null\ncat &lt;&lt; EOF | sudo tee /etc/apt/sources.list.d/armbian-config.sources &gt; /dev/null\nTypes: deb\nURIs: https://github.armbian.com/configng\nSuites: stable\nComponents: main\nSigned-By: /usr/share/keyrings/armbian.gpg\nEOF\nsudo apt update\nsudo apt -y install armbian-config\n</code></pre>"},{"location":"User-Guide_Armbian-Software/","title":"Armbian Software","text":"<p>Lightweight, Secure, and Optimized Services for Embedded Systems</p>"},{"location":"User-Guide_Armbian-Software/#overview","title":"Overview","text":"<p>Armbian Software, accessible via the <code>armbian-config</code> utility, empowers you to quickly deploy a variety of preconfigured applications and advanced services \u2014 from diagnostic tools and media servers to dashboards and container orchestration platforms. Most services are offered as Docker containers optimized specifically for Armbian OS and supported hardware, while a subset is available as native installations for lightweight or performance-critical setups.</p>"},{"location":"User-Guide_Armbian-Software/#installation-maintenance","title":"Installation &amp; Maintenance","text":"<p>Each installation is isolated and designed with clean setup and teardown in mind. Key features include:</p> <ul> <li>One-command installs with sensible defaults  </li> <li>No leftover files or dangling containers after uninstallation  </li> <li>Service isolation via Docker networks and volume mappings  </li> <li>Support for both manual and automatic updates, including container image refresh</li> <li>Daily-tested CI pipelines ensure that software definitions remain reliable and compatible with the latest system changes  </li> </ul> <p>All configurations are streamlined to work out of the box, reducing the need for manual intervention or deep technical know-how.</p>"},{"location":"User-Guide_Armbian-Software/#security-and-management","title":"Security and Management","text":"<p>Every service runs on a dedicated Docker network bridge, isolating app traffic for enhanced security and performance. Key management benefits include:</p> <ul> <li>Optional automatic restart and image updates  </li> <li>Native logging integration with <code>journalctl</code> or Docker logs  </li> <li>Clean rollbacks and easy troubleshooting  </li> <li>Support for encrypted volumes and HTTPS reverse proxies</li> </ul> <p>These features make the platform suitable for both prototyping and long-term deployments. However, a few specific services \u2014 typically those requiring low-level hardware access or advanced networking features \u2014 may still need to run directly on the host network rather than within an isolated Docker bridge.</p>"},{"location":"User-Guide_Armbian-Software/#hardware-support","title":"Hardware Support","text":"Architecture Support Level Notes x86_64 \u2705 Full Ideal for servers, mini PCs arm64 \u2705 Full Ideal for servers and SBCs armhf \u26a0\ufe0f Partial Limited by upstream container support riscv64 \u26a0\ufe0f Partial Experimental, growing ecosystem <p>Installations may include hardware specific tuning for optimal performance.</p>"},{"location":"User-Guide_Armbian-Software/#why-use-it","title":"Why Use It","text":"<ul> <li>\ud83d\ude80 One-click deployments of popular, containerized apps  </li> <li>\ud83d\udd12 Curated, tested, and secure software maintained by the Armbian community  </li> <li>\ud83d\udd01 Clean installs and easy removal \u2014 no system clutter or dependency hell  </li> <li>\ud83d\udce6 Optimized for Armbian-supported hardware, with fine-tuned configurations  </li> <li>\u2699\ufe0f Minimal overhead, ideal for embedded, headless, or remote systems  </li> <li>\ud83d\udee0\ufe0f Easy maintenance with integrated update and monitoring tools  </li> <li>\ud83c\udf10 Internet-ready services, including reverse proxies and network bridges</li> </ul>"},{"location":"User-Guide_Armbian_overlays/","title":"Device Tree overlays","text":"<p>Most in-circuit and GPIO based interfaces (SPI, I2C, I2S, UART, \u2026) don\u2019t have a mechanism for detecting and identifying devices connected to the bus, so Linux kernel has to be told explicitly about the device and its configuration details.</p> <p>While Device Tree is a way of describing hardware configuration to the kernel, Device Tree overlays are a way for modifying the DT in order to provide the kernel and kernel drivers with details about external devices or to activate interfaces disabled by default.</p> <p>Note: from the Linux kernel maintainer perspective all unused in-circuit type interfaces that use GPIO pins should be disabled by default and all pins on pin headers or soldering pads will be configured as standard GPIOs.</p> <p>Note: from the Linux kernel maintainer perspective all dedicated interfaces like USB, Ethernet or analog audio that are wired to soldering pads or a pin headers instead of specialized sockets (like USB socket, Ethernet socket or 3.5mm jack) will be left disabled by default.</p>"},{"location":"User-Guide_Armbian_overlays/#armbian-specific-notes","title":"Armbian specific notes","text":"<ul> <li>DT overlays are a Work-in-Progress (WIP) feature, present only in certain images.</li> <li>Please note that different SoCs will have different sets of available overlays.</li> </ul>"},{"location":"User-Guide_Armbian_overlays/#quick-start","title":"Quick start","text":"<ol> <li>Check the <code>README.&lt;soc-id&gt;-overlays</code> in <code>/boot/dtb/overlay/</code> (32-bit SoCs) or <code>/boot/dtb/allwinner/overlay/</code> (64-bit SoCs) for a list of provided overlays, their required and optional parameters</li> <li>Add names of overlays you want to activate to <code>overlays=</code> line in <code>/boot/armbianEnv.txt</code>, separated with spaces</li> <li>Add required parameters with their values to <code>/boot/armbianEnv.txt</code>, one per line</li> <li>Add optional parameters with their values to <code>/boot/armbianEnv.txt</code> if you want to change the default value, one per line</li> <li>If you didn\u2019t find the required overlay or want to change one of provided overlays, refer to \u201cUsing custom overlays\u201d section</li> <li>Reboot</li> </ol>"},{"location":"User-Guide_Armbian_overlays/#using-custom-overlays","title":"Using custom overlays","text":"<ol> <li>Check here for some example overlays</li> <li>Copy or create your overlay file (with <code>.dts</code> extension) on the device</li> <li>Change I2C or SPI bus number, GPIO and pinctrl pins, <code>compatible</code> string to match your SoC if necessary</li> <li>Compile and activate the overlay by running <code>armbian-add-overlay &lt;overlay_file.dts&gt;</code> as root, i.e. <code>sudo armbian-add-overlay sht15.dts</code></li> <li>Reboot</li> </ol>"},{"location":"User-Guide_Armbian_overlays/#armbianenvtxt-entries-reference","title":"armbianEnv.txt entries reference","text":"<ul> <li><code>overlay_prefix</code> - prefix for the DT and overlay file names, set at OS image creation time</li> <li><code>overlays</code> - list of overlays to activate from kernel directory</li> <li><code>user_overlays</code> - list of overlays to activate from <code>/boot/overlay-user/</code> directory</li> <li><code>param_*</code> - overlay parameters</li> </ul>"},{"location":"User-Guide_Armbian_overlays/#kernel-provided-vs-user-provided-overlays","title":"Kernel provided vs user provided overlays","text":"<p>Overlays can be loaded from 2 locations:</p> <ul> <li><code>/boot/dtb/overlay/</code> (<code>/boot/dtb/allwinner/overlay/</code> for 64-bit SoCs) - kernel provided overlays</li> <li><code>/boot/overlay-user/</code> - user provided overlays</li> </ul> <p>Main differences between these locations:</p> <ul> <li>Kernel provided overlays are updated with the kernel packages, any changes to this directory (including new files) will be lost on kernel upgrade</li> <li>Kernel provided directory may contain overlays for different SoCs, so overlay file name pattern will be <code>&lt;prefix&gt;-&lt;name&gt;</code>, for example <code>sun8i-h3-i2c0.dtbo</code>, where <code>sun8i-h3</code> is the prefix and <code>i2c0</code> is the name</li> <li>Kernel provided overlays are activated by the overlay name (i.e. <code>i2c0</code>), and the prefix is set at OS image creation time</li> <li>User provided overlays directory is empty by default and is meant for storing and using user created overlays that are not present in the kernel packages or modified stock overlays</li> <li>User provided overlays are activated by the file name (excluding the extension), i.e. for file <code>adafruit13m.dtbo</code> overlay name would be <code>adafruit13m</code></li> </ul>"},{"location":"User-Guide_Armbian_overlays/#activation","title":"Activation","text":"<p>DT overlays are activated by editing u-boot environment file <code>/boot/armbianEnv.txt</code></p> <ul> <li>Kernel provided overlays are activated by adding a name to the <code>overlays</code> variable</li> <li>User provided overlays are activated by adding a name to the <code>user_overlays</code> variable</li> <li>No more than one <code>overlays</code> line and one <code>user_overlays</code> line can be present in the environment file</li> <li>Multiple names should be separated by space</li> <li>If activated overlays have parameters marked as \u201cRequired\u201d, those parameters have to be set to proper values</li> <li>Reboot is required for any changes to take effect</li> </ul>"},{"location":"User-Guide_Armbian_overlays/#overlay-parameters","title":"Overlay parameters","text":"<p>Some overlays have additional parameters that can be set.</p> <p>Parameters marked as \u201cRequired\u201d have to be set if overlay with these parameters is activated, other parameters are not mandatory if default value is suitable.</p> <p>Parameters are set by adding their name and value to <code>/boot/armbianEnv.txt</code>, each parameter should be added on a new line.</p> <p>Please refer to <code>README.&lt;SoC_prefix&gt;-overlays</code> files in <code>/boot/dtb/overlay/</code> (<code>/boot/dtb/allwinner/overlay/</code> for 64-bit SoCs) directory for supported parameters, i.e. <code>README.sun8i-h3-overlays</code> for H3 based boards.</p> <p>Parameters of type <code>pin</code> require special format:</p> <ul> <li>Value consists of a letter <code>P</code>, a letter that signifies the pin bank and a number of the pin in the bank</li> <li>Letters should be upper case</li> <li>Numbers should not contain leading zeros</li> <li>Examples: good - <code>PA9</code>, <code>PG12</code>; bad - <code>pa2</code>, <code>PG08</code></li> </ul>"},{"location":"User-Guide_Armbian_overlays/#overlay-bus-selection","title":"Overlay bus selection","text":"<p>SoCs may contain multiple bus controllers of the same type, i.e. Allwinner H3 contains 2 SPI controllers and Allwinner A20 contains 4 SPI controllers.</p> <p>Please refer to your board documentation and schematic to determine what pins are wired to the pin headers and thus what bus number should be used in each case.</p>"},{"location":"User-Guide_Armbian_overlays/#overlay-pinmux-conflicts","title":"Overlay pinmux conflicts","text":"<p>Some controllers may share the SoC pins in some configurations. For example on Allwinner H3 UART 3 and SPI 1 use the same pins - <code>PA13</code>, <code>PA14</code>, <code>PA15</code>, <code>PA16</code>. In this case activating both UART 3 and SPI 1 would result in a conflict, and on practice only one interface (either SPI or UART) will be accessible on these pins.</p> <p>Please check the SoC specific README, board schematic, SoC datasheet or other documentation if you are unsure about possible conflicts if activating multiple overlays for the controllers that use shared (muxed) pins.</p>"},{"location":"User-Guide_Armbian_overlays/#overlay-device-endpoint-conflicts","title":"Overlay device endpoint conflicts","text":"<p>Overlays for devices that use addresses or similar mechanisms (i.e. SPI chip selects) can\u2019t be activated simultaneously if addresses (chip selects) are identical.</p> <p>For example A20 SPI controller 1 has only one hardware chip select, so <code>spi-spidev</code> and <code>spi-jedec-nor</code> overlays cannot be activated both if they would use the same bus number and chip select.</p>"},{"location":"User-Guide_Armbian_overlays/#overlay-compatibility","title":"Overlay compatibility","text":"<p>Device Tree overlays for different platforms and SoCs are not directly compatible. This, for example, means that overlays for H3 may need some changes to work on A20, and that Raspberry Pi overlays will need adjustments in order to be used on Allwinner based boards.</p> <p>Rework may include changing labels, references (phandles) and pinconf bindings.</p>"},{"location":"User-Guide_Armbian_overlays/#notes-regarding-spi-and-i2s-overlays","title":"Notes regarding SPI and I2S overlays","text":"<p>Activating a device on SPI or I2S bus may require more than one overlay. In case a bus overlay like <code>spi0</code> or <code>i2s0</code> exist for the target SoC they need to be activated in addition to a slave device overlay (provided or custom/user-made). Please note that these overlays (<code>spi0</code>, <code>i2s0</code>) do not enable any slave devices (like spidev or I2S codec). In some cases it might be necessary to change <code>param_spidev_spi_bus</code> to <code>1</code>.</p>"},{"location":"User-Guide_Armbian_overlays/#debugging","title":"Debugging","text":"<p>As overlays and overlay parameters are applied by the u-boot, it is impossible to get any debugging information (such as error messages) from the OS.</p> <p>Serial console on UART 0 is required to debug DT overlay related problems.</p>"},{"location":"User-Guide_Armbian_overlays/#example-bootarmbianenvtxt-contents","title":"Example <code>/boot/armbianEnv.txt</code> contents:","text":"Text Only<pre><code>verbosity=1\nconsole=serial\noverlay_prefix=sun8i-h3\nrootdev=UUID=bd0ded76-1188-4b52-a20a-64f326c1f193\nrootfstype=ext4\noverlays=w1-gpio uart1 i2c0 spi-spidev\nparam_w1_pin=PA20\nparam_w1_pin_int_pullup=1\nparam_uart1_rtscts=1\nparam_spidev_spi_bus=0\n</code></pre>"},{"location":"User-Guide_Armbian_overlays/#example-of-serial-console-log-when-using-several-overlays","title":"Example of serial console log when using several overlays:","text":"Text Only<pre><code>## Executing script at 43100000\nU-boot loaded from SD\nBoot script loaded from mmc\n265 bytes read in 182 ms (1000 Bytes/s)\n5074230 bytes read in 532 ms (9.1 MiB/s)\n5702664 bytes read in 579 ms (9.4 MiB/s)\nFound mainline kernel configuration\n32724 bytes read in 269 ms (118.2 KiB/s)\n882 bytes read in 277 ms (2.9 KiB/s)\nApplying kernel provided DT overlay sun8i-h3-w1-gpio.dtbo\n506 bytes read in 326 ms (1000 Bytes/s)\nApplying kernel provided DT overlay sun8i-h3-uart1.dtbo\n374 bytes read in 377 ms (0 Bytes/s)\nApplying kernel provided DT overlay sun8i-h3-i2c0.dtbo\n788 bytes read in 347 ms (2 KiB/s)\nApplying kernel provided DT overlay sun8i-h3-spi-spidev.dtbo\n4327 bytes read in 268 ms (15.6 KiB/s)\nApplying kernel provided DT fixup script (sun8i-h3-fixup.scr)\n## Executing script at 44000000\ntmp_bank=A\ntmp_pin=20\n## Loading init Ramdisk from Legacy Image at 43300000 ...\n   Image Name:   uInitrd\n   Image Type:   ARM Linux RAMDisk Image (gzip compressed)\n   Data Size:    5074166 Bytes = 4.8 MiB\n   Load Address: 00000000\n   Entry Point:  00000000\n   Verifying Checksum ... OK\n## Flattened Device Tree blob at 43000000\n   Booting using the fdt blob at 0x43000000\n   reserving fdt memory region: addr=43000000 size=9000\n   Loading Ramdisk to 49b29000, end 49fffcf6 ... OK\n   Loading Device Tree to 49b1d000, end 49b28fff ... OK\n\nStarting kernel ...\n</code></pre>"},{"location":"User-Guide_Autoconfig/","title":"Automatic first boot configuration","text":""},{"location":"User-Guide_Autoconfig/#reading-presets-from-local-config","title":"Reading presets from local config","text":"<p>It is possible to configure your device automatically at first boot. Settings like: root password, IP address, connecting to wireless.</p> <p>After flashing an image to boot media, mount it and add a file containing your config to <code>/root/.not_logged_in_yet</code></p> Tip <p>You may also mount the image and edit it prior to flashing, if this is preferable.</p>"},{"location":"User-Guide_Autoconfig/#loading-a-remote-config","title":"Loading a remote config","text":"<p>It is also possible to load this config file from a remote server, as above, however the only directive you should include is:</p> /root/.not_logged_in_yet<pre><code>PRESET_CONFIGURATION=\"http://path/to/config/file\"\n</code></pre>"},{"location":"User-Guide_Autoconfig/#configuration-directives","title":"Configuration directives","text":"<ul> <li>The directives in this file are specified using <code>key=\"value\"</code> format.  </li> <li>To ask for a value interactively, leave it unset or comment out the directive.  </li> <li>For fully-unattended setup, specify all values.  </li> </ul> <p>Caution</p> <p>No validation of this network config is performed, wrong settings will lead to broken network. Armbian supports netplan.io, this is the preferred config method. See netplan guides for various example configurations. Netplan config is stored in <code>/etc/netplan/</code>.  </p> Configuration directive <code>[default]</code> | <code>option</code> Description: <code>PRESET_CONFIGURATION</code> <code>http://path/to/config/file</code> See Loading a remote config <code>PRESET_NET_CHANGE_DEFAULTS</code> <code>[0]</code> | <code>1</code> Change default network settingsif unset, no network changes will be applied <code>PRESET_NET_ETHERNET_ENABLED</code> <code>0</code> | <code>1</code> Enable Ethernet, ignored if WiFi enabled <code>PRESET_NET_WIFI_ENABLED</code> <code>0</code> | <code>1</code> Enable WiFi, takes priority over Ethernet <code>PRESET_NET_WIFI_SSID</code> <code>MySSID</code> WiFi SSID <code>PRESET_NET_WIFI_KEY</code> <code>MyWPA-PSK</code> WiFi Pre-Shared Key (Password), stored in plaintext <code>PRESET_NET_WIFI_COUNTRYCODE</code> <code>CC</code> Country code, required for WiFie.g. <code>GB</code>, <code>US</code>, <code>DE</code>; see Wikipedia/ISO_3166 <code>PRESET_CONNECT_WIRELESS</code> <code>Y</code> | <code>n</code> Set to <code>Y</code> for interactive mode, <code>n</code> uses values from file <code>PRESET_NET_USE_STATIC</code> <code>[0]</code> | <code>1</code> Use the static IP provided, DHCP is the defaultLeaving any value unset will result in a broken config <code>PRESET_NET_STATIC_IP</code> <code>xxx.xxx.xxx.xxx</code> Static IPv4 address, dotted decimal notation <code>PRESET_NET_STATIC_MASK</code> <code>xxx.xxx.xxx.xxx</code> Subnet mask, typically <code>255.255.255.0</code> <code>PRESET_NET_STATIC_GATEWAY</code> <code>xxx.xxx.xxx.xxx</code> Default gateway address <code>PRESET_NET_STATIC_DNS</code> <code>x.x.x.x x.x.x.x</code> DNS Servers to use, separated by a space. If unsure:CloudFlare is <code>1.1.1.1 1.0.0.1</code>Google is <code>8.8.8.8 8.8.4.4</code> <code>SET_LANG_BASED_ON_LOCATION</code> <code>Y</code> | <code>n</code> \u201cSet user language based on your location?\u201d <code>PRESET_LOCALE</code> <code>locale</code> Locale e.g. <code>en_GB.UTF-8</code>, <code>de_DE.UTF-8</code>, <code>zh_TW.UTF-8</code> <code>PRESET_TIMEZONE</code> <code>timezone</code> Timezone e.g. <code>Etc/UTC</code>, <code>PRESET_ROOT_PASSWORD</code> <code>[1234]</code> | <code>password</code> Preset <code>root</code> passwordStored in plaintext, SSH keys are safer! <code>PRESET_ROOT_KEY</code> <code>https://path/to/key.file</code> Fetches public key from specified URL for <code>root</code> user <code>PRESET_USER_NAME</code> <code>username</code> Username to create <code>PRESET_USER_PASSWORD</code> <code>password</code> Preset created user passwordStored in plaintext, SSH keys are safer! <code>PRESET_USER_KEY</code> <code>https://path/to/key.file</code> Fetches public key from specified URL for created user <code>PRESET_DEFAULT_REALNAME</code> <code>Real Name</code> RealName to use for created user <code>PRESET_USER_SHELL</code> <code>shell</code> Currently only <code>bash</code> (default) or <code>zsh</code> (<code>armbian-zsh</code>) supported"},{"location":"User-Guide_Autoconfig/#sample-config-file","title":"Sample config file","text":"<p>The following is an example configuration, it may be used as a template  </p> /root/.not_logged_in_yet<pre><code>#/root/.not_logged_in_yet\n# Network Settings\nPRESET_NET_CHANGE_DEFAULTS=\"1\"\n## Ethernet\nPRESET_NET_ETHERNET_ENABLED=\"1\"     #   Ignored due to WiFi\n## WiFi\nPRESET_NET_WIFI_ENABLED=\"1\"\nPRESET_NET_WIFI_SSID=\"MySSID\"\nPRESET_NET_WIFI_KEY=\"MyWiFiKEY\"\nPRESET_NET_WIFI_COUNTRYCODE=\"GB\"\nPRESET_CONNECT_WIRELESS=\"n\"\n## Static IP\nPRESET_NET_USE_STATIC=\"1\"\nPRESET_NET_STATIC_IP=\"192.168.0.100\"\nPRESET_NET_STATIC_MASK=\"255.255.255.0\"\nPRESET_NET_STATIC_GATEWAY=\"192.168.0.1\"\nPRESET_NET_STATIC_DNS=\"8.8.8.8 8.8.4.4\"\n\n# System\nSET_LANG_BASED_ON_LOCATION=\"y\"\nPRESET_LOCALE=\"en_US.UTF-8\"\nPRESET_TIMEZONE=\"Etc/UTC\"\n\n# Root\nPRESET_ROOT_PASSWORD=\"RootPassword\"\nPRESET_ROOT_KEY=\"\"\n\n# User\nPRESET_USER_NAME=\"armbian\"\nPRESET_USER_PASSWORD=\"UserPassword\"\nPRESET_USER_KEY=\"\"\nPRESET_DEFAULT_REALNAME=\"Armbian user\"\nPRESET_USER_SHELL=\"bash\"\n</code></pre> Tip <p>If you want to use first run automatic configuration at build time, check this GitHub pull request.</p> <p>tl;dr;</p> <ol> <li>Copy the template with <code>cp extensions/preset-firstrun.sh userpatches/extensions/</code></li> <li>Edit the template <code>userpatches/extensions/preset-firstrun.sh</code> according to your situation</li> <li>Build your Armbian image using the additional parameter <code>ENABLE_EXTENSIONS=preset-firstrun</code></li> </ol>"},{"location":"User-Guide_Autoconfig/#provisioning-script","title":"Provisioning script","text":"<p><code>/root/provisioning.sh</code> is executed once as root after the first successful login, either manual or automated. It\u2019s used to perform final system setup tasks like installing packages, configuring the system, or enabling services.</p> <p>The example script updates package lists, installs htop, sets a custom hostname.</p> /root/provisioning.sh<pre><code>#!/bin/bash\nset -e\necho \"Provisioning started\"\napt update &amp;&amp; apt install -y htop\nhostnamectl set-hostname my-device\necho \"Provisioning complete\"\n</code></pre>"},{"location":"User-Guide_Board-Support-Rules/","title":"Board support Rules","text":""},{"location":"User-Guide_Board-Support-Rules/#overview","title":"Overview","text":"<p>Support definitions, criteria and relationships for:</p> <ul> <li>Platinum Support</li> <li>Standard support</li> <li>Community maintained</li> <li>Staging</li> </ul>"},{"location":"User-Guide_Board-Support-Rules/#platinum-support","title":"Platinum Support","text":"<p>Platinum support is reserved for business relationships with the Armbian project and is out of the scope of this document. </p>"},{"location":"User-Guide_Board-Support-Rules/#contact-us","title":"Contact us","text":"<p>Please contact Armbian management for more information.</p>"},{"location":"User-Guide_Board-Support-Rules/#standard-support","title":"Standard Support","text":""},{"location":"User-Guide_Board-Support-Rules/#benefits","title":"Benefits","text":"<ul> <li>Armbian will publish and distribute \u201cstable\u201d images through its mirror network (behind automated closest mirror selection)</li> <li>Armbian will publish and distribute \u201crolling\u201d images (on GitHub and individual download page)</li> <li>best-effort support to SBC maintainer to assure compatibility within the Armbian Build Framework</li> <li>best-effort team\u2019s unique expertise to assist maintainer with general challenges</li> <li>best-effort automated testing for basic hardware functionality</li> <li>best-effort compensation will be provided to maintainer from the \u201cArmbian Community Fund\u201d [1] [2] [3]</li> </ul>"},{"location":"User-Guide_Board-Support-Rules/#requirements","title":"Requirements","text":"<p>For a SBC to be considered supported:</p> <ul> <li>must be beneficial to the Armbian project</li> <li>Armbian team must confirm and agree upon all supported boards statuses</li> <li>a named individual as \u201cmaintainer\u201d with GitHub ID must be preset in the BOARD_MAINTAINER within Board Configuration File</li> <li>a named individual must commit to providing \u201cbest effort\u201d support for their SBC on the Armbian forums</li> <li>maintainer must participate in the Release Process</li> <li>maintainer must sign-off that device has been tested, is stable, and ready for release during release process</li> <li>maintainer must have physical access to the SBC they are supporting</li> <li>maintainer can operate under pseudonym but must reveal his identity to Armbian management</li> <li>maintainer should attend developers meetings held every Wednesday 7:00 PM CET</li> <li>when whole support burden is carried by maintainer and Armbian team, it will be labelled as \u201cPro bono\u201d</li> </ul> Additional Caveats <ul> <li>if the burden placed on the maintainer and Armbian team is too high, crowdfunding campaign success will decide support</li> <li>supported is not applied to a \u201cboard family\u201d or group of related SBCs. It is per board</li> <li>a maintainer can support multiple devices but must satisfy all requirements above per SBC</li> <li>any individual can be a maintainer for a standard support SBC</li> <li>missed major release will result in immediate forfeit of \u201cArmbian Standard support\u201d status and demotion to \u201cCommunity maintained\u201d status unless Armbian team grants exemption</li> </ul>"},{"location":"User-Guide_Board-Support-Rules/#community-maintained","title":"Community maintained","text":"<p>Community maintained devices are not under active supervision or development. Support status is unknown to Armbian team. It represents combined former CSC (community supported configuration) and EOS (end of support). Can be removed from Armbian code base at any time. Left as a courtesy in case a community member wants to attempt to resurrect maintenance.</p> <p>Community maintained SBCs are exclusively supported by the community.</p>"},{"location":"User-Guide_Board-Support-Rules/#benefits_1","title":"Benefits","text":"<ul> <li>Armbian will publish and distribute images through its mirror network</li> <li>Armbian will publish and distribute daily rolling images </li> <li>periodic packages are built and published into Armbian\u2019s apt repository</li> <li>images are untested and Armbian team won\u2019t respond on troubles or apply any fixes.</li> </ul>"},{"location":"User-Guide_Board-Support-Rules/#requirements_1","title":"Requirements","text":"<ul> <li>patch or component does not break Armbian Build Framework</li> <li>patch or component does not break build of supported boards or other CSCs</li> <li>pull requests needs community review. Armbian team will not review any code related to community supported SBC</li> <li>generally considered to \u201cwork most of the time\u201d</li> <li>generally considered to receive periodic maintenance from community and upstream</li> </ul>"},{"location":"User-Guide_Board-Support-Rules/#staging","title":"Staging","text":"<p>Work in progress (WIP) status is for when a maintainer has committed to a SBC, but is not ready to ship stable images.</p>"},{"location":"User-Guide_Board-Support-Rules/#benefits_2","title":"Benefits","text":"<p>All benefits of Community Supported SBCs apply to Staging as well.</p> <ul> <li>periodic / nightly CLI images are published by Armbian</li> <li>best-effort support to SBC maintainer to assure compatibility within the Armbian Build Framework</li> <li>best-effort team\u2019s unique expertise to assist maintainer with general challenges</li> <li>eligible for promotion to Standard Support</li> </ul>"},{"location":"User-Guide_Board-Support-Rules/#requirements_2","title":"Requirements","text":"<ul> <li>must satisfy standard support criteria</li> <li>must show active development</li> <li>must compile successfully most of the time</li> </ul>"},{"location":"User-Guide_FAQ/","title":"Frequently asked questions","text":"<p>This information is mainly for new/inexperienced users but could be useful for others too.</p>"},{"location":"User-Guide_FAQ/#is-armbian-an-operating-system","title":"Is Armbian an operating system?","text":"<p>Not per se.  Armbian is a build framework that allows users to create ready-to-use images with working kernels in variable userspace configurations for various single board computers (SBCs).</p> <p>We do provide various prebuilt images for some boards, but mostly for users convenience.</p>"},{"location":"User-Guide_FAQ/#why-i-cannot-simply-shove-a-random-image-into-my-board-to-work-like-on-my-pc","title":"Why I cannot simply shove a random image into my board to work like on my PC?","text":"<p>x86 architecture always has a traditional BIOS or UEFI.  This provides a standard framework for operating systems to interact with the hardware.  Most SBCs do not.  ARM is improving the situation with ARM Server Ready and ARM System Ready certificates, but most SBC vendors are not yet incentivized to meet these standards.</p> <p>Without such standards, many vendors quickly fork low-level bootloaders such as u-boot and make the bare minimum modifications needed.</p> <p>Great reference here</p>"},{"location":"User-Guide_FAQ/#why-is-armbian-constantly-asking-for-money-free-software-should-be-free","title":"Why is Armbian constantly asking for money?  Free software should be free.","text":"<p>Making free licence software also requires best people, expensive infrastructure, tooling.  It has as much or more costs as proprietary while generating no income from the licence.</p> <p>tl;dr: We are asking for help that developers and project maintainers do not lose their generosity and humanity which are the driving force that generates a value.  For all of us!  A great deal of our work represent a big pressure on our very limited private resources.  We ask you to share that burden with us.</p>"},{"location":"User-Guide_FAQ/#development-time","title":"Development time","text":"<p>We are covering a large swath of diverse, custom designed ARM hardware in ways, extents, and under conditions nobody else does.  Keeping this service up, keeping these low end hardware functional is laborious.  When releases are approaching and a lot of testing and fixing is going on, this gets up, stress intensifies.  This means we have to invest let\u2019s say at least 3.000 - 4.000 EUR of our time on top of fixed costs into this service every day just to keep it up.  Without developing any serious features users wish to have.  Fulfilling many of these wishes would easily cost tens of thousands in development time, which we don\u2019t have and which we can\u2019t get back due to it being free software.  Nobody needs to buy licence for using it, and yet only a few people decide to respect the time and attention they are receiving from developers on forums. </p>"},{"location":"User-Guide_FAQ/#infrastructure-and-operations","title":"Infrastructure and operations","text":"<p>We have to maintain our infrastructure where biggest costs are - once again - people\u2019s time, followed by electricity, then hardware itself.  Often we get free hardware and very rare break even with electricity costs and with people that would maintain this for us.  A new sponsored board usually brings us more costs then benefits \u2013 since benefit is anyway public.</p>"},{"location":"User-Guide_FAQ/#support-time","title":"Support time","text":"<p>The software is given, released free.  However support, development, and documentation costs time, effort, hardware and technical ability, which incurs costs.</p> <p>Each question that is directed towards our team is generating opportunity costs and taking away from development time.  Some we are happy to cover, but not all.  Especially when it goes for repetitive questions and demands.</p> <p>Questions associated with missing features represent another hit and miss for us.  Complicated and critical upstream functions are missing (like video acceleration within a web browser, supporting a board that had very poor initial support and no community backing, etc.).  This functionality is unique to hardware and implementing is extremely labor intensive and requires unique expertise.  Our team is 10-15 volunteers that maintain this project during their own time.  We cannot cover the job of Google Chromium team, Collabora, ARM, Rockchip and other vendors which have not provided sufficient support for their products.</p> <p>All our work is done in public and we provide all sources which we are changing in the process.  All our work is patent free and released under a free licence so anyone can re-use it further.  The scale of SBCs Armbian supports is hard to beat, and consequently our work is repackaged and reused by other projects and vendors.  Unfortunately the burden of support is often directed to us, while they focus on revenue.</p>"},{"location":"User-Guide_FAQ/#why-does-hardware-feature-xy-work-in-old-kernel-but-not-in-more-recent-one","title":"Why does hardware feature XY work in old kernel but not in more recent one?","text":"<p>Vendors develop hardware specific support on fixed (usually old LTS) kernel and U-Boot fork and only do minimal adjustments to make board features work.  Besides the fact that those adjustments are almost never pushed back to mainline they usually do not update their sources (if available at all) and pre-made kernels/boot loaders as well.</p> <p>Armbian moves things forward and follows mainline kernel as much as possible, to provide both its features as well as security updates.  The downside is that some features do not work since nobody ported specific drivers to recent mainline, and they can also break.  Armbian can only afford to do brief testing of images and check if basic functions (boot-up, network, USB, etc.) work due to lack of both human and financial resources.</p>"},{"location":"User-Guide_FAQ/#what-does-wipeoscsc-mean","title":"What does WIP/EOS/CSC mean?","text":"<ul> <li>WIP: Work In Progress: Basic functions can be tested but not ready for production yet.</li> <li>CSC: Community Supported Configuration: Community contributed support.  No official support from Armbian development team.</li> <li>EOS: End of life: Support ended.</li> </ul>"},{"location":"User-Guide_FAQ/#i-have-no-technical-knowledge-how-can-i-help","title":"I have no technical knowledge.  How can I help?","text":"<p>We need many different profiles of people to run this project and just about any help is appreciated, not just help on development.  Since otherwise developers have to fix web pages, developers have to run projects, developers have to seek for money, developers have to maintain servers, developers have to maintain forum, developers have to moderate forums, developers have to maintain infrastructure, developers have to maintain relations with partners, developers have to waste time on repeated support question, developers have to deal with \u201ccustomers\u201d, \u2026</p>"},{"location":"User-Guide_FAQ/#why-are-old-stable-distributions-like-ubuntu-focal-or-debian-buster-not-supported","title":"Why are old-stable distributions like Ubuntu Focal or Debian Buster not supported?","text":"<p>The Armbian project has very limited human and financial resources so it can focus on a few up-to-date operating system releases only. Currently supported userspaces from Debian and Ubuntu (latest only).</p>"},{"location":"User-Guide_FAQ/#i-have-a-tv-box-or-tablet-from-insert-random-vendor-can-i-use-armbian-on-it","title":"I have a TV Box or tablet from &lt;insert random vendor&gt;. Can I use Armbian on it?","text":"<p>No.</p> <p>However some community members are commited to tinkering with these devices.  They discuss their findings in a dedicated space in our forums. Take note that there is no support from the Armbian development team whatsoever. General advice: Do not buy (cheap) tv boxes!</p>"},{"location":"User-Guide_FAQ/#why-does-armbian-not-support-tables-or-tv-boxes-in-general-the-market-is-huge","title":"Why does Armbian not support tables or TV boxes in general? The market is huge!","text":"<p>There are some manufacturers who produce better quality than the others.  In general they provide more or less accurate schematics and they have some engineers that are available for general public and you can ask them things here and there.  Most of them try to keep up with the highest standards of hardware development. With proper documentation and minimal support, costs of software development are significantly lower. This is especially important, because we waste our precious private time to secure proper hardware functioning through the time.</p> <p>However, in vast majority of cases, TV boxes are lacking any documentation.  There are frequent changes of components without notice whatsoever, boot mechanisms are closed source and almost all Armbian builds that exist in the wild are unofficial community hacks.  Market is huge but since public does not have interest in covering of support - which in this case is even bigger - involvement in providing support is simply insane and stupid.  It only eats our personal time and finances.</p>"},{"location":"User-Guide_FAQ/#there-is-a-new-board-on-the-market-will-armbian-officially-support-it","title":"There is a new board on the market. Will Armbian officially support it?","text":"<p>Maybe. It depends on things like available documentation from both the vendor as well as SoC manufacturer, production samples to play with, available BSP and last but certainly not least human resources. To say a Maintainer within the Armbian development team to agree taking care. Also if vendors decide to support Armbian there is certainly a higher chance to get it fully supported.</p>"},{"location":"User-Guide_FAQ/#how-can-i-compile-my-own-kernel","title":"How can I compile my own kernel?","text":"<p>Normally on Debian or Ubuntu you would do something like <code>sudo apt-get build-dep linux linux-image-$(uname -r)</code>. However Armbian\u2019s way of building kernel images is slightly different than the standard distribution method. The best way is to follow the procedures in the Developer Guide.</p>"},{"location":"User-Guide_FAQ/#why-i-cannot-choose-a-specific-kernel-version-5115-for-example","title":"Why I cannot choose a specific kernel version (5.11.5 for example)?","text":"<p>Each kernel Armbian offers has a custom patchset on top which would be impossible to maintain compatibility to each and every kernel version out there.  Therefore the choice is usually limited to up to three branches: legacy, current and edge.  Depending on board/family the versions behind these branches may differ.  You can lookup them in the source code.</p>"},{"location":"User-Guide_FAQ/#can-i-upgrade-my-userspace-flavor-like-bullseye-to-bookworm-or-jammy-to-noble","title":"Can I upgrade my userspace flavor, like Bullseye to Bookworm or Jammy to Noble?","text":"<p>Note: Upgrading the Armbian core packages like kernel, firmware and boot loader and the chosen userspace are independent processes. Former is simply done with <code>apt update &amp;&amp; apt upgrade</code>.  </p> <p>Armbian does not offer a standardized way nor do we encourage users to upgrade their userspace, like Focal to Jammy, Jammy to Noble, Bullseye to Bookworm, Bookworm to Trixie. We would love to do that but the reason why we cannot is simply the lack of ressources in time and devices to test such upgrades in various random scenarios.</p> <p>You can try to upgrade your userspace by following official ways from Debian/Ubuntu but make sure to freeze your firmware packages via <code>armbian-config</code> beforehand. Also please do not blame/complain (at) Armbian if something goes wrong or have other issues with an upgraded system.</p>"},{"location":"User-Guide_FAQ/#where-do-i-ship-a-board-so-that-armbian-will-add-support","title":"Where do I ship a board so that Armbian will add support?","text":"<p>Unless you have an existing arrangement with the Armbian, you will need to contact Armbian for a paid engagement. You may also add support by yourself if criteria is satisfied. See Board Support Rules for further information.</p>"},{"location":"User-Guide_FAQ/#what-wifi-adapters-will-most-likely-work-out-of-the-box","title":"What WiFi adapters will most likely work out of the box?","text":"<p>Check here.</p>"},{"location":"User-Guide_FAQ/#i-cannot-find-armbian-config-on-my-device","title":"I cannot find <code>armbian-config</code> on my device.","text":"<p>If you are using a <code>minimal</code> variant this tool is not pre-installed. However you can simply install it via <code>sudo apt update &amp;&amp; sudo apt install armbian-config</code> which will also handle all necessary dependencies. If you are not using an <code>minimal</code> image and the tool is still missing make sure your image is genuine.</p>"},{"location":"User-Guide_FAQ/#why-keeps-one-of-the-leds-flashing-twice-over-and-over-like-a-heartbeat-is-there-something-wrong","title":"Why keeps one of the leds flashing twice over and over like a heartbeat? Is there something wrong?","text":"<p>Absolutely not. Quite the contrary. This behaviour is called <code>heartbeat trigger</code> and is controlled by the kernel. When the load increases the flashing speed will increase as well. If the flashing stops the kernel either froze or were unloaded by either reboot or shutdown. Unhappy? Keep reading below :-)</p>"},{"location":"User-Guide_FAQ/#can-this-behaviour-adjusteddisabled","title":"Can this behaviour adjusted/disabled?","text":"<p>Maybe. Some boards have certain functions hard-wired to the onboard leds. Others allow to control the led functions from userspace. Try to find <code>trigger</code> files for the leds in <code>/sys</code>. Example for an Orange Pi One: Text Only<pre><code>root@orangepione:~# find /sys/devices -name trigger | grep led\n/sys/devices/platform/leds/leds/orangepi:red:status/trigger\n/sys/devices/platform/leds/leds/orangepi:green:pwr/trigger\n</code></pre> Use <code>cat</code> on the <code>trigger</code> file to both check its current behaviour, which is highlighted with [brackets], and which functions are supported. Then use <code>echo</code> to adjust the behaviour. Example for disabling a led:  Text Only<pre><code>root@orangepione:~# cat /sys/devices/platform/leds/leds/orangepi:red:status/trigger\nnone rc-feedback kbd-scrolllock kbd-numlock kbd-capslock kbd-kanalock kbd-shiftlock kbd-altgrlock kbd-ctrllock kbd-altlock kbd-shiftllock kbd-shiftrlock kbd-ctrlllock kbd-ctrlrlock usbport disk-activity disk-read disk-write ide-disk mtd nand-disk [heartbeat] cpu cpu0 cpu1 cpu2 cpu3 activity default-on panic mmc0 rfkill-any rfkill-none 0.1:01:link 0.1:01:100Mbps 0.1:01:10Mbps\nroot@orangepione:~# echo none &gt; /sys/devices/platform/leds/leds/orangepi:red:status/trigger\n</code></pre></p>"},{"location":"User-Guide_FAQ/#why-is-there-no-image-for-board-with-bookwormjammynobletrixie-and-minimalclignomekdexfce-with-vendorlegacycurrentedge-kernel","title":"Why is there no image for [board] with [Bookworm/Jammy/Noble/Trixie] and [Minimal/CLI/Gnome/KDE/Xfce] with [vendor/legacy/current/edge] kernel?","text":"<p>It would be VERY ressource intensive and just insane to pre-create and provide images for all possible combination of kernels, userspaces and desktops/CLI for all available boards and last but not least provide support for them. We simply cannot afford doing this since our ressources in both human and financial are limited. Therefore we provide a small selection for each board only. However with the Armbian build framework it is very easy and convenient to create an image of your desire by yourself. If there is enough public interest for a certain combination we may occasionally adjust our build targets.</p>"},{"location":"User-Guide_FAQ/#when-using-the-framework-it-does-not-build-anything-but-downloads-artifacts-how-can-i-force-rebuilding-from-sources","title":"When using the framework it does not build anything but downloads artifacts. How can I force rebuilding from sources?","text":"<p>tl;dr: <code>ARTIFACT_IGNORE_CACHE=yes</code></p> <p>Forcing a rebuild is usually not necessary, because:</p> <p>Armbian build [\u2026] operates on smaller units called \u201cartifacts\u201d: the kernel, u-boot, firmware, rootfs, and then finally the full image. Each of those has its version calculated beforehand based on its would-be  contents, and looked up in both a local and remote cache (OCI registry),  allowing users to re-use artifacts across builds and to use the best hardware available for each. [\u2026]</p> <p>However sometimes local changes are not detected properly. Therefore this flag can be useful.</p>"},{"location":"User-Guide_Getting-Started/","title":"Armbian Getting Started Guide","text":"<p>Before you start, please make sure you have:</p> <ul> <li>a proper power supply according to the board manufacturer\u2019s requirements </li> <li>a reliable SD card (at least \u2018Class 10\u2019 and \u2018A1\u2019-rated is highly recommended)</li> </ul> <p>You will also need an existing operating system and a SD card writer tool. We recommend using USBImager because it can validate written data saving you from corrupted SD card contents.</p> <p>Warning</p> <p>Make sure you use a good, reliable and fast SD card. If you encounter boot or stability issues, in over 95 percent of all cases these are either caused by an insufficient power supply, or they are related to the SD card. This can be due to a bad card, bad card reader, something went wrong when burning the image, the card turns out to be too slow to boot, etc. Armbian can simply not run on unreliable hardware.</p> <p>Checking your SD card with either F3 or H2testw is mandatory if you run into problems. Since counterfeit SD cards are still an issue, we also highly recommend checking your card with these tools directly after purchase.</p> <p>Most SD cards are only optimised for sequential reads/writes as it is common with digital cameras. This is what the speed class is about. The SD Association defined Application Performance Class as a standard for random IO performance.</p> Application Performance Class Pictograph Minimum Random Read Minimum Random Write Minimum Sustained (Seq. Write) Class 1 (A1) 1500 4k IOPS 500 4k IOPS 10MBytes/sec Class 2 (A2) 4000 4k IOPS 2000 4k IOPS 10MBytes/sec <p>We recommend SD cards that are rated at least A1 (A2 rated cards are yet lacking driver support, and therefore show lower overall and especially random IO performance) and fulfill at least speed class C10 or higher (U1/U3, etc.). For example:</p> <p> </p> <p>In case you chose an SD card that was already in use before, please consider resetting it back to \u2018factory default\u2019 performance with SD Formatter before burning Armbian to it (explanation in the forum). Detailed information regarding \u2018factory default\u2019 SD card performance.</p> <p>New users</p> <p>Some users might find it easier to follow this video tutorial.</p> <p></p> <p>Some word of advice, though. The video has been created a few years ago. You might therefore find differences between this video and our current site. So, in doubt, also follow the sections below while watching the video.</p>"},{"location":"User-Guide_Getting-Started/#download-the-image","title":"Download the image","text":"<p>If your hardware is supported, you must download an image for your board. All of our system images can be found at https://www.armbian.com/download/ or at one of our many mirrors. You will find that there are different types of images, either using Debian GNU/Linux or Ubuntu as their base operating system.</p>"},{"location":"User-Guide_Getting-Started/#debian-or-ubuntu","title":"Debian or Ubuntu","text":"<p>If you have no special preferences or requirements, we recommend using an Ubuntu based Armbian image.</p>"},{"location":"User-Guide_Getting-Started/#minimal-server-or-desktop","title":"Minimal, Server, or Desktop","text":"<p>For each board, we usually provide these types of images:</p> <ul> <li>Minimal - lightweight CLI with only a bare minimum of packages and no graphical user environment</li> <li>Server - server variant with preinstalled standard utilities and no graphical user environment</li> <li>Desktop - full featured desktop image</li> </ul> <p>For some boards we provide only minimal images due to their hardware limitations.</p>"},{"location":"User-Guide_Getting-Started/#vendor-current-edge-or-legacy","title":"Vendor, Current, Edge, or Legacy","text":"<p>In some cases we provide images with different firmware. They differ in the level of hardware support and can be classified as follows:</p> <ul> <li>vendor contains a vendor-provided kernel which usually has the best hardware support while package version can be outdated, containing less general fixes </li> <li>current is following the latest Linux mainline LTS kernel and is in most cases the best choice.</li> </ul> <p>Use the following images only if these are the only ones provided, or if you want to participate in testing:</p> <ul> <li>edge is, as the name implies, cutting-edge fresh / development / latest stable. It is only automatically tested, it can break at any time, and it is recommended only for experienced users.</li> <li>legacy is the old stable current kernel. Use it if current is not available or if something does not work well with it.</li> </ul> <p>The level of kernel support, however, always depends on the board family. If in your specific case something does not work well, you are always free to try an image with another kernel included, or change the kernel with armbian-config.</p>"},{"location":"User-Guide_Getting-Started/#rolling-releases","title":"Rolling releases","text":"<p>Rolling releases are suitable for Linux enthusiasts who want cutting edge packages and have the skills to fix the damage that a bad update might cause. If you want stability in a production environment or low headaches as a novice user, skip rolling releases. They are not at a suitable support quality level!</p> <pre><code>graph LR\n  A[Hardware] --&gt; B{Armbian kernel};\n  B --&gt;|legacy| C[\"rolling release\"];\n  B --&gt;|vendor| C[\"rolling release\"];\n  B --&gt;|current| C[\"rolling release\"];\n  B --&gt;|edge| C[\"rolling release\"];\n  B --&gt;|legacy| X[\"point release\"];\n  B --&gt;|vendor| X[\"point release\"];\n  B --&gt;|current| X[\"point release\"];\n  B --&gt;|edge| X[\"point release\"];\n\n\n  C ----&gt;|minimal| E[Debian or Ubuntu];\n  C ----&gt;|server| F[Debian or Ubuntu];\n  C ----&gt;|desktop| G[Debian or Ubuntu];\n\n  X ----&gt;|minimal| E[Debian or Ubuntu];\n  X ----&gt;|server| F[Debian or Ubuntu];\n  X ----&gt;|desktop| G[Debian or Ubuntu];</code></pre> <p>Danger</p> <p>Do not use rolling release or edge images in a productive environment. Their purpose is testing and providing constructive feedback to developers.</p>"},{"location":"User-Guide_Getting-Started/#download-and-verification","title":"Download and verification","text":"<p>After you have determined the image you want, the download for each image consists of three separate files:</p> <ul> <li>the .xz compressed image file</li> <li>the .sha file for download verification (optional)</li> <li>the .asc file for image authentication (optional)</li> </ul> <p>After you have downloaded these files, we recommend checking the integrity and the authenticity of the compressed image file.</p> <p>How to check the download integrity?</p> <p>Since it might happen that your download got somehow corrupted, we publish a checksum/hash for each of our images. You can compare the image\u2019s SHA-256 hash with the one contained in the <code>.sha</code> file.</p> <p>On Windows, you can download and use the QuickHash GUI and follow the instructions in the gui. Linux and macOS users can simply do this in the directory with the compressed image and the checksum file:</p> Bash<pre><code>sha256sum -c Armbian_25.2.1_Bananapicm4io_bookworm_current_6.12.13_minimal.img.xz.sha\n</code></pre> <p>The integrity is verified if the output looks something like this:</p> Bash<pre><code>Armbian_25.2.1_Bananapicm4io_bookworm_current_6.12.13_minimal.img.xz: OK\n</code></pre> <p>How to check the download authenticity?</p> <p>All our images are digitally signed. It is therefore possible to check their authenticity. Linux and macOS user might need to install the required tools first: for Debian/Ubuntu, this can be done via <code>sudo apt-get install gnupg</code>, and for macOS use <code>brew install gnupg</code>. Windows users can install GnuPG from here. To check the authenticity, you will need the public key that was used to sign the images. This key can be retrieved from a keyserver or from the Debian/Ubuntu package repository (this step only needs to be done once):</p> Bash<pre><code># download the public key either from a keyserver\ngpg --keyserver hkp://keyserver.ubuntu.com --recv-key DF00FAF1C577104B50BF1D0093D6889F9F0E78D5\n# or from the repository server\nwget -O- https://apt.armbian.com/armbian.key | gpg --import -\n</code></pre> <p>To perform the verfification, run the command shown below.</p> Bash<pre><code>gpg --verify Armbian_25.2.1_Bananapicm4io_bookworm_current_6.12.13_minimal.img.xz.asc\n</code></pre> <p>While the output can very depending on the GnuPG version, it should result in a response similar to the one below. It is safe to ignore the message <code>WARNING: This key is not certified with a trusted signature!</code>.</p> Bash<pre><code>gpg: Signature made Thu Feb 13 11:53:18 2025 CET\ngpg:                using RSA key DF00FAF1C577104B50BF1D0093D6889F9F0E78D5\ngpg: Good signature from \"Igor Pecovnik &lt;igor@++++++++++++.com&gt;\" [unknown]\ngpg:                 aka \"Igor Pecovnik (Ljubljana, Slovenia) &lt;igor.++++++++++++@gmail.com&gt;\" [unknown]\ngpg: WARNING: This key is not certified with a trusted signature!\ngpg:          There is no indication that the signature belongs to the owner.\nPrimary key fingerprint: DF00 FAF1 C577 104B 50BF  1D00 93D6 889F 9F0E 78D5\n</code></pre> <p>If something is wrong, the output will look something like this:</p> Bash<pre><code>gpg: Signature made Thu Feb 13 11:53:18 2025 CET\ngpg:                using RSA key DF00FAF1C577104B50BF1D0093D6889F9F0E78D5\ngpg: BAD signature from \"Igor Pecovnik &lt;igor@++++++++++++&gt;\" [unknown]\n</code></pre>"},{"location":"User-Guide_Getting-Started/#deploy-the-image","title":"Deploy the image","text":"<p>Write the .xz compressed image with a tool like USBImager onto your micro-SD card. Unlike other tools, it can validate written data saving you from corrupted SD card contents.</p> <p>Other tools</p> <p>We are aware that there are many programs that can be used for this step. But, they usually cannot validate the written data to catch a bad card, a faulty card reader, problems writing the image. etc. Issues like these have caused too many error reports. Thus, please follow our advice and don\u2019t use other tools, especially if you are a novice user.</p> <p>Due to known issues, balenaEtcher can no longer be recommended as an alternative at this time.</p>"},{"location":"User-Guide_Getting-Started/#first-boot","title":"First boot","text":"<p>Insert the SD card into a slot and power on the board. With the cheapest board, the first boot (with DHCP) can take up to two minutes with a class 10 SD card.</p>"},{"location":"User-Guide_Getting-Started/#first-login","title":"First login","text":"<p>The first boot will log you in automatically if you have connected a display via HDMI or if you are connected to the serial console. For SSH, you need to login as root and use the password 1234. If you need to find your board\u2019s IP address, you can use this tool.</p> <p>After logging in, you will be prompted to change the default password. You will then be asked to create a normal user account that will have sudo permissions. Beware, at this stage, the keyboard is using the QWERTY layout. In case you have no wired network connection and there is a wireless adaptor detected, the system will prompt you to connect.</p> Text Only<pre><code>Welcome to Armbian!\n\nDocumentation: https://docs.armbian.com/ | Community support: https://forum.armbian.com/\n\nIP address:  Network connection timeout!\n\nCreate root password: ********\nRepeat root password: ********\n\nShell: BASH\n\nCreating a new user account. Press &lt;Ctrl-C&gt; to abort\n\nPlease provide a username (eg. your first name): jane\nCreate user (Jane) password: ********\nRepeat user (Jane) password: ********\n\nPlease provide your real name: Jane\n\nDear Jane, your account jane has been created and is sudo enabled.\nPlease use this account for your daily work from now on.\n\nInternet connection was not detected.\n\nConnect via wireless? [Y/n] y\n\nMultiple wireless adaptors detected. Choose primary:\n\n1        wlx00e032cxxx94\n2        wlx60fb00yyyc4a\n\nEnter a number of wireles adaptor: 1\n\nDetected wireless networks:\n\n1        NETWORK\n2        MY-WIFI\n3        Caatsanddogs\n\nEnter a number of SSID: 3\n\nEnter a password for MY-WIFI: password\n\nProbing internet connection (9)\n\nDetected timezone: Europe/Ljubljana\n\nSet user language based on your location? [Y/n] y\n\nGenerating locales: sl_SI.UTF-8\nroot@bananapim2pro:~#\n</code></pre> Automated config <p>These settings can be pre-loaded, see Autoconfig</p>"},{"location":"User-Guide_Getting-Started/#first-steps","title":"First steps","text":"<p>You can customize your Armbian Linux before or after installing it onto your device\u2019s hard-drive. In many cases, you probably want to apply some basic customizations like adjusting the keyboard layout, the timezone, etc., so you can use the same SD card again if necessary. Or you want to adjust your system or hardware configuration or install preconfigured applications and advanced services.</p> <p>Please note that the typical tool for all tasks is armbian-config. The section Advanced Configuration contains a selection of tasks that require a deeper understanding of the operating system.</p>"},{"location":"User-Guide_Getting-Started/#configuration","title":"Configuration","text":"<p>Typical tasks include for example:</p> <ul> <li>Set the default language and keyboard layout</li> <li>Disable or enable root logins and/or SSH</li> <li>Handle and configure system and firmware upgrades</li> <li>Configure the network</li> </ul>"},{"location":"User-Guide_Getting-Started/#software-titles","title":"Software titles","text":"<p>You can quickly and easily install popular software too! It is ready to run and optimized for Armbian. Here are few highlights:</p> <ul> <li>Desktops - install desktop environments</li> <li>Netconfig - network tools</li> <li>DevTools - development</li> <li>Benchy - system benchmaking and diagnostics</li> <li>Containers - containerization and virtual machines</li> <li>Media - media servers and editors</li> <li>Management - remote management tools</li> </ul>"},{"location":"User-Guide_Getting-Started/#installation","title":"Installation","text":"<p>At this stage, nothing has been installed onto the board\u2019s internal drive yet. Using the installer, one can now decide where to install the boot loader and the rest of the system. The installer supports various combinations depending on the availability of onboard eMMC and/or attached SATA, NVME, or USB storage.</p> <p>Armbian Installer support those storage scenarios:</p> <ul> <li>boot from SD, system on SATA / USB</li> <li>boot from eMMC / NAND, system on eMMC/NAND</li> <li>boot from eMMC / NAND, system on SATA / USB / NVME</li> <li>Boot from SPI - system on SATA, USB or NVMe</li> <li>Install/Update the bootloader on SD/eMMC</li> <li>Install/Update the bootloader on special eMMC partition</li> <li>Install/Update the bootloader on SPI Flash</li> <li>Install system to UEFI disk</li> </ul> <p>Start the install script, make your choice, and follow the instructions:</p> Text Only<pre><code>armbian-install\n</code></pre> <p></p> <p>After you have decided for an option, you can choose between the following file systems: </p> <ul> <li>ext2,3,4</li> <li>btrfs</li> </ul> <p>For novice users, a sensible default is <code>ext4</code>.</p> <p>Congratulation. You have successfully installed Armbian onto your board!</p>"},{"location":"User-Guide_Getting-Started/#update-the-system","title":"Update the system","text":"<p>The operating system consists of two parts that must be updated separately.</p>"},{"location":"User-Guide_Getting-Started/#update-the-armbian-os","title":"Update the Armbian OS","text":"<p>For the base operating system, use the APT package manager to keep the packages up to date.</p> Text Only<pre><code>apt update\napt upgrade\n</code></pre> <p>The Update process can take quite some time in case you are using an old or a cheap SD card and/or experience heavy load.</p> <p>Users with a desktop will find graphical tools that allow one to update the system packages without using the command line.</p> <p>Armbian provides a firmware package freeze feature to provide you with the possibility to upgrade all packages but the firmware. This prevents unpleasant surprises on functionality regressions that can come with kernel upgrades. To enable or disable this feature, look for</p> Text Only<pre><code>Enable Armbian kernel/firmware upgrades / Disable Armbian kernel upgrades\n</code></pre> <p>within armbian-config.</p> <p>If the kernel was upgraded during this process, you will be prompted to reboot at the next login.</p> <p>Upgrade the Armbian OS</p> <p>When a new major release of Debian or Ubuntu is out, we recommend to start with a fresh image. While it is possible to do what is called a \u201cdist-upgrade\u201d, the process is largerly in the domain of the underlaying Debian or Ubuntu user space. We provide only an experimental <code>Distribution upgrades</code> feature for armbian-config.</p> <p>Userspaces distribution upgrades are neither tested nor supported. Therefore Armbian cannot provide any support if something goes wrong.</p>"},{"location":"User-Guide_Getting-Started/#update-the-boot-loader","title":"Update the boot loader","text":"<p>The second part that can be updated is the boot loader.</p> <p>First, update all packages as described in the previous section. Then run:</p> Bash<pre><code>sudo armbian-install\n</code></pre> <p>and select:</p> Text Only<pre><code>Install/Update the bootloader on SD/eMMC\n</code></pre>"},{"location":"User-Guide_Getting-Started/#troubleshooting","title":"Troubleshooting","text":"<p>If you experience an issue during any of the steps mentioned in this section, please first check out our Troubleshooting and Recovery guide.</p>"},{"location":"User-Guide_Getting-Started/#how-to-report-bugs","title":"How to report bugs","text":"<p>If you are certain you have found a bug, fill out our bug reporting form and follow its instructions to collect the necessary information and how/where to provide them depending on the type of issue. Please understand that any reports lacking these fundamental diagnostics might be ignored.</p>"},{"location":"User-Guide_Networking/","title":"Networking","text":""},{"location":"User-Guide_Networking/#networking","title":"Networking","text":"<p>Armbian uses Netplan.io to describe networking configurations. Netplan is a utility to easily configure Linux networking, using a declarative approach. If you want to configure your network manually, it is as simple as editing and creating Netplan yaml files (see the yaml configuration reference at the Netplan docs).</p> <p>Netplan is used to configure networks on all Armbian images since Release 24.05, no matter if minimal, CLI or desktop, Debian or Ubuntu. However, the networking backends are different based on if you choose a minimal image or not. </p>"},{"location":"User-Guide_Networking/#minimal-images","title":"Minimal images","text":"<p>Netplan renderer: networkd</p> <p>Minimal images are using the <code>systemd-networkd</code> backend, which has a smaller footprint compared to <code>Network-Manager</code> which is used in all non-minimal images. <code>systemd-networkd</code> is a system daemon that manages network configurations. It detects and configures network devices as they appear; it can also create virtual network devices. This service is great for simple connections, but can also be useful to set up complex network configurations.</p>"},{"location":"User-Guide_Networking/#armbian-defaults","title":"Armbian defaults","text":"<p>All ethernet interfaces are configured for DHCP and will automatically receive an IP address from your router.</p> <p><code>/etc/netplan/10-dhcp-all-interfaces.yaml</code>:</p> YAML<pre><code>network:\n  version: 2\n  renderer: networkd\n  ethernets:\n    all-eth-interfaces:\n      match:\n        name: \"e*\"\n      dhcp4: yes\n      dhcp6: yes\n      ipv6-privacy: yes\n</code></pre>"},{"location":"User-Guide_Networking/#configuration-examples","title":"Configuration examples","text":""},{"location":"User-Guide_Networking/#setting-a-fixed-ip-address","title":"Setting a fixed IP address","text":"<p>When creating an additional .yaml file be sure to remove the default file (/etc/netplan/10-dhcp-all-interfaces.yaml) as the default will overide.</p> <p>The following example configures a static IP <code>192.168.1.199</code> for the <code>eth0</code> interface. Please adjust as necessary.</p> <p>How to find your device\u2019s Ethernet interface?</p> <p>Use command:</p> <p>Bash<pre><code>ip addr\n</code></pre> It is usually something like <code>eth0</code>, <code>enp4s3</code> or <code>lan</code>.</p> <p><code>/etc/netplan/20-static-ip.yaml</code>:</p> YAML<pre><code>network:\n  version: 2\n  renderer: networkd\n  ethernets:\n    eth0: # Change this to your ethernet interface\n      addresses:\n      - 192.168.1.199/24\n      routes:\n      - to: default\n        via: 192.168.1.1\n      nameservers:\n       addresses:\n         - 9.9.9.9\n         - 1.1.1.1\n</code></pre> <p>See also the Netplan docs for reference.</p>"},{"location":"User-Guide_Networking/#connecting-to-wifi-network","title":"Connecting to WiFI network","text":"<p>It is recommended to make a separate config file for wireless network.</p> <p>Create the following file:</p> <p><code>sudo nano /etc/netplan/30-wifis-dhcp.yaml</code>:</p> YAML<pre><code>network:\n  version: 2\n  renderer: networkd\n  wifis:\n    wlan0:\n      dhcp4: true\n      dhcp6: true\n      access-points:\n        \"Your-SSID\":\n          password: \"your-password\"\n</code></pre> <p>Replace <code>SSID</code> with the name of the network you want to connect to and <code>wlan0</code> with the wifi interface used on your system.</p> <p>How to find your device\u2019s WiFi interface?</p> <p>Use command:</p> <p>Bash<pre><code>iw dev | awk '$1==\"Interface\"{print $2}'\n</code></pre> It is usually something like <code>wlan0</code>, <code>wlo1</code> or <code>wlx12334c47dec3</code>. If you get blank response, it means your WiFi device / dongle is not supported by the kernel.</p> <p>See also the Netplan docs for reference.</p>"},{"location":"User-Guide_Networking/#applying-your-configuration","title":"Applying your configuration","text":"<p>Once you are done configuring your network, it is time to test syntax and apply it.</p>"},{"location":"User-Guide_Networking/#fix-file-permissions","title":"Fix file permissions","text":"<p>According to the Netplan docs, the permissions must be restricted to the <code>root</code> user.</p> Bash<pre><code>sudo chmod 600 /etc/netplan/*.yaml\n</code></pre>"},{"location":"User-Guide_Networking/#test-syntax","title":"Test syntax","text":"<p>This will verify the syntax and test if your device can connect</p> <p>Bash<pre><code>sudo netplan try\n</code></pre> If there are no warmings or errors and you hit ENTER as suggested the changes will be made and the next, nextplan apply, step can be skipped.</p>"},{"location":"User-Guide_Networking/#apply-the-configuration","title":"Apply the configuration","text":"Bash<pre><code>sudo netplan apply\n</code></pre>"},{"location":"User-Guide_Networking/#cli-and-desktop-images","title":"CLI and desktop images","text":"<p>Netplan renderer: Network Manager</p> <p>Server CLI and desktop images are using the <code>Network-Manager</code> backend. You can use similar methods for configuring your network as with the <code>networkd</code> backend used on minimal images.</p>"},{"location":"User-Guide_Networking/#setting-a-fixed-ip-address_1","title":"Setting a fixed IP address","text":"<p>The following example configures a static IP <code>192.168.1.199</code> for the <code>eth0</code> interface. Please adjust the example to your likings.</p> <p>How to find your device\u2019s Ethernet interface?</p> <p>Use command:</p> <p>Bash<pre><code>ip addr\n</code></pre> It is usually something like <code>eth0</code>, <code>enp4s3</code> or <code>lan</code>.</p> <p><code>/etc/netplan/20-static-ip.yaml</code>:</p> YAML<pre><code>network:\n  version: 2\n  renderer: NetworkManager # Different than 'networkd'\n  ethernets:\n    eth0: # Change this to your ethernet interface\n      addresses:\n      - 192.168.1.199/24\n      routes:\n      - to: default\n        via: 192.168.1.1\n      nameservers:\n       addresses:\n         - 9.9.9.9\n         - 1.1.1.1\n</code></pre> <p>See also the Netplan docs for reference.</p> <p>Alternatively, you can also use Network-Manager directly via the command line or GUI tools on your desktop:</p> Bash<pre><code>nmtui-edit eth0\n</code></pre> Display screenshot <p></p> <p>Replace <code>eth0</code> with the name of your Ethernet Interface.</p>"},{"location":"User-Guide_Networking/#connecting-to-wifi-network_1","title":"Connecting to WiFI network","text":"<p>For connecting to a wireless network, you can use the same method as mention above for use with <code>networkd</code> on minimal images. Just make sure to replace <code>renderer: networkd</code> with <code>renderer: NetworkManager</code>.</p> <p>Alternatively, you can also use Network-Manager directly via the command line or GUI tools on your desktop:</p> Bash<pre><code>nmtui-connect SSID\n</code></pre> Display screenshot <p></p> <p>Replace <code>SSID</code> with the name of your wireless network.</p>"},{"location":"User-Guide_Troubleshooting/","title":"Hardware troubleshooting guide","text":"<p>First aid video guide:</p> <p>If you are experiencing at least one of these problems:</p> <ul> <li>board does not boot</li> <li>board freezes, crashes or reboots randomly or when connecting USB devices</li> <li>plugged in USB devices are not detected (not listed in <code>lsusb</code> output)</li> <li>error changing the root password at first boot (Authentication token manipulation error)</li> <li>error installing or updating packages due to read-only file system</li> </ul> <p>and you are using a stable Armbian image, then most likely you have one of two common problems - powering issue or SD card issue.</p> <p>Note that</p> <ul> <li>\u201cI know that my power supply is good\u201d, \u201cit worked yesterday\u201d, \u201cit works with a different device\u201d, etc. are not objective reasons to skip powering related diagnostics</li> <li>\u201cI know that my SD card is good\u201d, \u201cit worked yesterday\u201d, \u201cit works with a different device\u201d, etc. are not objective reasons to skip storage related diagnostics</li> <li>undervoltage can cause symptoms related to SD card problems such as filesystem corruptions and data loss, so powering has to be checked first</li> </ul>"},{"location":"User-Guide_Troubleshooting/#powering-notes","title":"Powering notes","text":"<ul> <li>Most boards, even ones fitted with PMIC (power management integrated circuit) do not have any measures to react to undervoltage that could prevent instability</li> <li>It does not matter what voltage your power supply outputs, it matters what voltage will reach the onboard voltage regulators</li> <li>Peak power consumption of popular boards can vary from 0.9A at 5V (H3 based Orange Pi PC) to 1.7A at 5V (RK3288 based Tinkerboard), both without any attached peripherials like USB devices</li> <li>Due to the Ohm\u2019s law voltage drop due to cable and connector resistance will be proportional to the electric current, so most of the time problems will be experienced at current spikes caused by CPU load or peripherials like spinning up HDDs</li> </ul>"},{"location":"User-Guide_Troubleshooting/#power-supply","title":"Power supply","text":"<ul> <li>Cheap phone chargers may not provide the current listed on their label, especially for long time periods</li> <li>Some cheap phone chargers don\u2019t have proper feedback based stabilization, so output voltage may change depending on load</li> <li>Power supplies will degrade over time (especially when working 24/7)</li> <li>Some problems like degraded output filtering capacitors cannot be diagnosed even with a multimeter because of the non-linear voltage form</li> </ul>"},{"location":"User-Guide_Troubleshooting/#cable","title":"Cable","text":"<ul> <li>The longer and thinner the cable - the higher its resistance - the greater the voltage drop will be under load</li> <li>Even thick looking cable can have thin wires inside, so do not trust the outside cable diameter</li> </ul>"},{"location":"User-Guide_Troubleshooting/#connector","title":"Connector","text":"<ul> <li>MicroUSB connector is rated for the maximum current of 1.8A, but even this number cannot be guaranteed. Trying to pass larger current (even momentarily) may result in a voltage dropping below USB specifications</li> <li>Most of the boards can also be powered through GPIO pins. This can be used to bypass the microUSB connector and thus to improve stability</li> </ul>"},{"location":"User-Guide_Troubleshooting/#sd-card","title":"SD card","text":"<ul> <li>A SD card is a complex storage device with an embedded controller that processes read, erase and write operations, wear leveling, error and corruption detection, but it does not provide any diagnostic protocols like S.M.A.R.T.</li> <li>SD cards will degrade over time and may fail in the end in different ways - become completely or partially read-only or cause a silent data corruption</li> </ul>"},{"location":"User-Guide_Troubleshooting/#sd-card-brand","title":"SD card brand","text":"<ul> <li>Based on current prices and performance tests done by Armbian users Samsung Evo, Samsung Evo Plus and Sandisk Ultra cards are recommended</li> <li>Other good alternatives may be added to this page in the future</li> </ul>"},{"location":"User-Guide_Troubleshooting/#sd-card-size-and-speed-class","title":"SD card size and speed class","text":"<ul> <li>SD card speed class and size does not influence the reliability directly, but larger size means larger amount of lifetime data written, even if you are using 10-20% of the cards space</li> </ul>"},{"location":"User-Guide_Troubleshooting/#sd-card-testing","title":"SD card testing","text":"<ul> <li>There are many fake SD card around. eBay and Amazon Marketplace are notorious for selling fakes, but sometimes even reputable retailers get fooled.</li> <li>Most commonly low capacity cards will be reprogrammed to appear as bigger, but any files written beyond the true capacity will be lost or corrupted.</li> <li>We recommend to always test the capacity of each new SD cards using f3.</li> </ul>"},{"location":"User-Guide_Troubleshooting/#writing-images-to-the-sd-card","title":"Writing images to the SD card","text":"<ul> <li>If you wrote an image to the card it does not mean that it was written successfully without any errors</li> <li>so always verify images after write using some tools like balenaEtcher which is currently the only popular and cross-platform tool that does mandatory verify on write (more lightweight alternatives may be added to this page in the future)</li> <li>\u201cCheck for bad blocks\u201d function available in some tools is mostly useless when dealing with SD cards</li> <li>Note that balenaEtcher verifies only 1-2GB that are occupied by the initial unresized image, it does not verify the whole SD card</li> </ul>"},{"location":"User-Guide_Troubleshooting/#network","title":"Network","text":""},{"location":"User-Guide_Troubleshooting/#mac-address-conflicts","title":"MAC Address Conflicts","text":"<p>If you experience strange network problems, especially if you are running several of these SOC-boards with the same operating system, then the problems may be sourced by not having a real hardware MAC address. The operating systems try to generate a hardware MAC address from the CPUid, but what if that SOC has no CPUid either?</p> <p>Then you have to do it manually. Depending on system and network installation, there are several possibilities:</p> <ul> <li>the preferred way: change <code>/boot/armbianEnv.txt</code> and add a line:Text Only<pre><code>  ethaddr=XX:XX:XX:XX:XX:XX\n</code></pre> </li> </ul> <p>but that file is interpreted by u-boot, which happens early in boot process, but not every u-boot is able to read that file.</p> <ul> <li>next possibility to set mac-address is changing network configuration. On systems with ifupdown you can do that by changing <code>/etc/network/interfaces</code>. Add these lines:Text Only<pre><code>  auto eth0\n  iface eth0 inet dhcp\n      hwaddress ether XX:XX:XX:XX:XX:XX\n</code></pre> </li> </ul> <ul> <li>if the above does not work, then your network is probably controlled by Network-manager . In directory <code>/etc/Networkmanager/system-connections</code> is a file <code>Wired connection 1.nmconnection</code>. Change entry cloned-mac-address of group [ethernet] :Text Only<pre><code>  [connection]\n  id=Wired connection 1\n  type=ethernet\n\n  [ethernet]\n  cloned-mac-address=XX:XX:XX:XX:XX:XX\n</code></pre> </li> </ul>"},{"location":"User-Guide_Troubleshooting/#video","title":"Video","text":""},{"location":"User-Guide_Troubleshooting/#no-screen-on-4k-resolution","title":"No Screen on 4k Resolution","text":"<p>Some combination of boards/kernel versions does not support 4k resolution. This may cause black screen on connecting the board to 4k resolution devices. A workaround to solve this without changing the kernel is forcing the video mode to 1080p. Add this directive to the <code>/boot/armbianEnv.txt</code> and reboot your system:</p> Text Only<pre><code>extraargs=video=HDMI-A-1:1920x1080@60\n</code></pre> <ul> <li>Despite of this config, some apps may try to use 4k resolution, example: Retroarch. In this case you have to change app configuration to use the 1080p resolution.</li> </ul> <ul> <li>To edit files without video you could connect to the board using ssh. Other option is mount the sd card in another device.</li> </ul>"},{"location":"User-Guide_Troubleshooting/#board-configuration","title":"Board configuration","text":"<ul> <li>Some boards require the setup of the correct device tree file or they will not boot. Check the board specific documentation for details.</li> </ul>"},{"location":"User-Guide_Troubleshooting/#recovery","title":"Recovery","text":"<p>In 95 percent of all cases it is either a faulty/fraud/counterfeit SD card or an insufficient power supply that is causing all sorts of does not work issues! So, please, make sure you checked the sections above before proceeding.</p> <p>The following options are presented in (more or less) increasing levels of despair.  But keep heart!  :)  And proceed in order.</p>"},{"location":"User-Guide_Troubleshooting/#u-boot-shell-access","title":"U-Boot Shell Access","text":"<p>If you broke the system you can try to get in this way.  You have to get to u-boot command prompt, using either a serial adapter or monitor and usb keyboard.</p> <ul> <li>Note: USB support in u-boot is currently not enabled on all H3 boards.</li> </ul> <p>After switching power on or rebooting, when u-boot loads up, press some key on the keyboard (or send some key presses via terminal) to abort default boot sequence and get to the command prompt:</p> Bash Session<pre><code>U-Boot SPL 2015.07-dirty (Oct 01 2015 - 15:05:21)\n...\nHit any key to stop autoboot:  0\nsunxi#\n</code></pre> <p>Enter the following commands, replacing root device path if necessary.</p> <ul> <li>Note: these are for booting with mainline kernel; check <code>boot.cmd</code> for your device for commands related to legacy kernel.</li> </ul> <p>For serial:</p> Bash Session<pre><code>sunxi# setenv bootargs init=/bin/bash root=/dev/mmcblk0p1 rootwait console=ttyS0,115200\n</code></pre> <p>For monitor:</p> Bash Session<pre><code>sunxi# setenv bootargs init=/bin/bash root=/dev/mmcblk0p1 rootwait console=tty1\n</code></pre> <p>Then:</p> Bash Session<pre><code>sunxi# ext4load mmc 0 0x49000000 /boot/dtb/${fdtfile}\nsunxi# ext4load mmc 0 0x46000000 /boot/zImage\nsunxi# env set fdt_high ffffffff\nsunxi# bootz 0x46000000 - 0x49000000\n</code></pre> <p>System should eventually boot to bash shell:</p> Bash Session<pre><code>root@host:/#\n</code></pre> <p>Now you can try to fix your broken system.</p>"},{"location":"User-Guide_Troubleshooting/#replacing-boot","title":"Replacing /boot","text":"<p>When something goes terribly wrong and you are not able to boot the system (and cannot gain access via u-boot as outlined above), this is the way to proceed.  You will need some Debian based Linux machine where you can mount the failed SD card.  With this procedure you will reinstall the kernel and hardware settings.  In most cases this should be enough to unbrick the board.</p> <p>It is recommended to issue a filesystem check before mounting.  Replace <code>X</code> and <code>Y</code> below with your device and partition(s), respectively (if not a flash based device, it may even be <code>/dev/sdXY</code>, etc).</p> Bash Session<pre><code>/ # fsck /dev/mmcblkXpY -f\n</code></pre> <p>Mount the SD card.</p> Bash Session<pre><code>/ # cd /mnt\n/mnt # mkdir sdcard\n/mnt # mount /dev/mmcblkXpY /mnt/sdcard\n</code></pre> <p>Make another temporary directory somewhere else (in our example <code>~/tmp/recovery</code>) and download the Linux root, kernel, firmware and dtb packages for your board and currently used OS.</p> <ul> <li>Note: This example is only for Nanopi Neo 2 with Ubuntu Focal, current kernel (mainline) and Armbian 20.08.13 firmware.  Alter package names according to your device name, SOC-family, kernel and firmware version!</li> </ul> Bash Session<pre><code>/mnt $ cd\n~ $ mkdir -p tmp/recovery\n~ $ cd tmp/recovery\n\n(Root file system):\n~/tmp/recovery $ wget https://apt.armbian.com/pool/main/l/linux-focal-root-current-nanopineo2/linux-focal-root-current-nanopineo2_20.08.13_arm64.deb\n\n(Kernel):\n~/tmp/recovery $ wget https://apt.armbian.com/pool/main/l/linux-5.8.16-sunxi64/linux-image-current-sunxi64_20.08.13_arm64.deb\n\n(Firmware):\n~/tmp/recovery $ wget https://apt.armbian.com/pool/main/a/armbian-firmware/armbian-firmware_20.08.13_all.deb\n\n(Device Tree Binary (DTB)):\n~/tmp/recovery $ wget https://apt.armbian.com/pool/main/l/linux-5.8.16-sunxi64/linux-dtb-current-sunxi64_20.08.13_arm64.deb\n</code></pre> <p>Extract all the Debian packages (<code>.deb</code> files) to the mounted sd card.</p> Bash Session<pre><code>~/tmp/recovery # for f in *.deb; do dpkg -x $f /mnt/sdcard; done\n</code></pre> <p>Navigate to <code>/mnt/sdcard/boot</code> and create symlinks:</p> Bash Session<pre><code>~/tmp/recovery # cd /mnt/sdcard/boot\n/mnt/sdcard/boot # ln -s vmlinuz-5.8.16-sunxi64 zImage\n/mnt/sdcard/boot # ln -s uInitrd-5.8.16-sunxi64 uInitrd\n/mnt/sdcard/boot # ln -s dtb-5.8.16 dtb\n</code></pre> <p>If you upgrade from some very old build, you might need to update your boot script.</p> <ul> <li>Note: The following example is for Allwinner boards.</li> </ul> <ul> <li>Note: You will need a <code>u-boot-tools</code> package on your host system.</li> </ul> Bash Session<pre><code>/mnt/sdcard/boot # wget https://raw.githubusercontent.com/armbian/build/master/config/bootscripts/boot-sunxi.cmd\n/mnt/sdcard/boot # mv boot-sunxi.cmd boot.cmd\n/mnt/sdcard/boot # mkimage -C none -A arm -T script -d boot.cmd boot.scr\n</code></pre> <p>Unmount SD card.</p> Bash Session<pre><code>/mnt/sdcard/boot # cd /\n/ # umount /mnt/sdcard\n</code></pre> <p>Move it to the board and power on.  Check serial output for errors if problems persist.</p>"},{"location":"User-Guide_Troubleshooting/#flashing-boot-loader","title":"Flashing boot loader","text":"<p>Sometimes we need to flash boot loader from some other Linux. Attach an SD card reader with your SD card and proceed this way:</p> Bash Session<pre><code>/mnt $ cd\n~ $ mkdir -p tmp/recovery\n~ $ cd tmp/recovery\n~ $ wget https://imola.armbian.com/apt/pool/main/l/linux-u-boot-nanopineo2-current/linux-u-boot-current-nanopineo2_20.08.13_arm64.deb\n~ $ dpkg-deb -x linux-u-boot-current-nanopineo2_20.08.13_arm64.deb pack\n~ $ source pack/usr/lib/u-boot/platform_install.sh\n~ $ write_uboot_platform pack/usr/lib/linux-u-boot-nanopineo2-current /dev/XXX # replace XXX with the actual device /dev/sdb\n</code></pre> <p>Move it to the board and power on.  Check serial output for errors if problems persist.</p>"},{"location":"WifiPerformance/","title":"Testing the speed of wireless adapters","text":"<p>All wireless adapters were tested under consistent conditions - each positioned in close proximity (1-2m) and connected to the same wireless access point (AP). The adapters utilized various interface types, including USB, SDIO, and PCI, to evaluate performance across different hardware configurations.</p> <p> </p>"},{"location":"WifiPerformance/#test-equipment","title":"Test Equipment","text":"<ul> <li>Access Point: Zyxel NWA130BE (Wi-Fi 7)</li> <li>Network Switches: <ul> <li>Netgear XS712T  </li> <li>Netgear XS508M</li> </ul> </li> <li>Power Switches: APC AP7920  </li> <li>Client Devices:<ul> <li>Multiple single-board computers equipped with onboard wireless modules or PCI Wi-Fi cards</li> <li>USB wireless test server: Geekom IT13 with an i-Tec 16-port USB 3.0 hub</li> </ul> </li> </ul>"},{"location":"WifiPerformance/#software-and-infrastructure","title":"Software and Infrastructure","text":"<ul> <li>Infrastructure Database: NetBox for resource modeling and inventory</li> <li>Automation: GitHub Actions for workflow orchestration and test execution</li> <li>Networking: Tailscale for secure device connectivity across the test environment</li> <li>Test Platform: KVM virtual machine running the latest x86 Armbian image for USB wireless testing</li> </ul>"},{"location":"WifiPerformance/#methodology","title":"Methodology","text":"<p>Overview of the WiFi performance test process:</p> <ol> <li> <p>\u26a1 Power On Devices    \u2514\u2500 Embedded WiFi-capable devices and USB wireless adapters are powered on.</p> </li> <li> <p>\ud83c\udf10 Configure Wireless Connection    \u2514\u2500 Devices are configured to connect to a predefined access point (SSID).</p> </li> <li> <p>\ud83d\udcf6 Connect to WiFi Network    \u2514\u2500 Network connectivity is validated to ensure the device is routable.</p> </li> <li> <p>\ud83d\udcca Measure Performance (iperf3)    \u251c\u2500 Perform reverse (<code>-R</code>) and forward iperf3 tests    \u2514\u2500 Measure throughput and link quality.</p> </li> <li> <p>\ud83d\udd0d Collect System &amp; Network Info    \u251c\u2500 Extract link details (e.g. bitrate, signal strength)    \u2514\u2500 Record system version, kernel, architecture.</p> </li> <li> <p>\ud83d\udd01 Restore Wired Network    \u2514\u2500 Reapply original routes and configuration.</p> </li> <li> <p>\u2601\ufe0f Upload Test Results    \u2514\u2500 Summary, logs, and system info are uploaded as artifacts.</p> </li> <li> <p>\ud83d\udcf4 Power Off Devices    \u2514\u2500 All test devices are safely powered down after testing completes.</p> </li> </ol>"},{"location":"WifiPerformance/#devices-under-tests","title":"Devices Under Tests","text":"<p>This section presents the performance test results, including key metrics and technical details from the test execution. Test Date: 2025-05-28 14:49 UTC</p>"},{"location":"WifiPerformance/#ac","title":"AC","text":""},{"location":"WifiPerformance/#broadcom-4345","title":"Broadcom 4345","text":"<p> OS: Armbian v25.2.2, 6.12.15-current-bcm2711</p> Chipset Class Average forward speed Average reverse speed BCM4345 AC 226 Mbits/sec 264 Mbits/sec Forward mode (client to server)Reverse mode (server to client)Wireless link info Text Only<pre><code>Connecting to host 10.0.60.10, port 5201\nReverse mode, remote host 10.0.60.10 is sending\n[  5] local 10.0.50.131 port 36947 connected to 10.0.60.10 port 5201\n[ ID] Interval           Transfer     Bitrate\n[  5]   0.00-1.00   sec  24.9 MBytes   209 Mbits/sec                  \n[  5]   1.00-2.00   sec  26.9 MBytes   225 Mbits/sec                  \n[  5]   2.00-3.00   sec  25.1 MBytes   210 Mbits/sec                  \n[  5]   3.00-4.00   sec  28.3 MBytes   237 Mbits/sec                  \n[  5]   4.00-5.00   sec  26.8 MBytes   225 Mbits/sec                  \n[  5]   5.00-6.00   sec  27.2 MBytes   228 Mbits/sec                  \n[  5]   6.00-7.00   sec  26.9 MBytes   226 Mbits/sec                  \n[  5]   7.00-8.00   sec  27.2 MBytes   228 Mbits/sec                  \n[  5]   8.00-9.00   sec  26.9 MBytes   226 Mbits/sec                  \n[  5]   9.00-10.00  sec  26.9 MBytes   226 Mbits/sec                  \n- - - - - - - - - - - - - - - - - - - - - - - - -\n[ ID] Interval           Transfer     Bitrate         Retr\n[  5]   0.00-10.02  sec   270 MBytes   226 Mbits/sec  773             sender\n[  5]   0.00-10.00  sec   267 MBytes   224 Mbits/sec                  receiver\n\niperf Done.\n</code></pre> Text Only<pre><code>Connecting to host 10.0.60.10, port 5201\n[  5] local 10.0.50.131 port 54545 connected to 10.0.60.10 port 5201\n[ ID] Interval           Transfer     Bitrate         Retr  Cwnd\n[  5]   0.00-1.00   sec  33.8 MBytes   283 Mbits/sec    0    979 KBytes       \n[  5]   1.00-2.00   sec  30.0 MBytes   252 Mbits/sec    0   1.07 MBytes       \n[  5]   2.00-3.00   sec  31.2 MBytes   262 Mbits/sec    0   1.19 MBytes       \n[  5]   3.00-4.00   sec  31.2 MBytes   262 Mbits/sec    0   1.33 MBytes       \n[  5]   4.00-5.00   sec  31.2 MBytes   262 Mbits/sec    0   1.33 MBytes       \n[  5]   5.00-6.00   sec  31.2 MBytes   262 Mbits/sec    0   1.39 MBytes       \n[  5]   6.00-7.00   sec  32.5 MBytes   273 Mbits/sec    0   1.39 MBytes       \n[  5]   7.00-8.00   sec  31.2 MBytes   262 Mbits/sec    0   1.46 MBytes       \n[  5]   8.00-9.00   sec  31.2 MBytes   262 Mbits/sec    0   1.46 MBytes       \n[  5]   9.00-10.00  sec  31.2 MBytes   262 Mbits/sec    0   1.46 MBytes       \n- - - - - - - - - - - - - - - - - - - - - - - - -\n[ ID] Interval           Transfer     Bitrate         Retr\n[  5]   0.00-10.00  sec   315 MBytes   264 Mbits/sec    0             sender\n[  5]   0.00-10.01  sec   312 MBytes   262 Mbits/sec                  receiver\n\niperf Done.\n</code></pre> Text Only<pre><code>freq: 5500\nRX: 154671 bytes (411 packets)\nTX: 89165 bytes (523 packets)\nsignal: -37 dBm\nrx bitrate: 433.3 MBit/s\ntx bitrate: 433.3 MBit/s\n</code></pre>"},{"location":"WifiPerformance/#compex-wle900vx","title":"Compex WLE900VX","text":"<p> OS: Armbian v25.08.0-trunk, 6.12.28-edge-mvebu</p> Chipset Class Average forward speed Average reverse speed QCA9880 AC 118 Mbits/sec 107 Mbits/sec Forward mode (client to server)Reverse mode (server to client)Wireless link info Text Only<pre><code>Connecting to host 10.0.60.10, port 5201\nReverse mode, remote host 10.0.60.10 is sending\n[  5] local 10.0.50.126 port 41633 connected to 10.0.60.10 port 5201\n[ ID] Interval           Transfer     Bitrate\n[  5]   0.00-1.00   sec  13.3 MBytes   112 Mbits/sec                  \n[  5]   1.00-2.00   sec  13.9 MBytes   117 Mbits/sec                  \n[  5]   2.00-3.00   sec  13.9 MBytes   117 Mbits/sec                  \n[  5]   3.00-4.00   sec  13.7 MBytes   115 Mbits/sec                  \n[  5]   4.00-5.00   sec  13.8 MBytes   115 Mbits/sec                  \n[  5]   5.00-6.00   sec  12.9 MBytes   109 Mbits/sec                  \n[  5]   6.00-7.00   sec  14.4 MBytes   121 Mbits/sec                  \n[  5]   7.00-8.00   sec  13.6 MBytes   114 Mbits/sec                  \n[  5]   8.00-9.00   sec  14.0 MBytes   118 Mbits/sec                  \n[  5]   9.00-10.00  sec  13.8 MBytes   116 Mbits/sec                  \n- - - - - - - - - - - - - - - - - - - - - - - - -\n[ ID] Interval           Transfer     Bitrate         Retr\n[  5]   0.00-10.03  sec   141 MBytes   118 Mbits/sec    5             sender\n[  5]   0.00-10.00  sec   137 MBytes   115 Mbits/sec                  receiver\n\niperf Done.\n</code></pre> Text Only<pre><code>Connecting to host 10.0.60.10, port 5201\n[  5] local 10.0.50.126 port 49285 connected to 10.0.60.10 port 5201\n[ ID] Interval           Transfer     Bitrate         Retr  Cwnd\n[  5]   0.00-1.00   sec  12.6 MBytes   106 Mbits/sec    0    516 KBytes       \n[  5]   1.00-2.00   sec  12.4 MBytes   104 Mbits/sec    0    571 KBytes       \n[  5]   2.00-3.00   sec  13.0 MBytes   109 Mbits/sec    0    641 KBytes       \n[  5]   3.00-4.00   sec  12.1 MBytes   101 Mbits/sec    0    641 KBytes       \n[  5]   4.00-5.00   sec  13.5 MBytes   114 Mbits/sec    0    779 KBytes       \n[  5]   5.00-6.00   sec  12.8 MBytes   107 Mbits/sec    0    779 KBytes       \n[  5]   6.00-7.00   sec  12.5 MBytes   105 Mbits/sec    0    779 KBytes       \n[  5]   7.00-8.00   sec  12.5 MBytes   105 Mbits/sec    0    905 KBytes       \n[  5]   8.00-9.00   sec  13.1 MBytes   110 Mbits/sec    0    905 KBytes       \n[  5]   9.00-10.00  sec  12.7 MBytes   106 Mbits/sec    0    905 KBytes       \n- - - - - - - - - - - - - - - - - - - - - - - - -\n[ ID] Interval           Transfer     Bitrate         Retr\n[  5]   0.00-10.00  sec   127 MBytes   107 Mbits/sec    0             sender\n[  5]   0.00-10.02  sec   125 MBytes   105 Mbits/sec                  receiver\n\niperf Done.\n</code></pre> Text Only<pre><code>freq: 2462\nRX: 112340 bytes (497 packets)\nTX: 58510 bytes (236 packets)\nsignal: -28 dBm\nrx bitrate: 144.4 MBit/s MCS 15 short GI\n</code></pre>"},{"location":"WifiPerformance/#edup-ep-ac1681","title":"EDUP EP-AC1681","text":"<p> OS: Armbian v25.5.0-trunk.550, 6.12.28-current-x86</p> Chipset Class Average forward speed Average reverse speed RTL88x2BU AC 95.0 Mbits/sec 53.9 Mbits/sec Forward mode (client to server)Reverse mode (server to client)Wireless link info Text Only<pre><code>Connecting to host 10.0.60.10, port 5201\nReverse mode, remote host 10.0.60.10 is sending\n[  5] local 10.0.50.181 port 50439 connected to 10.0.60.10 port 5201\n[ ID] Interval           Transfer     Bitrate\n[  5]   0.00-1.00   sec  10.2 MBytes  85.9 Mbits/sec                  \n[  5]   1.00-2.00   sec  10.4 MBytes  87.0 Mbits/sec                  \n[  5]   2.00-3.00   sec  11.0 MBytes  92.3 Mbits/sec                  \n[  5]   3.00-4.00   sec  11.1 MBytes  93.3 Mbits/sec                  \n[  5]   4.00-5.00   sec  11.6 MBytes  97.5 Mbits/sec                  \n[  5]   5.00-6.00   sec  11.5 MBytes  96.5 Mbits/sec                  \n[  5]   6.00-7.00   sec  11.6 MBytes  97.5 Mbits/sec                  \n[  5]   7.00-8.00   sec  11.5 MBytes  96.5 Mbits/sec                  \n[  5]   8.00-9.00   sec  11.9 MBytes  99.6 Mbits/sec                  \n[  5]   9.00-10.00  sec  11.8 MBytes  98.6 Mbits/sec                  \n- - - - - - - - - - - - - - - - - - - - - - - - -\n[ ID] Interval           Transfer     Bitrate         Retr\n[  5]   0.00-10.01  sec   113 MBytes  95.0 Mbits/sec    0             sender\n[  5]   0.00-10.00  sec   113 MBytes  94.5 Mbits/sec                  receiver\n\niperf Done.\n</code></pre> Text Only<pre><code>Connecting to host 10.0.60.10, port 5201\n[  5] local 10.0.50.181 port 48349 connected to 10.0.60.10 port 5201\n[ ID] Interval           Transfer     Bitrate         Retr  Cwnd\n[  5]   0.00-1.00   sec  7.38 MBytes  61.8 Mbits/sec    0    311 KBytes       \n[  5]   1.00-2.00   sec  6.75 MBytes  56.6 Mbits/sec    0    587 KBytes       \n[  5]   2.00-3.00   sec  6.50 MBytes  54.5 Mbits/sec    0    716 KBytes       \n[  5]   3.00-4.00   sec  7.38 MBytes  61.9 Mbits/sec    0    754 KBytes       \n[  5]   4.00-5.00   sec  5.50 MBytes  46.1 Mbits/sec    0    754 KBytes       \n[  5]   5.00-6.00   sec  7.00 MBytes  58.7 Mbits/sec    0    792 KBytes       \n[  5]   6.00-7.00   sec  5.50 MBytes  46.1 Mbits/sec    0    843 KBytes       \n[  5]   7.00-8.00   sec  7.00 MBytes  58.7 Mbits/sec    0    843 KBytes       \n[  5]   8.00-9.00   sec  5.62 MBytes  47.2 Mbits/sec    0    885 KBytes       \n[  5]   9.00-10.00  sec  5.62 MBytes  47.2 Mbits/sec    0    885 KBytes       \n- - - - - - - - - - - - - - - - - - - - - - - - -\n[ ID] Interval           Transfer     Bitrate         Retr\n[  5]   0.00-10.00  sec  64.2 MBytes  53.9 Mbits/sec    0             sender\n[  5]   0.00-10.05  sec  61.6 MBytes  51.4 Mbits/sec                  receiver\n\niperf Done.\n</code></pre> Text Only<pre><code>freq: 2462.0\nRX: 188015 bytes (464 packets)\nTX: 100288 bytes (498 packets)\nsignal: -40 dBm\nrx bitrate: 130.0 MBit/s MCS 15\ntx bitrate: 144.4 MBit/s MCS 15 short GI\n</code></pre>"},{"location":"WifiPerformance/#realtek-8811au","title":"Realtek 8811AU","text":"<p> OS: Armbian v25.5.0-trunk.550, 6.12.28-current-x86</p> Chipset Class Average forward speed Average reverse speed RTL8812AU AC 153 Mbits/sec 198 Mbits/sec Forward mode (client to server)Reverse mode (server to client)Wireless link info Text Only<pre><code>Connecting to host 10.0.60.10, port 5201\nReverse mode, remote host 10.0.60.10 is sending\n[  5] local 10.0.50.182 port 48835 connected to 10.0.60.10 port 5201\n[ ID] Interval           Transfer     Bitrate\n[  5]   0.00-1.00   sec  16.8 MBytes   140 Mbits/sec                  \n[  5]   1.00-2.00   sec  18.2 MBytes   153 Mbits/sec                  \n[  5]   2.00-3.00   sec  18.6 MBytes   156 Mbits/sec                  \n[  5]   3.00-4.00   sec  18.2 MBytes   153 Mbits/sec                  \n[  5]   4.00-5.00   sec  18.2 MBytes   153 Mbits/sec                  \n[  5]   5.00-6.00   sec  18.2 MBytes   153 Mbits/sec                  \n[  5]   6.00-7.00   sec  18.4 MBytes   154 Mbits/sec                  \n[  5]   7.00-8.00   sec  18.1 MBytes   152 Mbits/sec                  \n[  5]   8.00-9.00   sec  17.8 MBytes   149 Mbits/sec                  \n[  5]   9.00-10.00  sec  17.6 MBytes   148 Mbits/sec                  \n- - - - - - - - - - - - - - - - - - - - - - - - -\n[ ID] Interval           Transfer     Bitrate         Retr\n[  5]   0.00-10.00  sec   183 MBytes   153 Mbits/sec  134             sender\n[  5]   0.00-10.00  sec   180 MBytes   151 Mbits/sec                  receiver\n\niperf Done.\n</code></pre> Text Only<pre><code>Connecting to host 10.0.60.10, port 5201\n[  5] local 10.0.50.182 port 58527 connected to 10.0.60.10 port 5201\n[ ID] Interval           Transfer     Bitrate         Retr  Cwnd\n[  5]   0.00-1.00   sec  25.1 MBytes   211 Mbits/sec    0    639 KBytes       \n[  5]   1.00-2.00   sec  23.6 MBytes   198 Mbits/sec    0    711 KBytes       \n[  5]   2.00-3.00   sec  22.6 MBytes   190 Mbits/sec    0    711 KBytes       \n[  5]   3.00-4.00   sec  23.8 MBytes   199 Mbits/sec    0    711 KBytes       \n[  5]   4.00-5.00   sec  23.6 MBytes   198 Mbits/sec    0    711 KBytes       \n[  5]   5.00-6.00   sec  23.5 MBytes   197 Mbits/sec    0    796 KBytes       \n[  5]   6.00-7.00   sec  23.8 MBytes   199 Mbits/sec    0    796 KBytes       \n[  5]   7.00-8.00   sec  22.2 MBytes   187 Mbits/sec    0    796 KBytes       \n[  5]   8.00-9.00   sec  23.9 MBytes   200 Mbits/sec    0    796 KBytes       \n[  5]   9.00-10.00  sec  23.6 MBytes   198 Mbits/sec    0    841 KBytes       \n- - - - - - - - - - - - - - - - - - - - - - - - -\n[ ID] Interval           Transfer     Bitrate         Retr\n[  5]   0.00-10.00  sec   236 MBytes   198 Mbits/sec    0             sender\n[  5]   0.00-10.01  sec   233 MBytes   195 Mbits/sec                  receiver\n\niperf Done.\n</code></pre> Text Only<pre><code>freq: 5500.0\nsignal: -42 dBm\ntx bitrate: 434.0 MBit/s\n</code></pre>"},{"location":"WifiPerformance/#realtek-8812au","title":"Realtek 8812AU","text":"<p> OS: Armbian v25.5.0-trunk.550, 6.12.28-current-x86</p> Chipset Class Average forward speed Average reverse speed RTL8812AU AC 148 Mbits/sec 269 Mbits/sec Forward mode (client to server)Reverse mode (server to client)Wireless link info Text Only<pre><code>Connecting to host 10.0.60.10, port 5201\nReverse mode, remote host 10.0.60.10 is sending\n[  5] local 10.0.50.183 port 49865 connected to 10.0.60.10 port 5201\n[ ID] Interval           Transfer     Bitrate\n[  5]   0.00-1.00   sec  15.5 MBytes   130 Mbits/sec                  \n[  5]   1.00-2.00   sec  17.9 MBytes   150 Mbits/sec                  \n[  5]   2.00-3.00   sec  17.8 MBytes   149 Mbits/sec                  \n[  5]   3.00-4.00   sec  17.9 MBytes   150 Mbits/sec                  \n[  5]   4.00-5.00   sec  17.5 MBytes   147 Mbits/sec                  \n[  5]   5.00-6.00   sec  17.6 MBytes   148 Mbits/sec                  \n[  5]   6.00-7.00   sec  17.2 MBytes   145 Mbits/sec                  \n[  5]   7.00-8.00   sec  17.2 MBytes   145 Mbits/sec                  \n[  5]   8.00-9.00   sec  17.6 MBytes   148 Mbits/sec                  \n[  5]   9.00-10.00  sec  17.8 MBytes   149 Mbits/sec                  \n- - - - - - - - - - - - - - - - - - - - - - - - -\n[ ID] Interval           Transfer     Bitrate         Retr\n[  5]   0.00-10.01  sec   177 MBytes   148 Mbits/sec    8             sender\n[  5]   0.00-10.00  sec   174 MBytes   146 Mbits/sec                  receiver\n\niperf Done.\n</code></pre> Text Only<pre><code>Connecting to host 10.0.60.10, port 5201\n[  5] local 10.0.50.183 port 41219 connected to 10.0.60.10 port 5201\n[ ID] Interval           Transfer     Bitrate         Retr  Cwnd\n[  5]   0.00-1.00   sec  34.2 MBytes   287 Mbits/sec    0    979 KBytes       \n[  5]   1.00-2.00   sec  31.5 MBytes   264 Mbits/sec    0   1.13 MBytes       \n[  5]   2.00-3.00   sec  33.1 MBytes   278 Mbits/sec    0   1.13 MBytes       \n[  5]   3.00-4.00   sec  31.5 MBytes   264 Mbits/sec    0   1.20 MBytes       \n[  5]   4.00-5.00   sec  31.4 MBytes   263 Mbits/sec    0   1.20 MBytes       \n[  5]   5.00-6.00   sec  31.6 MBytes   266 Mbits/sec    0   1.20 MBytes       \n[  5]   6.00-7.00   sec  32.2 MBytes   270 Mbits/sec    0   1.20 MBytes       \n[  5]   7.00-8.00   sec  32.6 MBytes   274 Mbits/sec    0   1.20 MBytes       \n[  5]   8.00-9.00   sec  30.9 MBytes   259 Mbits/sec    0   1.33 MBytes       \n[  5]   9.00-10.00  sec  32.0 MBytes   268 Mbits/sec    0   1.33 MBytes       \n- - - - - - - - - - - - - - - - - - - - - - - - -\n[ ID] Interval           Transfer     Bitrate         Retr\n[  5]   0.00-10.00  sec   321 MBytes   269 Mbits/sec    0             sender\n[  5]   0.00-10.01  sec   319 MBytes   267 Mbits/sec                  receiver\n\niperf Done.\n</code></pre> Text Only<pre><code>freq: 5500.0\nsignal: -33 dBm\ntx bitrate: 867.0 MBit/s\n</code></pre>"},{"location":"WifiPerformance/#realtek-8814au","title":"Realtek 8814AU","text":"<p> OS: Armbian v25.5.0-trunk.550, 6.12.28-current-x86</p> Chipset Class Average forward speed Average reverse speed RTL8814AU AC 153 Mbits/sec 23.8 Mbits/sec Forward mode (client to server)Reverse mode (server to client)Wireless link info Text Only<pre><code>Connecting to host 10.0.60.10, port 5201\nReverse mode, remote host 10.0.60.10 is sending\n[  5] local 10.0.50.184 port 39333 connected to 10.0.60.10 port 5201\n[ ID] Interval           Transfer     Bitrate\n[  5]   0.00-1.00   sec  17.4 MBytes   146 Mbits/sec                  \n[  5]   1.00-2.00   sec  18.0 MBytes   151 Mbits/sec                  \n[  5]   2.00-3.00   sec  18.1 MBytes   152 Mbits/sec                  \n[  5]   3.00-4.00   sec  18.0 MBytes   151 Mbits/sec                  \n[  5]   4.00-5.00   sec  18.0 MBytes   151 Mbits/sec                  \n[  5]   5.00-6.00   sec  17.9 MBytes   150 Mbits/sec                  \n[  5]   6.00-7.00   sec  18.0 MBytes   151 Mbits/sec                  \n[  5]   7.00-8.00   sec  17.8 MBytes   149 Mbits/sec                  \n[  5]   8.00-9.00   sec  18.0 MBytes   151 Mbits/sec                  \n[  5]   9.00-10.00  sec  18.0 MBytes   151 Mbits/sec                  \n- - - - - - - - - - - - - - - - - - - - - - - - -\n[ ID] Interval           Transfer     Bitrate         Retr\n[  5]   0.00-10.01  sec   183 MBytes   153 Mbits/sec  120             sender\n[  5]   0.00-10.00  sec   179 MBytes   150 Mbits/sec                  receiver\n\niperf Done.\n</code></pre> Text Only<pre><code>Connecting to host 10.0.60.10, port 5201\n[  5] local 10.0.50.184 port 43963 connected to 10.0.60.10 port 5201\n[ ID] Interval           Transfer     Bitrate         Retr  Cwnd\n[  5]   0.00-1.00   sec  3.50 MBytes  29.3 Mbits/sec    0    208 KBytes       \n[  5]   1.00-2.00   sec  3.25 MBytes  27.3 Mbits/sec    0    331 KBytes       \n[  5]   2.00-3.00   sec  2.88 MBytes  24.1 Mbits/sec    0    358 KBytes       \n[  5]   3.00-4.00   sec  2.88 MBytes  24.1 Mbits/sec    0    376 KBytes       \n[  5]   4.00-5.00   sec  3.00 MBytes  25.2 Mbits/sec    0    376 KBytes       \n[  5]   5.00-6.00   sec  2.38 MBytes  19.9 Mbits/sec    0    376 KBytes       \n[  5]   6.00-7.00   sec  3.00 MBytes  25.2 Mbits/sec    0    376 KBytes       \n[  5]   7.00-8.00   sec  2.25 MBytes  18.9 Mbits/sec    0    376 KBytes       \n[  5]   8.00-9.00   sec  3.00 MBytes  25.2 Mbits/sec    0    376 KBytes       \n[  5]   9.00-10.00  sec  2.25 MBytes  18.9 Mbits/sec    0    376 KBytes       \n- - - - - - - - - - - - - - - - - - - - - - - - -\n[ ID] Interval           Transfer     Bitrate         Retr\n[  5]   0.00-10.00  sec  28.4 MBytes  23.8 Mbits/sec    0             sender\n[  5]   0.00-10.10  sec  27.2 MBytes  22.6 Mbits/sec                  receiver\n\niperf Done.\n</code></pre> Text Only<pre><code>freq: 5500.0\nsignal: -38 dBm\ntx bitrate: 867.0 MBit/s\n</code></pre>"},{"location":"WifiPerformance/#realtek-8821cu-1","title":"Realtek 8821CU #1","text":"<p> OS: Armbian v25.5.0-trunk.550, 6.12.28-current-x86</p> Chipset Class Average forward speed Average reverse speed RTL8821CU AC 123 Mbits/sec 211 Mbits/sec Forward mode (client to server)Reverse mode (server to client)Wireless link info Text Only<pre><code>Connecting to host 10.0.60.10, port 5201\nReverse mode, remote host 10.0.60.10 is sending\n[  5] local 10.0.50.185 port 57159 connected to 10.0.60.10 port 5201\n[ ID] Interval           Transfer     Bitrate\n[  5]   0.00-1.00   sec  6.88 MBytes  57.6 Mbits/sec                  \n[  5]   1.00-2.00   sec  11.9 MBytes  99.6 Mbits/sec                  \n[  5]   2.00-3.00   sec  15.9 MBytes   133 Mbits/sec                  \n[  5]   3.00-4.00   sec  16.0 MBytes   134 Mbits/sec                  \n[  5]   4.00-5.00   sec  15.9 MBytes   133 Mbits/sec                  \n[  5]   5.00-6.00   sec  15.9 MBytes   133 Mbits/sec                  \n[  5]   6.00-7.00   sec  16.0 MBytes   134 Mbits/sec                  \n[  5]   7.00-8.00   sec  15.9 MBytes   133 Mbits/sec                  \n[  5]   8.00-9.00   sec  15.9 MBytes   133 Mbits/sec                  \n[  5]   9.00-10.00  sec  16.0 MBytes   134 Mbits/sec                  \n- - - - - - - - - - - - - - - - - - - - - - - - -\n[ ID] Interval           Transfer     Bitrate         Retr\n[  5]   0.00-10.01  sec   147 MBytes   123 Mbits/sec    2             sender\n[  5]   0.00-10.00  sec   146 MBytes   123 Mbits/sec                  receiver\n\niperf Done.\n</code></pre> Text Only<pre><code>Connecting to host 10.0.60.10, port 5201\n[  5] local 10.0.50.185 port 50357 connected to 10.0.60.10 port 5201\n[ ID] Interval           Transfer     Bitrate         Retr  Cwnd\n[  5]   0.00-1.00   sec  25.8 MBytes   216 Mbits/sec    0    543 KBytes       \n[  5]   1.00-2.00   sec  25.6 MBytes   215 Mbits/sec    0    638 KBytes       \n[  5]   2.00-3.00   sec  26.0 MBytes   218 Mbits/sec    0    741 KBytes       \n[  5]   3.00-4.00   sec  24.8 MBytes   208 Mbits/sec    0    741 KBytes       \n[  5]   4.00-5.00   sec  25.0 MBytes   210 Mbits/sec    0    768 KBytes       \n[  5]   5.00-6.00   sec  24.9 MBytes   209 Mbits/sec    0    776 KBytes       \n[  5]   6.00-7.00   sec  24.9 MBytes   209 Mbits/sec    0    776 KBytes       \n[  5]   7.00-8.00   sec  24.9 MBytes   209 Mbits/sec    0    776 KBytes       \n[  5]   8.00-9.00   sec  24.8 MBytes   208 Mbits/sec    0    776 KBytes       \n[  5]   9.00-10.00  sec  24.8 MBytes   208 Mbits/sec    0    776 KBytes       \n- - - - - - - - - - - - - - - - - - - - - - - - -\n[ ID] Interval           Transfer     Bitrate         Retr\n[  5]   0.00-10.00  sec   251 MBytes   211 Mbits/sec    0             sender\n[  5]   0.00-10.02  sec   248 MBytes   208 Mbits/sec                  receiver\n\niperf Done.\n</code></pre> Text Only<pre><code>freq: 5500.0\nRX: 194101 bytes (390 packets)\nTX: 99340 bytes (457 packets)\nsignal: -41 dBm\nrx bitrate: 390.0 MBit/s VHT-MCS 9 80MHz VHT-NSS 1\ntx bitrate: 433.3 MBit/s VHT-MCS 9 80MHz short GI VHT-NSS 1\n</code></pre>"},{"location":"WifiPerformance/#realtek-8821cu-2","title":"Realtek 8821CU #2","text":"<p> OS: Armbian v25.5.1, 6.12.28-current-meson64</p> Chipset Class Average forward speed Average reverse speed RTL8821CU AC 275 Mbits/sec 257 Mbits/sec Forward mode (client to server)Reverse mode (server to client)Wireless link info Text Only<pre><code>Connecting to host 10.0.60.10, port 5201\nReverse mode, remote host 10.0.60.10 is sending\n[  5] local 10.0.50.163 port 54087 connected to 10.0.60.10 port 5201\n[ ID] Interval           Transfer     Bitrate\n[  5]   0.00-1.00   sec  27.2 MBytes   228 Mbits/sec                  \n[  5]   1.00-2.00   sec  33.5 MBytes   281 Mbits/sec                  \n[  5]   2.00-3.00   sec  32.8 MBytes   275 Mbits/sec                  \n[  5]   3.00-4.00   sec  33.1 MBytes   278 Mbits/sec                  \n[  5]   4.00-5.00   sec  32.5 MBytes   273 Mbits/sec                  \n[  5]   5.00-6.00   sec  32.9 MBytes   276 Mbits/sec                  \n[  5]   6.00-7.00   sec  33.5 MBytes   281 Mbits/sec                  \n[  5]   7.00-8.00   sec  33.2 MBytes   279 Mbits/sec                  \n[  5]   8.00-9.00   sec  33.1 MBytes   278 Mbits/sec                  \n[  5]   9.00-10.00  sec  33.2 MBytes   279 Mbits/sec                  \n- - - - - - - - - - - - - - - - - - - - - - - - -\n[ ID] Interval           Transfer     Bitrate         Retr\n[  5]   0.00-10.01  sec   328 MBytes   275 Mbits/sec  130             sender\n[  5]   0.00-10.00  sec   325 MBytes   273 Mbits/sec                  receiver\n\niperf Done.\n</code></pre> Text Only<pre><code>Connecting to host 10.0.60.10, port 5201\n[  5] local 10.0.50.163 port 44557 connected to 10.0.60.10 port 5201\n[ ID] Interval           Transfer     Bitrate         Retr  Cwnd\n[  5]   0.00-1.00   sec  33.5 MBytes   281 Mbits/sec    0   1.64 MBytes       \n[  5]   1.00-2.00   sec  30.2 MBytes   254 Mbits/sec    0   1.84 MBytes       \n[  5]   2.00-3.00   sec  29.6 MBytes   249 Mbits/sec    0   2.15 MBytes       \n[  5]   3.00-4.00   sec  31.2 MBytes   262 Mbits/sec    0   2.36 MBytes       \n[  5]   4.00-5.00   sec  30.1 MBytes   253 Mbits/sec    0   2.36 MBytes       \n[  5]   5.00-6.00   sec  30.5 MBytes   256 Mbits/sec    0   2.36 MBytes       \n[  5]   6.00-7.00   sec  30.8 MBytes   258 Mbits/sec    0   2.36 MBytes       \n[  5]   7.00-8.00   sec  30.0 MBytes   252 Mbits/sec    0   2.36 MBytes       \n[  5]   8.00-9.00   sec  29.5 MBytes   247 Mbits/sec    0   2.36 MBytes       \n[  5]   9.00-10.00  sec  30.4 MBytes   255 Mbits/sec    0   2.36 MBytes       \n- - - - - - - - - - - - - - - - - - - - - - - - -\n[ ID] Interval           Transfer     Bitrate         Retr\n[  5]   0.00-10.00  sec   306 MBytes   257 Mbits/sec    0             sender\n[  5]   0.00-10.01  sec   304 MBytes   254 Mbits/sec                  receiver\n\niperf Done.\n</code></pre> Text Only<pre><code>\n</code></pre>"},{"location":"WifiPerformance/#realtek-8822ce","title":"Realtek 8822CE","text":"<p> OS: Armbian v25.2.3, 6.12.21-current-rockchip64</p> Chipset Class Average forward speed Average reverse speed RTL8822CE AC 476 Mbits/sec 645 Mbits/sec Forward mode (client to server)Reverse mode (server to client)Wireless link info Text Only<pre><code>Connecting to host 10.0.60.10, port 5201\nReverse mode, remote host 10.0.60.10 is sending\n[  5] local 10.0.50.127 port 53729 connected to 10.0.60.10 port 5201\n[ ID] Interval           Transfer     Bitrate\n[  5]   0.00-1.00   sec  59.9 MBytes   502 Mbits/sec                  \n[  5]   1.00-2.00   sec  59.3 MBytes   497 Mbits/sec                  \n[  5]   2.00-3.00   sec  56.7 MBytes   476 Mbits/sec                  \n[  5]   3.00-4.00   sec  57.1 MBytes   479 Mbits/sec                  \n[  5]   4.00-5.00   sec  58.3 MBytes   489 Mbits/sec                  \n[  5]   5.00-6.00   sec  57.0 MBytes   478 Mbits/sec                  \n[  5]   6.00-7.00   sec  54.5 MBytes   457 Mbits/sec                  \n[  5]   7.00-8.00   sec  54.3 MBytes   456 Mbits/sec                  \n[  5]   8.00-9.00   sec  52.9 MBytes   443 Mbits/sec                  \n[  5]   9.00-10.00  sec  54.5 MBytes   457 Mbits/sec                  \n- - - - - - - - - - - - - - - - - - - - - - - - -\n[ ID] Interval           Transfer     Bitrate         Retr\n[  5]   0.00-10.00  sec   568 MBytes   476 Mbits/sec  527             sender\n[  5]   0.00-10.00  sec   564 MBytes   474 Mbits/sec                  receiver\n\niperf Done.\n</code></pre> Text Only<pre><code>Connecting to host 10.0.60.10, port 5201\n[  5] local 10.0.50.127 port 58093 connected to 10.0.60.10 port 5201\n[ ID] Interval           Transfer     Bitrate         Retr  Cwnd\n[  5]   0.00-1.00   sec  77.0 MBytes   645 Mbits/sec    0   7.51 MBytes       \n[  5]   1.00-2.00   sec  77.5 MBytes   650 Mbits/sec    0   7.51 MBytes       \n[  5]   2.00-3.00   sec  77.5 MBytes   651 Mbits/sec    0   7.51 MBytes       \n[  5]   3.00-4.00   sec  75.0 MBytes   629 Mbits/sec  145   3.75 MBytes       \n[  5]   4.00-5.00   sec  77.5 MBytes   650 Mbits/sec    0   3.75 MBytes       \n[  5]   5.00-6.00   sec  78.8 MBytes   661 Mbits/sec    0   3.75 MBytes       \n[  5]   6.00-7.00   sec  77.5 MBytes   650 Mbits/sec    0   3.75 MBytes       \n[  5]   7.00-8.00   sec  77.5 MBytes   650 Mbits/sec    0   3.75 MBytes       \n[  5]   8.00-9.00   sec  75.0 MBytes   629 Mbits/sec  310   1.93 MBytes       \n[  5]   9.00-10.00  sec  76.2 MBytes   640 Mbits/sec    0   1.98 MBytes       \n- - - - - - - - - - - - - - - - - - - - - - - - -\n[ ID] Interval           Transfer     Bitrate         Retr\n[  5]   0.00-10.00  sec   770 MBytes   645 Mbits/sec  455             sender\n[  5]   0.00-10.02  sec   769 MBytes   643 Mbits/sec                  receiver\n\niperf Done.\n</code></pre> Text Only<pre><code>freq: 5500\nRX: 149379 bytes (548 packets)\nTX: 61579 bytes (222 packets)\nsignal: -32 dBm\nrx bitrate: 585.0 MBit/s VHT-MCS 7 80MHz VHT-NSS 2\ntx bitrate: 866.7 MBit/s VHT-MCS 9 80MHz short GI VHT-NSS 2\n</code></pre>"},{"location":"WifiPerformance/#ax","title":"AX","text":""},{"location":"WifiPerformance/#ampak-6275p","title":"Ampak 6275P","text":"<p> OS: Armbian v25.8.0-trunk.149, 6.12.33-current-rockchip64</p> Chipset Class Average forward speed Average reverse speed AP6275P AX 273 Mbits/sec 262 Mbits/sec Forward mode (client to server)Reverse mode (server to client)Wireless link info Text Only<pre><code>Connecting to host 10.0.60.10, port 5201\nReverse mode, remote host 10.0.60.10 is sending\n[  5] local 10.0.50.137 port 56383 connected to 10.0.60.10 port 5201\n[ ID] Interval           Transfer     Bitrate\n[  5]   0.00-1.00   sec  32.7 MBytes   274 Mbits/sec                  \n[  5]   1.00-2.00   sec  32.0 MBytes   268 Mbits/sec                  \n[  5]   2.00-3.00   sec  31.8 MBytes   267 Mbits/sec                  \n[  5]   3.00-4.00   sec  32.2 MBytes   270 Mbits/sec                  \n[  5]   4.00-5.00   sec  30.6 MBytes   256 Mbits/sec                  \n[  5]   5.00-6.00   sec  31.9 MBytes   267 Mbits/sec                  \n[  5]   6.00-7.00   sec  34.3 MBytes   288 Mbits/sec                  \n[  5]   7.00-8.00   sec  32.4 MBytes   272 Mbits/sec                  \n[  5]   8.00-9.00   sec  31.6 MBytes   265 Mbits/sec                  \n[  5]   9.00-10.00  sec  32.8 MBytes   275 Mbits/sec                  \n- - - - - - - - - - - - - - - - - - - - - - - - -\n[ ID] Interval           Transfer     Bitrate         Retr\n[  5]   0.00-10.02  sec   325 MBytes   273 Mbits/sec  102             sender\n[  5]   0.00-10.00  sec   322 MBytes   270 Mbits/sec                  receiver\n\niperf Done.\n</code></pre> Text Only<pre><code>Connecting to host 10.0.60.10, port 5201\n[  5] local 10.0.50.137 port 39057 connected to 10.0.60.10 port 5201\n[ ID] Interval           Transfer     Bitrate         Retr  Cwnd\n[  5]   0.00-1.00   sec  39.6 MBytes   332 Mbits/sec    0   7.49 MBytes       \n[  5]   1.00-2.00   sec  26.2 MBytes   220 Mbits/sec    0   7.49 MBytes       \n[  5]   2.00-3.00   sec  26.2 MBytes   220 Mbits/sec    0   7.50 MBytes       \n[  5]   3.00-4.00   sec  28.8 MBytes   241 Mbits/sec    0   7.50 MBytes       \n[  5]   4.00-5.00   sec  30.0 MBytes   252 Mbits/sec    0   7.50 MBytes       \n[  5]   5.00-6.00   sec  30.0 MBytes   252 Mbits/sec    0   7.50 MBytes       \n[  5]   6.00-7.00   sec  35.0 MBytes   294 Mbits/sec    0   7.50 MBytes       \n[  5]   7.00-8.00   sec  32.5 MBytes   273 Mbits/sec    0   7.50 MBytes       \n[  5]   8.00-9.00   sec  32.5 MBytes   273 Mbits/sec    0   7.50 MBytes       \n[  5]   9.00-10.00  sec  31.2 MBytes   262 Mbits/sec    0   7.50 MBytes       \n- - - - - - - - - - - - - - - - - - - - - - - - -\n[ ID] Interval           Transfer     Bitrate         Retr\n[  5]   0.00-10.00  sec   312 MBytes   262 Mbits/sec    0             sender\n[  5]   0.00-10.03  sec   311 MBytes   260 Mbits/sec                  receiver\n\niperf Done.\n</code></pre> Text Only<pre><code>freq: 5500\nRX: 65859 bytes (141 packets)\nTX: 58074 bytes (207 packets)\nsignal: -70 dBm\nrx bitrate: 480.3 MBit/s\ntx bitrate: 340.2 MBit/s\n</code></pre>"},{"location":"WifiPerformance/#comfast-cf953ax","title":"Comfast CF953AX","text":"<p> OS: Armbian v25.5.0-trunk.550, 6.12.28-current-x86</p> Chipset Class Average forward speed Average reverse speed MT7921AU AX 110 Mbits/sec 149 Mbits/sec Forward mode (client to server)Reverse mode (server to client)Wireless link info Text Only<pre><code>Connecting to host 10.0.60.10, port 5201\nReverse mode, remote host 10.0.60.10 is sending\n[  5] local 10.0.50.186 port 36693 connected to 10.0.60.10 port 5201\n[ ID] Interval           Transfer     Bitrate\n[  5]   0.00-1.00   sec  12.6 MBytes   106 Mbits/sec                  \n[  5]   1.00-2.00   sec  13.0 MBytes   109 Mbits/sec                  \n[  5]   2.00-3.00   sec  13.0 MBytes   109 Mbits/sec                  \n[  5]   3.00-4.00   sec  12.9 MBytes   108 Mbits/sec                  \n[  5]   4.00-5.00   sec  12.8 MBytes   107 Mbits/sec                  \n[  5]   5.00-6.00   sec  12.8 MBytes   107 Mbits/sec                  \n[  5]   6.00-7.00   sec  13.0 MBytes   109 Mbits/sec                  \n[  5]   7.00-8.00   sec  12.9 MBytes   108 Mbits/sec                  \n[  5]   8.00-9.00   sec  12.8 MBytes   107 Mbits/sec                  \n[  5]   9.00-10.00  sec  12.9 MBytes   108 Mbits/sec                  \n- - - - - - - - - - - - - - - - - - - - - - - - -\n[ ID] Interval           Transfer     Bitrate         Retr\n[  5]   0.00-10.01  sec   131 MBytes   110 Mbits/sec  187             sender\n[  5]   0.00-10.00  sec   128 MBytes   108 Mbits/sec                  receiver\n\niperf Done.\n</code></pre> Text Only<pre><code>Connecting to host 10.0.60.10, port 5201\n[  5] local 10.0.50.186 port 49719 connected to 10.0.60.10 port 5201\n[ ID] Interval           Transfer     Bitrate         Retr  Cwnd\n[  5]   0.00-1.00   sec  18.9 MBytes   158 Mbits/sec    0    554 KBytes       \n[  5]   1.00-2.00   sec  17.4 MBytes   146 Mbits/sec    0    585 KBytes       \n[  5]   2.00-3.00   sec  17.9 MBytes   150 Mbits/sec    0    617 KBytes       \n[  5]   3.00-4.00   sec  18.4 MBytes   154 Mbits/sec    0    690 KBytes       \n[  5]   4.00-5.00   sec  16.9 MBytes   142 Mbits/sec    0    725 KBytes       \n[  5]   5.00-6.00   sec  18.4 MBytes   154 Mbits/sec   24    318 KBytes       \n[  5]   6.00-7.00   sec  16.6 MBytes   139 Mbits/sec    0    598 KBytes       \n[  5]   7.00-8.00   sec  18.5 MBytes   155 Mbits/sec    0    653 KBytes       \n[  5]   8.00-9.00   sec  16.9 MBytes   142 Mbits/sec    0    690 KBytes       \n[  5]   9.00-10.00  sec  18.0 MBytes   151 Mbits/sec    0    717 KBytes       \n- - - - - - - - - - - - - - - - - - - - - - - - -\n[ ID] Interval           Transfer     Bitrate         Retr\n[  5]   0.00-10.00  sec   178 MBytes   149 Mbits/sec   24             sender\n[  5]   0.00-10.01  sec   174 MBytes   146 Mbits/sec                  receiver\n\niperf Done.\n</code></pre> Text Only<pre><code>freq: 5500.0\nRX: 41920 bytes (144 packets)\nTX: 51366 bytes (200 packets)\nsignal: -39 dBm\nrx bitrate: 1200.9 MBit/s 80MHz HE-MCS 11 HE-NSS 2 HE-GI 0 HE-DCM 0\ntx bitrate: 1200.9 MBit/s 80MHz HE-MCS 11 HE-NSS 2 HE-GI 0 HE-DCM 0\n</code></pre>"},{"location":"WifiPerformance/#intel-ax200","title":"Intel AX200","text":"<p> OS: Armbian v25.2.2, 6.12.15-current-rockchip64</p> Chipset Class Average forward speed Average reverse speed AX200 AX 816 Mbits/sec 571 Mbits/sec Forward mode (client to server)Reverse mode (server to client)Wireless link info Text Only<pre><code>Connecting to host 10.0.60.10, port 5201\nReverse mode, remote host 10.0.60.10 is sending\n[  5] local 10.0.50.116 port 35841 connected to 10.0.60.10 port 5201\n[ ID] Interval           Transfer     Bitrate\n[  5]   0.00-1.00   sec  98.8 MBytes   828 Mbits/sec                  \n[  5]   1.00-2.00   sec  91.4 MBytes   767 Mbits/sec                  \n[  5]   2.00-3.00   sec  96.0 MBytes   805 Mbits/sec                  \n[  5]   3.00-4.00   sec  88.0 MBytes   738 Mbits/sec                  \n[  5]   4.00-5.00   sec  90.1 MBytes   756 Mbits/sec                  \n[  5]   5.00-6.00   sec  99.6 MBytes   836 Mbits/sec                  \n[  5]   6.00-7.00   sec  98.6 MBytes   827 Mbits/sec                  \n[  5]   7.00-8.00   sec   102 MBytes   860 Mbits/sec                  \n[  5]   8.00-9.00   sec   101 MBytes   848 Mbits/sec                  \n[  5]   9.00-10.00  sec   104 MBytes   872 Mbits/sec                  \n- - - - - - - - - - - - - - - - - - - - - - - - -\n[ ID] Interval           Transfer     Bitrate         Retr\n[  5]   0.00-10.00  sec   973 MBytes   816 Mbits/sec  255             sender\n[  5]   0.00-10.00  sec   970 MBytes   814 Mbits/sec                  receiver\n\niperf Done.\n</code></pre> Text Only<pre><code>Connecting to host 10.0.60.10, port 5201\n[  5] local 10.0.50.116 port 60461 connected to 10.0.60.10 port 5201\n[ ID] Interval           Transfer     Bitrate         Retr  Cwnd\n[  5]   0.00-1.00   sec  92.1 MBytes   772 Mbits/sec  557    737 KBytes       \n[  5]   1.00-2.00   sec  89.8 MBytes   753 Mbits/sec  328    479 KBytes       \n[  5]   2.00-3.00   sec  75.6 MBytes   634 Mbits/sec  156    351 KBytes       \n[  5]   3.00-4.00   sec  76.8 MBytes   644 Mbits/sec  102    294 KBytes       \n[  5]   4.00-5.00   sec  39.9 MBytes   334 Mbits/sec    0    450 KBytes       \n[  5]   5.00-6.00   sec  41.9 MBytes   351 Mbits/sec    0    564 KBytes       \n[  5]   6.00-7.00   sec  61.6 MBytes   517 Mbits/sec   23    489 KBytes       \n[  5]   7.00-8.00   sec  75.1 MBytes   630 Mbits/sec   77    469 KBytes       \n[  5]   8.00-9.00   sec  69.1 MBytes   580 Mbits/sec  100    215 KBytes       \n[  5]   9.00-10.00  sec  59.2 MBytes   497 Mbits/sec    0    468 KBytes       \n- - - - - - - - - - - - - - - - - - - - - - - - -\n[ ID] Interval           Transfer     Bitrate         Retr\n[  5]   0.00-10.00  sec   681 MBytes   571 Mbits/sec  1343             sender\n[  5]   0.00-10.00  sec   678 MBytes   569 Mbits/sec                  receiver\n\niperf Done.\n</code></pre> Text Only<pre><code>freq: 5500.0\nRX: 66879 bytes (227 packets)\nTX: 82439 bytes (295 packets)\nsignal: -30 dBm\nrx bitrate: 2401.9 MBit/s 160MHz HE-MCS 11 HE-NSS 2 HE-GI 0 HE-DCM 0\ntx bitrate: 2041.6 MBit/s 160MHz HE-MCS 11 HE-NSS 2 HE-GI 2 HE-DCM 0\n</code></pre>"},{"location":"WifiPerformance/#n","title":"N","text":""},{"location":"WifiPerformance/#alfa-rt3572","title":"Alfa RT3572","text":"<p> OS: Armbian v25.5.0-trunk.550, 6.12.28-current-x86</p> Chipset Class Average forward speed Average reverse speed RT3572 N 96.6 Mbits/sec 66.4 Mbits/sec Forward mode (client to server)Reverse mode (server to client)Wireless link info Text Only<pre><code>Connecting to host 10.0.60.10, port 5201\nReverse mode, remote host 10.0.60.10 is sending\n[  5] local 10.0.50.188 port 37161 connected to 10.0.60.10 port 5201\n[ ID] Interval           Transfer     Bitrate\n[  5]   0.00-1.00   sec  9.12 MBytes  76.5 Mbits/sec                  \n[  5]   1.00-2.00   sec  10.6 MBytes  89.1 Mbits/sec                  \n[  5]   2.00-3.00   sec  11.1 MBytes  93.3 Mbits/sec                  \n[  5]   3.00-4.00   sec  11.6 MBytes  97.6 Mbits/sec                  \n[  5]   4.00-5.00   sec  11.4 MBytes  95.4 Mbits/sec                  \n[  5]   5.00-6.00   sec  11.0 MBytes  92.3 Mbits/sec                  \n[  5]   6.00-7.00   sec  11.5 MBytes  96.5 Mbits/sec                  \n[  5]   7.00-8.00   sec  11.8 MBytes  98.6 Mbits/sec                  \n[  5]   8.00-9.00   sec  11.8 MBytes  98.6 Mbits/sec                  \n[  5]   9.00-10.00  sec  11.6 MBytes  97.5 Mbits/sec                  \n- - - - - - - - - - - - - - - - - - - - - - - - -\n[ ID] Interval           Transfer     Bitrate         Retr\n[  5]   0.00-10.01  sec   115 MBytes  96.6 Mbits/sec   33             sender\n[  5]   0.00-10.00  sec   112 MBytes  93.5 Mbits/sec                  receiver\n\niperf Done.\n</code></pre> Text Only<pre><code>Connecting to host 10.0.60.10, port 5201\n[  5] local 10.0.50.188 port 41073 connected to 10.0.60.10 port 5201\n[ ID] Interval           Transfer     Bitrate         Retr  Cwnd\n[  5]   0.00-1.00   sec  8.50 MBytes  71.2 Mbits/sec    0    229 KBytes       \n[  5]   1.00-2.00   sec  8.12 MBytes  68.2 Mbits/sec    0    270 KBytes       \n[  5]   2.00-3.00   sec  7.62 MBytes  64.0 Mbits/sec    0    300 KBytes       \n[  5]   3.00-4.00   sec  8.12 MBytes  68.2 Mbits/sec    0    315 KBytes       \n[  5]   4.00-5.00   sec  7.62 MBytes  64.0 Mbits/sec    0    315 KBytes       \n[  5]   5.00-6.00   sec  7.62 MBytes  63.9 Mbits/sec    0    315 KBytes       \n[  5]   6.00-7.00   sec  7.88 MBytes  66.1 Mbits/sec    0    315 KBytes       \n[  5]   7.00-8.00   sec  7.75 MBytes  65.0 Mbits/sec    0    354 KBytes       \n[  5]   8.00-9.00   sec  8.00 MBytes  67.1 Mbits/sec    0    421 KBytes       \n[  5]   9.00-10.00  sec  7.88 MBytes  65.9 Mbits/sec    0    421 KBytes       \n- - - - - - - - - - - - - - - - - - - - - - - - -\n[ ID] Interval           Transfer     Bitrate         Retr\n[  5]   0.00-10.00  sec  79.1 MBytes  66.4 Mbits/sec    0             sender\n[  5]   0.00-10.01  sec  76.9 MBytes  64.5 Mbits/sec                  receiver\n\niperf Done.\n</code></pre> Text Only<pre><code>freq: 5500.0\nRX: 111511 bytes (465 packets)\nTX: 66801 bytes (266 packets)\nsignal: -17 dBm\nrx bitrate: 240.0 MBit/s MCS 13 40MHz short GI\ntx bitrate: 300.0 MBit/s MCS 15 40MHz short GI\n</code></pre>"},{"location":"WifiPerformance/#broadcom-43430","title":"Broadcom 43430","text":"<p> OS: Armbian v25.5.1, 6.12.23-current-sunxi</p> Chipset Class Average forward speed Average reverse speed BCM43430 N 44.7 Mbits/sec 42.4 Mbits/sec Forward mode (client to server)Reverse mode (server to client)Wireless link info Text Only<pre><code>Connecting to host 10.0.60.10, port 5201\nReverse mode, remote host 10.0.60.10 is sending\n[  5] local 10.0.50.164 port 41125 connected to 10.0.60.10 port 5201\n[ ID] Interval           Transfer     Bitrate\n[  5]   0.00-1.00   sec  4.13 MBytes  34.7 Mbits/sec                  \n[  5]   1.00-2.00   sec  4.69 MBytes  39.4 Mbits/sec                  \n[  5]   2.00-3.00   sec  4.46 MBytes  37.5 Mbits/sec                  \n[  5]   3.00-4.00   sec  4.98 MBytes  41.8 Mbits/sec                  \n[  5]   4.00-5.00   sec  5.41 MBytes  45.4 Mbits/sec                  \n[  5]   5.00-6.00   sec  5.25 MBytes  44.0 Mbits/sec                  \n[  5]   6.00-7.00   sec  5.33 MBytes  44.7 Mbits/sec                  \n[  5]   7.00-8.00   sec  5.35 MBytes  44.9 Mbits/sec                  \n[  5]   8.00-9.00   sec  5.13 MBytes  43.0 Mbits/sec                  \n[  5]   9.00-10.00  sec  5.24 MBytes  44.0 Mbits/sec                  \n- - - - - - - - - - - - - - - - - - - - - - - - -\n[ ID] Interval           Transfer     Bitrate         Retr\n[  5]   0.00-10.01  sec  53.4 MBytes  44.7 Mbits/sec    0             sender\n[  5]   0.00-10.00  sec  50.0 MBytes  41.9 Mbits/sec                  receiver\n\niperf Done.\n</code></pre> Text Only<pre><code>Connecting to host 10.0.60.10, port 5201\n[  5] local 10.0.50.164 port 40661 connected to 10.0.60.10 port 5201\n[ ID] Interval           Transfer     Bitrate         Retr  Cwnd\n[  5]   0.00-1.00   sec  5.52 MBytes  46.3 Mbits/sec    0    232 KBytes       \n[  5]   1.00-2.00   sec  4.97 MBytes  41.7 Mbits/sec    0    273 KBytes       \n[  5]   2.00-3.00   sec  5.22 MBytes  43.8 Mbits/sec    0    290 KBytes       \n[  5]   3.00-4.00   sec  5.03 MBytes  42.2 Mbits/sec    0    290 KBytes       \n[  5]   4.00-5.00   sec  5.03 MBytes  42.2 Mbits/sec    0    307 KBytes       \n[  5]   5.00-6.00   sec  4.91 MBytes  41.2 Mbits/sec    0    307 KBytes       \n[  5]   6.00-7.00   sec  5.03 MBytes  42.2 Mbits/sec    0    307 KBytes       \n[  5]   7.00-8.00   sec  5.10 MBytes  42.7 Mbits/sec    0    307 KBytes       \n[  5]   8.00-9.00   sec  4.91 MBytes  41.2 Mbits/sec    0    307 KBytes       \n[  5]   9.00-10.00  sec  4.85 MBytes  40.7 Mbits/sec    0    307 KBytes       \n- - - - - - - - - - - - - - - - - - - - - - - - -\n[ ID] Interval           Transfer     Bitrate         Retr\n[  5]   0.00-10.00  sec  50.6 MBytes  42.4 Mbits/sec    0             sender\n[  5]   0.00-10.03  sec  50.0 MBytes  41.8 Mbits/sec                  receiver\n\niperf Done.\n</code></pre> Text Only<pre><code>freq: 2462\nRX: 63428 bytes (165 packets)\nTX: 57268 bytes (286 packets)\nsignal: -52 dBm\nrx bitrate: 72.2 MBit/s\ntx bitrate: 65.0 MBit/s\n</code></pre>"},{"location":"WifiPerformance/#broadcom-43455","title":"Broadcom 43455","text":"<p> OS: Armbian v25.2.3, 6.12.22-current-x86</p> Chipset Class Average forward speed Average reverse speed BCM43455 N 54.9 Mbits/sec 54.0 Mbits/sec Forward mode (client to server)Reverse mode (server to client)Wireless link info Text Only<pre><code>Connecting to host 10.0.60.10, port 5201\nReverse mode, remote host 10.0.60.10 is sending\n[  5] local 10.0.50.120 port 47067 connected to 10.0.60.10 port 5201\n[ ID] Interval           Transfer     Bitrate\n[  5]   0.00-1.00   sec  5.35 MBytes  44.8 Mbits/sec                  \n[  5]   1.00-2.00   sec  6.04 MBytes  50.7 Mbits/sec                  \n[  5]   2.00-3.00   sec  6.42 MBytes  53.9 Mbits/sec                  \n[  5]   3.00-4.00   sec  6.72 MBytes  56.4 Mbits/sec                  \n[  5]   4.00-5.00   sec  6.06 MBytes  50.9 Mbits/sec                  \n[  5]   5.00-6.00   sec  7.27 MBytes  60.9 Mbits/sec                  \n[  5]   6.00-7.00   sec  7.31 MBytes  61.3 Mbits/sec                  \n[  5]   7.00-8.00   sec  6.61 MBytes  55.5 Mbits/sec                  \n[  5]   8.00-9.00   sec  5.68 MBytes  47.7 Mbits/sec                  \n[  5]   9.00-10.00  sec  6.35 MBytes  53.3 Mbits/sec                  \n- - - - - - - - - - - - - - - - - - - - - - - - -\n[ ID] Interval           Transfer     Bitrate         Retr\n[  5]   0.00-10.05  sec  65.8 MBytes  54.9 Mbits/sec    9             sender\n[  5]   0.00-10.00  sec  63.8 MBytes  53.5 Mbits/sec                  receiver\n\niperf Done.\n</code></pre> Text Only<pre><code>Connecting to host 10.0.60.10, port 5201\n[  5] local 10.0.50.120 port 45433 connected to 10.0.60.10 port 5201\n[ ID] Interval           Transfer     Bitrate         Retr  Cwnd\n[  5]   0.00-1.00   sec  6.85 MBytes  57.4 Mbits/sec    0    216 KBytes       \n[  5]   1.00-2.00   sec  5.59 MBytes  46.9 Mbits/sec    0    249 KBytes       \n[  5]   2.00-3.00   sec  6.90 MBytes  57.9 Mbits/sec    0    290 KBytes       \n[  5]   3.00-4.00   sec  7.46 MBytes  62.6 Mbits/sec    0    339 KBytes       \n[  5]   4.00-5.00   sec  5.78 MBytes  48.5 Mbits/sec    0    339 KBytes       \n[  5]   5.00-6.00   sec  7.08 MBytes  59.4 Mbits/sec    0    443 KBytes       \n[  5]   6.00-7.00   sec  6.40 MBytes  53.7 Mbits/sec    0    443 KBytes       \n[  5]   7.00-8.00   sec  6.46 MBytes  54.2 Mbits/sec    0    443 KBytes       \n[  5]   8.00-9.00   sec  6.34 MBytes  53.2 Mbits/sec    0    443 KBytes       \n[  5]   9.00-10.00  sec  5.47 MBytes  45.9 Mbits/sec   35    310 KBytes       \n- - - - - - - - - - - - - - - - - - - - - - - - -\n[ ID] Interval           Transfer     Bitrate         Retr\n[  5]   0.00-10.00  sec  64.3 MBytes  54.0 Mbits/sec   35             sender\n[  5]   0.00-10.01  sec  62.4 MBytes  52.3 Mbits/sec                  receiver\n\niperf Done.\n</code></pre> Text Only<pre><code>freq: 5500\nRX: 63956 bytes (209 packets)\nTX: 56508 bytes (251 packets)\nsignal: -54 dBm\nrx bitrate: 433.3 MBit/s\ntx bitrate: 433.3 MBit/s\n</code></pre>"},{"location":"WifiPerformance/#ralink-rt5370","title":"Ralink RT5370","text":"<p> OS: Armbian v25.5.0-trunk.550, 6.12.28-current-x86</p> Chipset Class Average forward speed Average reverse speed RT5370 N 46.8 Mbits/sec 50.5 Mbits/sec Forward mode (client to server)Reverse mode (server to client)Wireless link info Text Only<pre><code>Connecting to host 10.0.60.10, port 5201\nReverse mode, remote host 10.0.60.10 is sending\n[  5] local 10.0.50.189 port 52827 connected to 10.0.60.10 port 5201\n[ ID] Interval           Transfer     Bitrate\n[  5]   0.00-1.00   sec  4.00 MBytes  33.5 Mbits/sec                  \n[  5]   1.00-2.00   sec  5.38 MBytes  45.1 Mbits/sec                  \n[  5]   2.00-3.00   sec  5.50 MBytes  46.1 Mbits/sec                  \n[  5]   3.00-4.00   sec  5.25 MBytes  44.0 Mbits/sec                  \n[  5]   4.00-5.00   sec  5.62 MBytes  47.2 Mbits/sec                  \n[  5]   5.00-6.00   sec  5.50 MBytes  46.1 Mbits/sec                  \n[  5]   6.00-7.00   sec  5.38 MBytes  45.1 Mbits/sec                  \n[  5]   7.00-8.00   sec  5.38 MBytes  45.1 Mbits/sec                  \n[  5]   8.00-9.00   sec  5.38 MBytes  45.0 Mbits/sec                  \n[  5]   9.00-10.00  sec  5.25 MBytes  44.1 Mbits/sec                  \n- - - - - - - - - - - - - - - - - - - - - - - - -\n[ ID] Interval           Transfer     Bitrate         Retr\n[  5]   0.00-10.01  sec  55.9 MBytes  46.8 Mbits/sec    8             sender\n[  5]   0.00-10.00  sec  52.6 MBytes  44.1 Mbits/sec                  receiver\n\niperf Done.\n</code></pre> Text Only<pre><code>Connecting to host 10.0.60.10, port 5201\n[  5] local 10.0.50.189 port 43877 connected to 10.0.60.10 port 5201\n[ ID] Interval           Transfer     Bitrate         Retr  Cwnd\n[  5]   0.00-1.00   sec  5.50 MBytes  46.1 Mbits/sec    0    320 KBytes       \n[  5]   1.00-2.00   sec  7.38 MBytes  61.9 Mbits/sec    0    550 KBytes       \n[  5]   2.00-3.00   sec  6.88 MBytes  57.6 Mbits/sec    5    506 KBytes       \n[  5]   3.00-4.00   sec  5.62 MBytes  47.2 Mbits/sec    0    576 KBytes       \n[  5]   4.00-5.00   sec  5.62 MBytes  47.2 Mbits/sec    0    636 KBytes       \n[  5]   5.00-6.00   sec  5.62 MBytes  47.2 Mbits/sec    0    673 KBytes       \n[  5]   6.00-7.00   sec  5.50 MBytes  46.2 Mbits/sec    0    701 KBytes       \n[  5]   7.00-8.00   sec  7.00 MBytes  58.7 Mbits/sec    0    717 KBytes       \n[  5]   8.00-9.00   sec  5.50 MBytes  46.2 Mbits/sec    0    724 KBytes       \n[  5]   9.00-10.00  sec  5.62 MBytes  47.2 Mbits/sec    0    724 KBytes       \n- - - - - - - - - - - - - - - - - - - - - - - - -\n[ ID] Interval           Transfer     Bitrate         Retr\n[  5]   0.00-10.00  sec  60.2 MBytes  50.5 Mbits/sec    5             sender\n[  5]   0.00-10.00  sec  57.8 MBytes  48.4 Mbits/sec                  receiver\n\niperf Done.\n</code></pre> Text Only<pre><code>freq: 2462.0\nRX: 104301 bytes (445 packets)\nTX: 55932 bytes (216 packets)\nsignal: -27 dBm\nrx bitrate: 72.2 MBit/s MCS 7 short GI\ntx bitrate: 72.2 MBit/s MCS 7 short GI\n</code></pre>"},{"location":"WifiPerformance/#ralink-rt5572","title":"Ralink RT5572","text":"<p> OS: Armbian v25.5.0-trunk.550, 6.12.28-current-x86</p> Chipset Class Average forward speed Average reverse speed RT5572 N 85.0 Mbits/sec 67.0 Mbits/sec Forward mode (client to server)Reverse mode (server to client)Wireless link info Text Only<pre><code>Connecting to host 10.0.60.10, port 5201\nReverse mode, remote host 10.0.60.10 is sending\n[  5] local 10.0.50.190 port 58389 connected to 10.0.60.10 port 5201\n[ ID] Interval           Transfer     Bitrate\n[  5]   0.00-1.00   sec  9.12 MBytes  76.5 Mbits/sec                  \n[  5]   1.00-2.00   sec  9.75 MBytes  81.7 Mbits/sec                  \n[  5]   2.00-3.00   sec  10.0 MBytes  84.0 Mbits/sec                  \n[  5]   3.00-4.00   sec  10.0 MBytes  83.8 Mbits/sec                  \n[  5]   4.00-5.00   sec  10.0 MBytes  83.9 Mbits/sec                  \n[  5]   5.00-6.00   sec  9.88 MBytes  82.9 Mbits/sec                  \n[  5]   6.00-7.00   sec  10.1 MBytes  85.0 Mbits/sec                  \n[  5]   7.00-8.00   sec  10.0 MBytes  83.7 Mbits/sec                  \n[  5]   8.00-9.00   sec  10.1 MBytes  85.0 Mbits/sec                  \n[  5]   9.00-10.00  sec  10.0 MBytes  83.9 Mbits/sec                  \n- - - - - - - - - - - - - - - - - - - - - - - - -\n[ ID] Interval           Transfer     Bitrate         Retr\n[  5]   0.00-10.01  sec   101 MBytes  85.0 Mbits/sec    0             sender\n[  5]   0.00-10.00  sec  99.0 MBytes  83.0 Mbits/sec                  receiver\n\niperf Done.\n</code></pre> Text Only<pre><code>Connecting to host 10.0.60.10, port 5201\n[  5] local 10.0.50.190 port 54813 connected to 10.0.60.10 port 5201\n[ ID] Interval           Transfer     Bitrate         Retr  Cwnd\n[  5]   0.00-1.00   sec  8.88 MBytes  74.1 Mbits/sec    0    291 KBytes       \n[  5]   1.00-2.00   sec  8.75 MBytes  73.7 Mbits/sec    0    365 KBytes       \n[  5]   2.00-3.00   sec  8.00 MBytes  67.1 Mbits/sec    0    426 KBytes       \n[  5]   3.00-4.00   sec  7.00 MBytes  58.7 Mbits/sec    0    426 KBytes       \n[  5]   4.00-5.00   sec  7.88 MBytes  66.1 Mbits/sec    0    426 KBytes       \n[  5]   5.00-6.00   sec  7.75 MBytes  65.0 Mbits/sec    0    426 KBytes       \n[  5]   6.00-7.00   sec  7.88 MBytes  66.0 Mbits/sec    0    426 KBytes       \n[  5]   7.00-8.00   sec  7.88 MBytes  66.1 Mbits/sec    0    426 KBytes       \n[  5]   8.00-9.00   sec  8.00 MBytes  67.1 Mbits/sec    0    426 KBytes       \n[  5]   9.00-10.00  sec  7.88 MBytes  66.0 Mbits/sec    0    426 KBytes       \n- - - - - - - - - - - - - - - - - - - - - - - - -\n[ ID] Interval           Transfer     Bitrate         Retr\n[  5]   0.00-10.00  sec  79.9 MBytes  67.0 Mbits/sec    0             sender\n[  5]   0.00-10.00  sec  77.9 MBytes  65.3 Mbits/sec                  receiver\n\niperf Done.\n</code></pre> Text Only<pre><code>freq: 5500.0\nRX: 231320 bytes (725 packets)\nTX: 121316 bytes (597 packets)\nsignal: -34 dBm\nrx bitrate: 270.0 MBit/s MCS 14 40MHz short GI\ntx bitrate: 300.0 MBit/s MCS 15 40MHz short GI\n</code></pre>"},{"location":"WifiPerformance/#realtek-8188cus","title":"Realtek 8188CUS","text":"<p> OS: Armbian v25.5.0-trunk.550, 6.12.28-current-x86</p> Chipset Class Average forward speed Average reverse speed RTL8192CU N 45.5 Mbits/sec 30.1 Mbits/sec Forward mode (client to server)Reverse mode (server to client)Wireless link info Text Only<pre><code>Connecting to host 10.0.60.10, port 5201\nReverse mode, remote host 10.0.60.10 is sending\n[  5] local 10.0.50.191 port 44361 connected to 10.0.60.10 port 5201\n[ ID] Interval           Transfer     Bitrate\n[  5]   0.00-1.00   sec  5.12 MBytes  42.9 Mbits/sec                  \n[  5]   1.00-2.00   sec  5.25 MBytes  44.0 Mbits/sec                  \n[  5]   2.00-3.00   sec  5.25 MBytes  44.0 Mbits/sec                  \n[  5]   3.00-4.00   sec  5.38 MBytes  45.1 Mbits/sec                  \n[  5]   4.00-5.00   sec  5.25 MBytes  44.0 Mbits/sec                  \n[  5]   5.00-6.00   sec  5.00 MBytes  41.9 Mbits/sec                  \n[  5]   6.00-7.00   sec  5.12 MBytes  43.0 Mbits/sec                  \n[  5]   7.00-8.00   sec  5.12 MBytes  43.0 Mbits/sec                  \n[  5]   8.00-9.00   sec  5.00 MBytes  41.9 Mbits/sec                  \n[  5]   9.00-10.00  sec  5.25 MBytes  44.0 Mbits/sec                  \n- - - - - - - - - - - - - - - - - - - - - - - - -\n[ ID] Interval           Transfer     Bitrate         Retr\n[  5]   0.00-10.01  sec  54.2 MBytes  45.5 Mbits/sec    0             sender\n[  5]   0.00-10.00  sec  51.8 MBytes  43.4 Mbits/sec                  receiver\n\niperf Done.\n</code></pre> Text Only<pre><code>Connecting to host 10.0.60.10, port 5201\n[  5] local 10.0.50.191 port 58915 connected to 10.0.60.10 port 5201\n[ ID] Interval           Transfer     Bitrate         Retr  Cwnd\n[  5]   0.00-1.00   sec  4.25 MBytes  35.6 Mbits/sec    0    214 KBytes       \n[  5]   1.00-2.00   sec  3.75 MBytes  31.5 Mbits/sec    0    286 KBytes       \n[  5]   2.00-3.00   sec  4.12 MBytes  34.6 Mbits/sec    0    365 KBytes       \n[  5]   3.00-4.00   sec  3.12 MBytes  26.2 Mbits/sec    0    382 KBytes       \n[  5]   4.00-5.00   sec  3.88 MBytes  32.5 Mbits/sec    0    382 KBytes       \n[  5]   5.00-6.00   sec  3.12 MBytes  26.2 Mbits/sec    0    382 KBytes       \n[  5]   6.00-7.00   sec  3.25 MBytes  27.3 Mbits/sec    0    382 KBytes       \n[  5]   7.00-8.00   sec  4.00 MBytes  33.6 Mbits/sec    0    382 KBytes       \n[  5]   8.00-9.00   sec  3.25 MBytes  27.3 Mbits/sec    0    382 KBytes       \n[  5]   9.00-10.00  sec  3.12 MBytes  26.2 Mbits/sec    0    382 KBytes       \n- - - - - - - - - - - - - - - - - - - - - - - - -\n[ ID] Interval           Transfer     Bitrate         Retr\n[  5]   0.00-10.00  sec  35.9 MBytes  30.1 Mbits/sec    0             sender\n[  5]   0.00-10.04  sec  34.2 MBytes  28.6 Mbits/sec                  receiver\n\niperf Done.\n</code></pre> Text Only<pre><code>freq: 2462.0\nRX: 101086 bytes (372 packets)\nTX: 61142 bytes (227 packets)\nsignal: -36 dBm\nrx bitrate: 65.0 MBit/s MCS 7\ntx bitrate: 72.2 MBit/s MCS 7 short GI\n</code></pre>"},{"location":"WifiPerformance/#realtek-8723bs","title":"Realtek 8723BS","text":"<p> OS: Armbian v25.2.1, 6.12.13-current-rockchip</p> Chipset Class Average forward speed Average reverse speed RTL8723BS N 35.5 Mbits/sec 48.1 Mbits/sec Forward mode (client to server)Reverse mode (server to client)Wireless link info Text Only<pre><code>Connecting to host 10.0.60.10, port 5201\nReverse mode, remote host 10.0.60.10 is sending\n[  5] local 10.0.50.134 port 53759 connected to 10.0.60.10 port 5201\n[ ID] Interval           Transfer     Bitrate\n[  5]   0.00-1.00   sec  5.29 MBytes  44.4 Mbits/sec                  \n[  5]   1.00-2.00   sec  4.20 MBytes  35.2 Mbits/sec                  \n[  5]   2.00-3.00   sec  3.22 MBytes  27.0 Mbits/sec                  \n[  5]   3.00-4.00   sec  4.38 MBytes  36.7 Mbits/sec                  \n[  5]   4.00-5.00   sec  3.58 MBytes  30.0 Mbits/sec                  \n[  5]   5.00-6.00   sec  4.96 MBytes  41.6 Mbits/sec                  \n[  5]   6.00-7.00   sec  4.70 MBytes  39.4 Mbits/sec                  \n[  5]   7.00-8.00   sec  3.04 MBytes  25.5 Mbits/sec                  \n[  5]   8.00-9.00   sec  3.96 MBytes  33.2 Mbits/sec                  \n[  5]   9.00-10.00  sec  1.35 MBytes  11.3 Mbits/sec                  \n- - - - - - - - - - - - - - - - - - - - - - - - -\n[ ID] Interval           Transfer     Bitrate         Retr\n[  5]   0.00-10.00  sec  42.4 MBytes  35.5 Mbits/sec    7             sender\n[  5]   0.00-10.00  sec  38.7 MBytes  32.4 Mbits/sec                  receiver\n\niperf Done.\n</code></pre> Text Only<pre><code>Connecting to host 10.0.60.10, port 5201\n[  5] local 10.0.50.134 port 48721 connected to 10.0.60.10 port 5201\n[ ID] Interval           Transfer     Bitrate         Retr  Cwnd\n[  5]   0.00-1.00   sec  6.19 MBytes  51.9 Mbits/sec    0    376 KBytes       \n[  5]   1.00-2.00   sec  5.65 MBytes  47.4 Mbits/sec    0    417 KBytes       \n[  5]   2.00-3.00   sec  5.90 MBytes  49.5 Mbits/sec    0    440 KBytes       \n[  5]   3.00-4.00   sec  5.47 MBytes  45.9 Mbits/sec    0    467 KBytes       \n[  5]   4.00-5.00   sec  5.65 MBytes  47.4 Mbits/sec    0    467 KBytes       \n[  5]   5.00-6.00   sec  5.59 MBytes  46.9 Mbits/sec    0    496 KBytes       \n[  5]   6.00-7.00   sec  5.65 MBytes  47.4 Mbits/sec    0    535 KBytes       \n[  5]   7.00-8.00   sec  5.78 MBytes  48.5 Mbits/sec    0    535 KBytes       \n[  5]   8.00-9.00   sec  5.28 MBytes  44.3 Mbits/sec    0    535 KBytes       \n[  5]   9.00-10.00  sec  6.15 MBytes  51.6 Mbits/sec    0    566 KBytes       \n- - - - - - - - - - - - - - - - - - - - - - - - -\n[ ID] Interval           Transfer     Bitrate         Retr\n[  5]   0.00-10.00  sec  57.3 MBytes  48.1 Mbits/sec    0             sender\n[  5]   0.00-10.05  sec  55.9 MBytes  46.7 Mbits/sec                  receiver\n\niperf Done.\n</code></pre> Text Only<pre><code>\n</code></pre>"},{"location":"WifiPerformance/#realtek-8723bu","title":"Realtek 8723BU","text":"<p> OS: Armbian v25.5.0-trunk.550, 6.12.28-current-x86</p> Chipset Class Average forward speed Average reverse speed RTL8723BU N 1.67 Mbits/sec 17.7 Mbits/sec Forward mode (client to server)Reverse mode (server to client)Wireless link info Text Only<pre><code>Connecting to host 10.0.60.10, port 5201\nReverse mode, remote host 10.0.60.10 is sending\n[  5] local 10.0.50.192 port 48165 connected to 10.0.60.10 port 5201\n[ ID] Interval           Transfer     Bitrate\n[  5]   0.00-1.00   sec   256 KBytes  2.09 Mbits/sec                  \n[  5]   1.00-2.00   sec   128 KBytes  1.05 Mbits/sec                  \n[  5]   2.00-3.00   sec   256 KBytes  2.10 Mbits/sec                  \n[  5]   3.00-4.00   sec   128 KBytes  1.05 Mbits/sec                  \n[  5]   4.00-5.00   sec   128 KBytes  1.05 Mbits/sec                  \n[  5]   5.00-6.00   sec   256 KBytes  2.10 Mbits/sec                  \n[  5]   6.00-7.00   sec   128 KBytes  1.05 Mbits/sec                  \n[  5]   7.00-8.00   sec   256 KBytes  2.10 Mbits/sec                  \n[  5]   8.00-9.00   sec   128 KBytes  1.05 Mbits/sec                  \n[  5]   9.00-10.00  sec   128 KBytes  1.05 Mbits/sec                  \n- - - - - - - - - - - - - - - - - - - - - - - - -\n[ ID] Interval           Transfer     Bitrate         Retr\n[  5]   0.00-10.07  sec  2.00 MBytes  1.67 Mbits/sec   75             sender\n[  5]   0.00-10.00  sec  1.75 MBytes  1.47 Mbits/sec                  receiver\n\niperf Done.\n</code></pre> Text Only<pre><code>Connecting to host 10.0.60.10, port 5201\n[  5] local 10.0.50.192 port 33845 connected to 10.0.60.10 port 5201\n[ ID] Interval           Transfer     Bitrate         Retr  Cwnd\n[  5]   0.00-1.00   sec  2.00 MBytes  16.8 Mbits/sec    0    115 KBytes       \n[  5]   1.00-2.00   sec  2.38 MBytes  19.9 Mbits/sec    0    202 KBytes       \n[  5]   2.00-3.00   sec  2.00 MBytes  16.8 Mbits/sec    0    260 KBytes       \n[  5]   3.00-4.00   sec  1.88 MBytes  15.7 Mbits/sec    0    346 KBytes       \n[  5]   4.00-5.00   sec  2.25 MBytes  18.9 Mbits/sec    0    437 KBytes       \n[  5]   5.00-6.00   sec  2.88 MBytes  24.1 Mbits/sec    0    549 KBytes       \n[  5]   6.00-7.00   sec  2.38 MBytes  19.9 Mbits/sec    0    632 KBytes       \n[  5]   7.00-8.00   sec  1.25 MBytes  10.5 Mbits/sec    0    714 KBytes       \n[  5]   8.00-9.00   sec  2.75 MBytes  23.1 Mbits/sec    0    810 KBytes       \n[  5]   9.00-10.00  sec  1.38 MBytes  11.5 Mbits/sec    0    844 KBytes       \n- - - - - - - - - - - - - - - - - - - - - - - - -\n[ ID] Interval           Transfer     Bitrate         Retr\n[  5]   0.00-10.00  sec  21.1 MBytes  17.7 Mbits/sec    0             sender\n[  5]   0.00-10.01  sec  18.4 MBytes  15.4 Mbits/sec                  receiver\n\niperf Done.\n</code></pre> Text Only<pre><code>freq: 2462.0\nRX: 85181 bytes (369 packets)\nTX: 56055 bytes (199 packets)\nsignal: -44 dBm\nrx bitrate: 52.0 MBit/s MCS 5\ntx bitrate: 72.2 MBit/s MCS 7 short GI\n</code></pre>"},{"location":"WifiPerformance/#uwe-5622","title":"UWE 5622","text":"<p> OS: Armbian v25.5.0-trunk.538, 6.12.23-current-sunxi64</p> Chipset Class Average forward speed Average reverse speed UWE5622 N 141 Mbits/sec 140 Mbits/sec Forward mode (client to server)Reverse mode (server to client)Wireless link info Text Only<pre><code>Connecting to host 10.0.60.10, port 5201\nReverse mode, remote host 10.0.60.10 is sending\n[  5] local 10.0.50.128 port 39925 connected to 10.0.60.10 port 5201\n[ ID] Interval           Transfer     Bitrate\n[  5]   0.00-1.00   sec  15.7 MBytes   132 Mbits/sec                  \n[  5]   1.00-2.00   sec  16.6 MBytes   139 Mbits/sec                  \n[  5]   2.00-3.00   sec  16.8 MBytes   141 Mbits/sec                  \n[  5]   3.00-4.00   sec  16.6 MBytes   140 Mbits/sec                  \n[  5]   4.00-5.00   sec  14.7 MBytes   123 Mbits/sec                  \n[  5]   5.00-6.00   sec  18.4 MBytes   155 Mbits/sec                  \n[  5]   6.00-7.00   sec  16.7 MBytes   140 Mbits/sec                  \n[  5]   7.00-8.00   sec  16.6 MBytes   139 Mbits/sec                  \n[  5]   8.00-9.00   sec  16.8 MBytes   141 Mbits/sec                  \n[  5]   9.00-10.00  sec  16.9 MBytes   142 Mbits/sec                  \n- - - - - - - - - - - - - - - - - - - - - - - - -\n[ ID] Interval           Transfer     Bitrate         Retr\n[  5]   0.00-10.01  sec   169 MBytes   141 Mbits/sec  350             sender\n[  5]   0.00-10.00  sec   166 MBytes   139 Mbits/sec                  receiver\n\niperf Done.\n</code></pre> Text Only<pre><code>Connecting to host 10.0.60.10, port 5201\n[  5] local 10.0.50.128 port 32803 connected to 10.0.60.10 port 5201\n[ ID] Interval           Transfer     Bitrate         Retr  Cwnd\n[  5]   0.00-1.00   sec  18.7 MBytes   157 Mbits/sec    0    421 KBytes       \n[  5]   1.00-2.00   sec  16.0 MBytes   134 Mbits/sec    0    421 KBytes       \n[  5]   2.00-3.00   sec  16.7 MBytes   140 Mbits/sec    0    421 KBytes       \n[  5]   3.00-4.00   sec  16.8 MBytes   141 Mbits/sec    0    421 KBytes       \n[  5]   4.00-5.00   sec  16.8 MBytes   141 Mbits/sec    0    421 KBytes       \n[  5]   5.00-6.00   sec  15.9 MBytes   133 Mbits/sec    0    421 KBytes       \n[  5]   6.00-7.00   sec  16.7 MBytes   140 Mbits/sec    0    421 KBytes       \n[  5]   7.00-8.00   sec  16.7 MBytes   140 Mbits/sec    0    421 KBytes       \n[  5]   8.00-9.00   sec  16.7 MBytes   140 Mbits/sec    0    421 KBytes       \n[  5]   9.00-10.00  sec  15.9 MBytes   133 Mbits/sec    0    421 KBytes       \n- - - - - - - - - - - - - - - - - - - - - - - - -\n[ ID] Interval           Transfer     Bitrate         Retr\n[  5]   0.00-10.00  sec   167 MBytes   140 Mbits/sec    0             sender\n[  5]   0.00-10.00  sec   165 MBytes   138 Mbits/sec                  receiver\n\niperf Done.\n</code></pre> Text Only<pre><code>freq: 5500\nRX: 3143165524 bytes (2598523 packets)\n</code></pre>"},{"location":"WifiPerformance/#xradio-xr819","title":"Xradio XR819","text":"<p> OS: Armbian v25.5.1, 6.12.23-current-sunxi</p> Chipset Class Average forward speed Average reverse speed XR819 N 19.3 Mbits/sec 12.1 Mbits/sec Forward mode (client to server)Reverse mode (server to client)Wireless link info Text Only<pre><code>Connecting to host 10.0.60.10, port 5201\nReverse mode, remote host 10.0.60.10 is sending\n[  5] local 10.0.50.196 port 50459 connected to 10.0.60.10 port 5201\n[ ID] Interval           Transfer     Bitrate\n[  5]   0.00-1.00   sec  1.91 MBytes  16.1 Mbits/sec                  \n[  5]   1.00-2.00   sec  1.60 MBytes  13.4 Mbits/sec                  \n[  5]   2.00-3.00   sec  1.90 MBytes  16.0 Mbits/sec                  \n[  5]   3.00-4.00   sec  2.04 MBytes  17.1 Mbits/sec                  \n[  5]   4.00-5.00   sec  1.99 MBytes  16.7 Mbits/sec                  \n[  5]   5.00-6.00   sec  2.07 MBytes  17.4 Mbits/sec                  \n[  5]   6.00-7.00   sec  2.33 MBytes  19.5 Mbits/sec                  \n[  5]   7.00-8.00   sec  2.41 MBytes  20.2 Mbits/sec                  \n[  5]   8.00-9.00   sec  2.18 MBytes  18.3 Mbits/sec                  \n[  5]   9.00-10.00  sec  2.45 MBytes  20.5 Mbits/sec                  \n- - - - - - - - - - - - - - - - - - - - - - - - -\n[ ID] Interval           Transfer     Bitrate         Retr\n[  5]   0.00-10.10  sec  23.2 MBytes  19.3 Mbits/sec    0             sender\n[  5]   0.00-10.00  sec  20.9 MBytes  17.5 Mbits/sec                  receiver\n\niperf Done.\n</code></pre> Text Only<pre><code>Connecting to host 10.0.60.10, port 5201\n[  5] local 10.0.50.196 port 46033 connected to 10.0.60.10 port 5201\n[ ID] Interval           Transfer     Bitrate         Retr  Cwnd\n[  5]   0.00-1.00   sec  1.31 MBytes  11.0 Mbits/sec    5   36.8 KBytes       \n[  5]   1.00-2.00   sec  1.40 MBytes  11.8 Mbits/sec    1   42.4 KBytes       \n[  5]   2.00-3.00   sec  1.51 MBytes  12.6 Mbits/sec    0   65.0 KBytes       \n[  5]   3.00-4.00   sec  1.62 MBytes  13.6 Mbits/sec    0   80.6 KBytes       \n[  5]   4.00-5.00   sec  1.24 MBytes  10.4 Mbits/sec    3   56.6 KBytes       \n[  5]   5.00-6.00   sec  1.49 MBytes  12.5 Mbits/sec    0   74.9 KBytes       \n[  5]   6.00-7.00   sec  1.49 MBytes  12.5 Mbits/sec    0   84.8 KBytes       \n[  5]   7.00-8.00   sec  1.49 MBytes  12.5 Mbits/sec    0   91.9 KBytes       \n[  5]   8.00-9.00   sec  1.37 MBytes  11.5 Mbits/sec    0   97.6 KBytes       \n[  5]   9.00-10.00  sec  1.49 MBytes  12.5 Mbits/sec    0    102 KBytes       \n- - - - - - - - - - - - - - - - - - - - - - - - -\n[ ID] Interval           Transfer     Bitrate         Retr\n[  5]   0.00-10.00  sec  14.4 MBytes  12.1 Mbits/sec    9             sender\n[  5]   0.00-10.04  sec  14.1 MBytes  11.8 Mbits/sec                  receiver\n\niperf Done.\n</code></pre> Text Only<pre><code>freq: 2462\nRX: 60150 bytes (180 packets)\nTX: 62764 bytes (257 packets)\nsignal: -30 dBm\nrx bitrate: 6.0 MBit/s\ntx bitrate: 52.0 MBit/s MCS 5\n</code></pre>"},{"location":"WifiPerformance/#contribute","title":"Contribute","text":"<ul> <li>Assist us in developing and maintaining our testing system: Your expertise can help us enhance and optimize our test infrastructure. By contributing your skills, you can play a key role in ensuring the accuracy and reliability of our test results.</li> </ul> <ul> <li>Donate hardware: Your contribution of new hardware, whether it\u2019s a wireless adapter or any other equipment, helps us expand our testing capabilities. We\u2019re specifically looking for new wireless adapters that haven\u2019t yet been added to our system. Your donation can directly impact the scope and depth of our tests.</li> </ul> <ul> <li>Join our team: Become part of our passionate and dedicated team. We\u2019re looking for individuals who share our vision and are eager to contribute to the development of innovative testing solutions. Whether you have technical expertise or simply a willingness to learn, there\u2019s a place for you here!</li> </ul>"},{"location":"WifiPerformance/#other-resources","title":"Other resources","text":"<ul> <li>USB WiFi Adapter Information for Linux</li> <li>Official Linux Wireless documentation</li> <li>Armbian forum - Advanced users - Development</li> </ul>"},{"location":"Contribute/Armbian-config/","title":"Adding software title to Armbian config","text":""},{"location":"Contribute/Armbian-config/#tinkering","title":"Tinkering","text":""},{"location":"Contribute/Armbian-config/#manual-install","title":"Manual install","text":"<p>First try to install application manually. If it works on Debian or Ubuntu, proceed. In this example we will be using <code>test</code>.</p>"},{"location":"Contribute/Armbian-config/#clone-repository","title":"Clone repository","text":"Text Only<pre><code>git clone https://github.com/armbian/configng\n</code></pre>"},{"location":"Contribute/Armbian-config/#design-menu","title":"Design menu","text":"<p>Predict which commands you expect to have in the menu. For installing an application, we usually need two, <code>install</code> and <code>uninstall</code>. Armbian-config stores menu in JSON files, so you need to select appropriate file. This one we will place under <code>Software -&gt; Management</code>.</p> File location: tools/json/config.software.json<pre><code>{\n    \"id\": \"MAN005\",\n    \"description\": \"Webmin web-based management tool\",\n    \"short\": \"Webmin\",\n    \"module\": \"module_webmin\",\n    \"command\": [\n        \"see_menu module_webmin\"\n    ],\n    \"status\": \"Stable\",\n    \"author\": \"@Tearran\",\n    \"condition\": \"\"\n}\n</code></pre> Field name Function Notes <code>id</code> <code>unique identifier</code> Select higher number. If you will select existing, application will fail to run <code>description</code> <code>menu descriptor</code> This will be displayed in the menu <code>short</code> <code>docs menu descriptor</code> This will over-ride description in the rendering of documentation <code>module</code> <code>link json entry with module</code> Used for documentation generation - read info from <code>module_options</code> <code>prompt</code> <code>confirmation text</code> Some features needs confirmation before proceeding <code>command</code> <code>executes function</code> What should be run after we select and agree (optional) <code>status</code> <code>Stable|Disabled</code> Control if function is shown to users in the menu <code>author</code> <code>GitHub handle</code> Developer or maintainer of this functionality <code>condition</code> <code>controlling display</code> Under what conditions we show this menu item <p>Note</p> <p>Pay attention to JSON structure. JSON validator at pull request will break in case spaces or commas will be placed wrong.</p>"},{"location":"Contribute/Armbian-config/#module-code","title":"Module code","text":"<p>Place module functions, each into its file, following by file naming convention, into one of the folders:</p> Folder location: tools/modules<pre><code>docs\nfunctions\nnetwork\nruntime\nsoftware\nsystem\n</code></pre> File location: tools/template/module_software_template.sh<pre><code>declare -A module_options\nmodule_options+=(\n    [\"module_template,author\"]=\"@armbian\"\n    [\"module_template,feature\"]=\"module_template\"\n    [\"module_template,example\"]=\"install remove help\"\n    [\"module_template,desc\"]=\"Example module unattended interface.\"\n    [\"module_template,status\"]=\"review\"\n)\n\nfunction module_template() {\n    local title=\"test\"\n    local condition=$(which \"$title\" 2&gt;/dev/null)\n\n    # Convert the example string to an array\n    local commands\n    IFS=' ' read -r -a commands &lt;&lt;&lt; \"${module_options[\"module_template,example\"]}\"\n\n    case \"$1\" in\n        \"${commands[0]}\")\n        echo \"Installing $title...\"\n        # Installation logic here\n        ;;\n        \"${commands[1]}\")\n        echo \"Removing $title...\"\n        # Removal logic here\n        ;;\n        \"${commands[2]}\")\n            echo -e \"\\nUsage: ${module_options[\"module_template,feature\"]} &lt;command&gt;\"\n            echo -e \"Commands:  ${module_options[\"module_template,example\"]}\"\n            echo \"Available commands:\"\n            echo -e \"\\tinstall\\t- Install $title.\"\n            echo -e \"\\tremove\\t- Remove $title.\"\n            echo\n        ;;\n        *)\n        ${module_options[\"module_template,feature\"]} ${commands[2]}\n        ;;\n    esac\n    }\n\n# uncomment to test the module\n#module_template \"$1\"\n</code></pre> <p>Note</p> <p>Pay attention to coding style structure. If you use modern IDE, this will be done automatically. </p>"},{"location":"Contribute/Armbian-config/#manual-testing","title":"Manual testing","text":"<p>Whenever you are making changes to the JSON or modules structure, make sure to join JSON segments into main JSON file and fun. This you do with a command: Python<pre><code>tools/config-assemble.sh -p\n</code></pre> Python is required to run this tool.</p> Bash<pre><code>sudo sudo bin/armbian-config --cmd\n</code></pre>"},{"location":"Contribute/Armbian-config/#unit-tests","title":"Unit tests","text":"<p>This part is optional but highly recommended for at least install functionality. Our CI infrastructure will test this feature at pull request, on general code changes (push to main branch) and daily. It will test feature on latest Debian and Ubuntu images. Unit tests have simple design:</p> <p>Name of the config file is function id (unique identifier) <code>CON004.conf</code></p> <p>File location: tests/CON004.conf<pre><code>ENABLED=true\nRELEASE=\"bookworm:jammy:noble\"\nCONDITION=\"test=\\$(docker container ls -a |  grep portainer )\"\n</code></pre> Make sure to add a test condition that makes sense. It has to return 0 when test succeeds and 1 if fails.</p> Variable Function Description ENABLED false / true If test is live or not PREINSTALL cmd to run specific test dependencies CONDITION main test verification must return 0 for test success RELEASE bookworm:jammy:noble\u201d run on specific or leave empty to run on all"},{"location":"Contribute/Armbian-config/#pull-request","title":"Pull request","text":"<p>When your solution works locally and you prepare unit tests its time to submit a pull request. Fix your code and unit tests until all pull request checks becomes green.</p> <p>Examples:</p> <ul> <li>armbian/configng!210</li> <li>armbian/configng!230</li> <li>armbian/configng!240</li> </ul>"},{"location":"Contribute/Armbian-config/#documentation","title":"Documentation","text":"<p>Documentation is generated automatically after your pull request is merged. But as automated documentation might not be satisfactory, you can add cover image, header and footer. You can use markdown elements with enhancements from https://squidfunk.github.io/mkdocs-material/</p>"},{"location":"Contribute/Armbian-config/#cover-image","title":"Cover image","text":"<p>Once code works perfectly, look for cover image. It can be .png or .webp. Place image to the <code>tools/include/images/CON004.webp</code></p>"},{"location":"Contribute/Armbian-config/#header","title":"Header","text":"Header: tools/include/markdown/CON004-header.md<pre><code>Portainer simplifies your Docker container management via Portainer web interface. It enables faster deploy of the applications and it gives real time visibility.\n</code></pre>"},{"location":"Contribute/Armbian-config/#footer","title":"Footer","text":"Footer: tools/include/markdown/CON004-footer.md<pre><code>=== \"Access to the web interface\"\n\n    The web interface is accessible via port **9002**:\n\n    - URL = `http://&lt;your.IP&gt;:9002`\n</code></pre>"},{"location":"User-Guide_Armbian-Config/Localisation/","title":"Localisation","text":""},{"location":"User-Guide_Armbian-Config/Localisation/#change-global-timezone","title":"Change Global timezone","text":"<p>Edit: footer header Status: Stable Architecture: x86-64 aarch64 armhf riscv64 Maintainer: @armbian Documentation: Link </p> <pre><code>armbian-config --cmd GTZ001</code></pre>"},{"location":"User-Guide_Armbian-Config/Localisation/#change-locales-reconfigure-the-language-and-character-set","title":"Change Locales reconfigure the language and character set","text":"<p>Edit: footer header Status: Stable  </p> <pre><code>armbian-config --cmd LOC001</code></pre>"},{"location":"User-Guide_Armbian-Config/Localisation/#change-keyboard-layout","title":"Change Keyboard layout","text":"<p>Edit: footer header Status: Stable  </p> <pre><code>armbian-config --cmd KEY001</code></pre>"},{"location":"User-Guide_Armbian-Config/Localisation/#change-system-hostname","title":"Change System Hostname","text":"<p>Edit: footer header Status: Stable  </p> <pre><code>armbian-config --cmd HOS001</code></pre>"},{"location":"User-Guide_Armbian-Config/Network/","title":"Fixed and wireless network settings","text":""},{"location":"User-Guide_Armbian-Config/Network/#basic-setup","title":"Basic setup","text":"<p>Basic network setup</p> <p></p> <pre><code>graph LR\n  A{Select interface} --&gt; B[Configure];\n  A{Select interface} --&gt; C[Drop];\n  C ----&gt;A;\n  B --&gt;F[DHCP];\n  B ----&gt;G[Static];\n  G ------&gt;| MAC, IP, route, GW, DNS|H[Configured];\n  F --&gt;| MAC | H[Configured];</code></pre> <p>Edit: footer header Status: Stable Architecture: x86-64 aarch64 armhf riscv64 Maintainer: @armbian Documentation: Link </p> <pre><code>armbian-config --cmd BNS001</code></pre> <p>Select Interface: Choose the desired network interface, such as:</p> <ul> <li><code>eth0</code> for wired Ethernet</li> <li><code>wlan0</code> for wireless connections</li> </ul> <p>If selecting a wireless interface:</p> <ul> <li>A list of available Access Points (APs) will be displayed.</li> <li>Select your preferred AP and enter the password when prompted.</li> <li>Leave the password field empty for open networks.</li> </ul> <p>IP Address Configuration: Choose between:</p> <ul> <li>DHCP (Dynamic Host Configuration Protocol):   Automatically assigns an IP address.</li> </ul> <ul> <li>Static IP:   Manually enter the following details:<ul> <li>MAC Address (optional): Specify if you want to spoof the MAC address.</li> <li>IP Address: Use CIDR notation (e.g., <code>192.168.1.10/24</code>).</li> <li>Route: Default is <code>0.0.0.0/0</code>.</li> <li>Gateway: Typically the router\u2019s IP (e.g., <code>192.168.1.1</code>).</li> <li>DNS: Default is <code>9.9.9.9</code>, but you can specify another.</li> </ul> </li> </ul> <p>Finalize Configuration: </p> <ul> <li>Review and confirm your settings.</li> <li>The system will apply the configurations.</li> <li>Your network connection should then be fully established.</li> </ul> Remove Fallback DHCP Configuration:<pre><code>armbian-config --cmd BNS002\n</code></pre>"},{"location":"User-Guide_Armbian-Config/Network/#view-configuration","title":"View configuration","text":"<p>View Network Configuration</p> <p></p> <p>View Network Configuration allows you to display the system\u2019s active network settings as a Netplan YAML configuration. This shows interfaces, IP addresses, gateways, DNS servers, and other networking details in a clean, human-readable format. Useful for verifying, troubleshooting, or manually editing network setup on systems that use Netplan for managing network interfaces.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 aarch64 armhf riscv64 Maintainer: @armbian Documentation: Link </p> <pre><code>armbian-config --cmd VNS001</code></pre>"},{"location":"User-Guide_Armbian-Config/Network/#advanced","title":"Advanced","text":"<p>Advanced bridged network configuration</p> <p>Edit: footer header Architecture: x86-64 aarch64 armhf riscv64 Maintainer: @armbian Documentation: Link </p>"},{"location":"User-Guide_Armbian-Config/Network/#add-or-change","title":"Add or Change","text":"<p>Add / change interface</p> <pre><code>graph LR\n  A[Network] --&gt; B[Add / Change interface];\n  A[Network] --&gt; O[Revert to defaults];\n  A[Network] --&gt; P[Show configuration];\n  B ----&gt;E[Wired];\n  B ----&gt;F[Wireless];\n  E --&gt;R[DHCP];\n  E --&gt;T[Static];\n  E --&gt;S[Spoof MAC];\n  F --&gt;X[Station];\n  F --&gt;W[Access point]; </code></pre> <p>Edit: footer header Status: Stable Architecture: x86-64 aarch64 armhf riscv64 Maintainer: @armbian Documentation: Link </p> <pre><code>armbian-config --cmd NEA002</code></pre> Wired device checkWireless device check <p>In order to configure your network devices, they need to be supported the kernel.</p> <p>To verify, use command:</p> Bash<pre><code>ip addr\n</code></pre> <p>It is usually something like eth0, enp4s3 or lan.</p> <p>In order to configure your wireless network devices, they need to be supported the kernel.</p> <p>To verify, use command:</p> Bash<pre><code>iw dev | awk '$1==\"Interface\"{print $2}'\n</code></pre> <p>It is usually something like <code>wlan0</code>, <code>wlo1</code> or <code>wlx12334c47dec3</code>. If you get blank response, it means your WiFi device / dongle is not supported by the kernel.</p> Revert to Armbian defaults:<pre><code>armbian-config --cmd NEA003\n</code></pre> Show configuration:<pre><code>armbian-config --cmd NEA004\n</code></pre> Show active status:<pre><code>armbian-config --cmd NEA005\n</code></pre>"},{"location":"User-Guide_Armbian-Config/System/","title":"System wide and admin settings","text":""},{"location":"User-Guide_Armbian-Config/System/#hardware","title":"Hardware","text":"<p>Alternative kernels, headers, overlays, bootenv</p> <p>Edit: footer header </p>"},{"location":"User-Guide_Armbian-Config/System/#alternative-kernels","title":"Alternative kernels","text":"<p>Use alternative kernels</p> <p></p> <p>Switching between different kernel versions can significantly impact the functionality of your device. A newer or older kernel may introduce changes to hardware compatibility, drivers, and system stability. Some features may stop working, while others may improve or be reintroduced.</p> <p>Kernel changes carry inherent risks!</p> <ul> <li>A mismatched or incompatible kernel may result in boot failures, rendering the system unresponsive.</li> <li>Certain peripherals or hardware components (e.g., Wi-Fi, GPU acceleration, or power management) may no longer function correctly.</li> <li>Custom configurations or third-party modules might need to be recompiled or adjusted to work with the new kernel.</li> </ul> <p>Precautions Before Switching Kernels Before switching kernels, it is strongly recommended to:</p> <ol> <li>Back up your system to prevent data loss.</li> <li>Verify compatibility of your hardware and essential drivers with the target kernel version.</li> <li>Keep a rescue method available, such as a bootable SD card / USB drive or serial console access, to recover the system if necessary.</li> </ol> <p>Recovery Steps if Boot Fails If your device fails to boot after a kernel change, you may need to:</p> <ul> <li>Revert to a previous working kernel using recovery options.</li> <li>Use a serial console or debug mode to diagnose the issue.</li> <li>Reinstall the system if no recovery options are available.</li> </ul> <p>Exercise caution when switching kernels, especially on production systems or devices with limited recovery options.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 aarch64 armhf riscv64 Maintainer: @armbian Documentation: Link </p> <pre><code>armbian-config --cmd KER001</code></pre>"},{"location":"User-Guide_Armbian-Config/System/#kernel-headers","title":"Kernel Headers","text":"<p>Install Linux headers</p> <p></p> <p>Kernel headers are files required to build modules (drivers) or software that interfaces directly with the Linux kernel. Installing headers ensures compatibility when compiling custom drivers, DKMS modules (like ZFS, WireGuard), or updating third-party software that requires access to kernel internals. The installed headers match your running kernel version and are critical for system extensions and hardware support.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 aarch64 armhf riscv64 Maintainer: @armbian Documentation: Link </p> <pre><code>armbian-config --cmd HEAD01</code></pre> Remove Linux headers:<pre><code>armbian-config --cmd HEAD02\n</code></pre>"},{"location":"User-Guide_Armbian-Config/System/#device-tree-overlays","title":"Device Tree Overlays","text":"<p>Manage device tree overlays</p> <p></p> <p>Device Tree Overlays allow you to dynamically modify the Linux device tree at runtime, without rebuilding the kernel. They are used to enable or configure specific hardware features (like GPIO pins, I\u00b2C, SPI, sensors, displays) on single-board computers. Overlays are small snippets that can add, change, or remove parts of the hardware description, making it flexible to adapt the system for different peripherals without recompiling the full device tree.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 aarch64 armhf riscv64 Maintainer: @armbian Documentation: Link </p> <pre><code>armbian-config --cmd DTO001</code></pre>"},{"location":"User-Guide_Armbian-Config/System/#odroid-boards-config","title":"Odroid Boards Config","text":"<p>Select Odroid board configuration</p> <p>Edit: footer header Status: Preview Architecture: armhf </p> <pre><code>armbian-config --cmd ODR001</code></pre>"},{"location":"User-Guide_Armbian-Config/System/#boot-environment","title":"Boot Environment","text":"<p>Edit the boot environment</p> <p></p> <p>Edit the boot environment allows you to modify critical boot settings stored in <code>/boot/armbianEnv.txt</code>. You can adjust options such as root filesystem location, kernel parameters, overlays, boot targets, or enable advanced features like early serial console. This is essential for fine-tuning hardware support, troubleshooting, or optimizing system startup behavior.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 aarch64 armhf riscv64 Maintainer: @armbian Documentation: Link </p> <pre><code>armbian-config --cmd BOOT01</code></pre>"},{"location":"User-Guide_Armbian-Config/System/#storage","title":"Storage","text":"<p>Install to internal media, ZFS, NFS, read-only rootfs</p> <p>Edit: footer header Architecture: x86-64 aarch64 armhf riscv64 Maintainer: @armbian Documentation: Link </p>"},{"location":"User-Guide_Armbian-Config/System/#install","title":"Install","text":"<p>This section provides an option to transfer the live running Armbian system from an SD card to internal storage devices such as eMMC, SATA, NVMe, or USB drives. It prepares the target storage, copies the active system, adjusts bootloader settings, and ensures the system can boot independently without requiring reinstallation.</p> <p>Edit: footer header Status: Preview Architecture: x86-64 aarch64 armhf riscv64 Maintainer: @armbian Documentation: Link </p> <pre><code>armbian-config --cmd STO001</code></pre>"},{"location":"User-Guide_Armbian-Config/System/#read-only-fs","title":"Read Only FS","text":"<p>Enable read only filesystem</p> <p>Read-only filesystem is enabled using overlayroot, a utility that places a temporary writable layer over the system root filesystem. Changes made during runtime are redirected into RAM or an alternative writable storage, while the underlying system remains untouched. This ensures that after a reboot, the system returns to a clean original state. It\u2019s ideal for kiosks, appliances, SD card-based systems, and scenarios where long-term filesystem durability and recovery are critical.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 aarch64 armhf riscv64 Maintainer: @armbian Documentation: Link </p> <pre><code>armbian-config --cmd ROO001</code></pre> Disable read only filesystem:<pre><code>armbian-config --cmd ROO002\n</code></pre>"},{"location":"User-Guide_Armbian-Config/System/#nfs","title":"NFS","text":"<p>Enable Network filesystem (NFS) support</p> <p>Edit: footer header Status: Stable Architecture: x86-64 aarch64 armhf riscv64 Maintainer: @armbian Documentation: Link </p> <pre><code>armbian-config --cmd NETF01</code></pre> Disable Network filesystem (NFS) support:<pre><code>armbian-config --cmd NETF02\n</code></pre>"},{"location":"User-Guide_Armbian-Config/System/#nfs-server","title":"NFS server","text":"<p>Enable network filesystem (NFS) daemon</p> <p>Edit: footer header Status: Stable Architecture: x86-64 aarch64 armhf riscv64 Maintainer: @armbian Documentation: Link </p> <pre><code>armbian-config --cmd NETF04</code></pre> Configure network filesystem (NFS) daemon:<pre><code>armbian-config --cmd NETF05\n</code></pre> Remove network filesystem (NFS) daemon:<pre><code>armbian-config --cmd NETF06\n</code></pre> Show network filesystem (NFS) daemon clients:<pre><code>armbian-config --cmd NETF07\n</code></pre>"},{"location":"User-Guide_Armbian-Config/System/#find-nfs-servers","title":"Find NFS servers","text":"<p>Find NFS servers in subnet and mount shares</p> <p>Edit: footer header Status: Stable Architecture: x86-64 aarch64 armhf riscv64 Maintainer: @armbian Documentation: Link </p> <pre><code>armbian-config --cmd NETF09</code></pre> Show and manage NFS mounts:<pre><code>armbian-config --cmd NETF10\n</code></pre>"},{"location":"User-Guide_Armbian-Config/System/#zfs","title":"ZFS","text":"<p>ZFS filesystem - enable support</p> <p></p> <p>ZFS is an advanced, high-performance file system and volume manager designed for data integrity, scalability, and ease of use. It offers features like copy-on-write snapshots, native compression, data deduplication, automatic repair, and efficient storage pooling. Originally developed by Sun Microsystems, ZFS is ideal for handling large amounts of data reliably with minimal maintenance.</p> <p>When enabling ZFS support, Armbian checks if the running kernel can support ZFS, installs matching kernel headers if necessary, and builds the ZFS DKMS (Dynamic Kernel Module Support) module automatically.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 aarch64 armhf riscv64 Maintainer: @armbian Documentation: Link </p> <pre><code>armbian-config --cmd ZFS001</code></pre>"},{"location":"User-Guide_Armbian-Config/System/#key-features","title":"Key Features","text":""},{"location":"User-Guide_Armbian-Config/System/#data-integrity","title":"Data Integrity","text":"<ul> <li>Copy-on-Write (CoW): Prevents data corruption by never overwriting live data.</li> <li>Checksumming: Detects and corrects silent data corruption (bit rot).</li> </ul>"},{"location":"User-Guide_Armbian-Config/System/#storage-management","title":"Storage Management","text":"<ul> <li>Pooled Storage: Eliminates the need for traditional partitions; all storage is managed dynamically.</li> <li>Snapshots &amp; Clones: Creates instant backups without using extra storage.</li> </ul>"},{"location":"User-Guide_Armbian-Config/System/#performance-scalability","title":"Performance &amp; Scalability","text":"<ul> <li>Efficient Compression &amp; Deduplication: Reduces storage usage without performance loss.</li> <li>Dynamic Striping &amp; Caching: Distributes data across multiple disks for optimized read/write speeds.</li> </ul>"},{"location":"User-Guide_Armbian-Config/System/#advanced-security","title":"Advanced Security","text":"<ul> <li>Native Encryption: Supports dataset-level encryption for secure data storage.</li> <li>RAID-Z: A superior RAID alternative that prevents write-hole issues.</li> </ul> ZFS filesystem - remove support:<pre><code>armbian-config --cmd ZFS002\n</code></pre>"},{"location":"User-Guide_Armbian-Config/System/#ssh-daemon","title":"SSH daemon","text":"<p>Manage SSH daemon options, enable 2FA</p> <p>Edit: footer header </p>"},{"location":"User-Guide_Armbian-Config/System/#native","title":"Native","text":"<p>Disable root login</p> <p></p> <p>Manage native SSH daemon allows you to configure SSH server settings such as login security, authentication methods, and connection restrictions. It also enables setting up Two-Factor Authentication (2FA) to further secure SSH access using time-based codes (TOTP), adding an extra layer of protection beyond passwords.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 aarch64 armhf riscv64 Maintainer: @armbian Documentation: Link </p> <pre><code>armbian-config --cmd ACC001</code></pre> Enable root login:<pre><code>armbian-config --cmd ACC002\n</code></pre> Disable password login:<pre><code>armbian-config --cmd ACC003\n</code></pre> Enable password login:<pre><code>armbian-config --cmd ACC004\n</code></pre> Disable Public key authentication login:<pre><code>armbian-config --cmd ACC005\n</code></pre> Enable Public key authentication login:<pre><code>armbian-config --cmd ACC006\n</code></pre> Disable OTP authentication:<pre><code>armbian-config --cmd ACC007\n</code></pre> Enable OTP authentication:<pre><code>armbian-config --cmd ACC008\n</code></pre> Generate new OTP authentication QR code:<pre><code>armbian-config --cmd ACC009\n</code></pre> Show OTP authentication QR code:<pre><code>armbian-config --cmd ACC010\n</code></pre> Disable last login banner:<pre><code>armbian-config --cmd ACC011\n</code></pre> Enable last login banner:<pre><code>armbian-config --cmd ACC012\n</code></pre>"},{"location":"User-Guide_Armbian-Config/System/#containerised","title":"Containerised","text":"<p>Sandboxed &amp; containerised SSH server</p> <p></p> <p>Sandboxed &amp; containerised SSH server allows ssh access without giving keys to the entire server. Giving ssh access via private key often means giving full access to the server. This container creates a limited and sandboxed environment that others can ssh into. The users only have access to the folders mapped and the processes running inside this container.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd SSH001</code></pre> Access to SSH serverDirectoriesView logs <ul> <li><code>ssh username@&lt;your.IP&gt; -p 2222</code></li> </ul> <ul> <li>Install directory: <code>/armbian/openssh-server</code></li> <li>Configuration directory: <code>/armbian/openssh-server/config</code></li> <li>Shared storage directory: <code>USER_DEFINED</code></li> </ul> Bash<pre><code>docker logs -f openssh-server\n</code></pre> Remove sandboxed SSH server:<pre><code>armbian-config --cmd SSH002\n</code></pre> Purge sandboxed SSH server with data folder:<pre><code>armbian-config --cmd SSH003\n</code></pre>"},{"location":"User-Guide_Armbian-Config/System/#shell-and-motd","title":"Shell and MOTD","text":"<p>Change shell, adjust MOTD</p> <p>Edit: footer header </p>"},{"location":"User-Guide_Armbian-Config/System/#change-shell","title":"Change shell","text":"<p>Change shell system wide to ZSH</p> <p></p> <p>ZSH is a powerful and customizable shell designed to be an enhanced replacement for BASH. When combined with Oh My Zsh, which is integrated in <code>armbian-zsh</code>, it offers an extensive plugin system, beautiful themes, and productivity features like autosuggestions, syntax highlighting, and easier navigation.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 aarch64 armhf riscv64 Maintainer: @armbian Documentation: Link </p> <pre><code>armbian-config --cmd SHELL1</code></pre> Change shell system wide to BASH:<pre><code>armbian-config --cmd SHELL2\n</code></pre>"},{"location":"User-Guide_Armbian-Config/System/#adjust-motd","title":"Adjust MOTD","text":"<p>Adjust welcome screen (motd)</p> <p>Edit: footer header Status: Stable Architecture: x86-64 aarch64 armhf riscv64 Maintainer: @armbian Documentation: Link </p> <pre><code>armbian-config --cmd MOTD01</code></pre>"},{"location":"User-Guide_Armbian-Config/System/#os-updates","title":"OS Updates","text":"<p>OS updates and distribution upgrades</p> <p>Edit: footer header Status: Active  </p>"},{"location":"User-Guide_Armbian-Config/System/#firmware","title":"Firmware","text":"<p>Enable Armbian firmware upgrades</p> <p></p> <p>Enable Armbian firmware upgrades manages whether the Armbian firmware (kernel + u-boot + firmware) packages are held or unheld in the package manager. By removing or setting the hold, it controls if firmware updates are applied automatically through regular <code>apt update</code> and <code>apt upgrade</code> processes. This allows users to either freeze the firmware version for stability or enable updates for improved hardware support.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 aarch64 armhf riscv64 Maintainer: @armbian Documentation: Link </p> <pre><code>armbian-config --cmd UPD001</code></pre> Disable Armbian firmware upgrades:<pre><code>armbian-config --cmd UPD002\n</code></pre>"},{"location":"User-Guide_Armbian-Config/System/#rolling","title":"Rolling","text":"<p>Switch system to rolling packages repository</p> <p>The daily rolling repository offers frequently updated packages directly from development branches. It provides access to the latest features, bug fixes, and hardware support improvements but may introduce instability or regressions. This channel is intended for testing, development, and users who need the newest updates at the cost of reduced stability.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 aarch64 armhf riscv64 Maintainer: @armbian Documentation: Link </p> <pre><code>armbian-config --cmd ROLLIN</code></pre>"},{"location":"User-Guide_Armbian-Config/System/#stable","title":"Stable","text":"<p>Switch system to stable packages repository</p> <p>The stable repository provides thoroughly tested packages intended for production use. Updates from this channel prioritize stability, long-term reliability, and minimal risk, ensuring systems remain secure and operational without unexpected changes. Only critical bug fixes and essential improvements are introduced after extensive testing.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 aarch64 armhf riscv64 Maintainer: @armbian Documentation: Link </p> <pre><code>armbian-config --cmd STABLE</code></pre>"},{"location":"User-Guide_Armbian-Config/System/#docker-images","title":"Docker images","text":"<p>Enable automating Docker container base images updating</p> <p></p> <p>Watchtower is a lightweight tool that automatically monitors and updates running Docker containers whenever a new image version becomes available. It checks remote registries for updated images, pulls them, stops the old containers, and restarts them using the updated versions \u2014 all without manual intervention. Watchtower is fully configurable, allowing you to control update frequency, select specific containers, and manage notification settings.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd WTC001</code></pre> Disable automating Docker container base images updating:<pre><code>armbian-config --cmd WTC002\n</code></pre>"},{"location":"User-Guide_Armbian-Config/System/#packages","title":"Packages","text":"<p>Enable automatic package updates.</p> <p></p> <p>Unattended upgrades automatically install security updates and important package updates on your system without requiring manual intervention. It helps keep your system secure, stable, and up-to-date by silently applying patches. The behavior is fully configurable \u2014 you can control which packages are upgraded, set reboot options, and customize notifications or logging.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 aarch64 armhf riscv64 Maintainer: @armbian Documentation: Link </p> <pre><code>armbian-config --cmd UNAT01</code></pre> Configure automatic package updates:<pre><code>armbian-config --cmd UNAT02\n</code></pre> Disable automatic package updates:<pre><code>armbian-config --cmd UNAT03\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Armbian/","title":"Armbian infrastructure services","text":""},{"location":"User-Guide_Armbian-Software/Armbian/#cdn-router","title":"CDN router","text":"<p>Router for repository mirror automation</p> <p></p> <p>The Armbian Router is an intelligent redirector system that optimizes file downloads by automatically directing users to the best available mirror. It evaluates each download request based on geographic location, server health, and file availability, ensuring faster downloads, balanced load distribution, and high availability. This core service underpins Armbian\u2019s scalable mirror network, seamlessly routing traffic to improve performance and reliability for end users worldwide.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 aarch64 armhf riscv64 Maintainer: @armbian Documentation: Link </p> <pre><code>armbian-config --cmd ART001</code></pre> Remove CDN router:<pre><code>armbian-config --cmd ART002\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Armbian/#gh-runners","title":"GH runners","text":"<p>GitHub runners for Armbian automation</p> <p></p> <p>This module automates the installation, removal, and status checking of GitHub self-hosted runners for the Armbian project. It supports batch operations and user input through dialog prompts when running interactively.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 aarch64 armhf riscv64 Maintainer: @armbian Documentation: Link </p> <pre><code>armbian-config --cmd GHR001</code></pre> Supported Commands <ul> <li><code>install</code>   Installs one or more GitHub runners using the provided configuration or interactively prompted values.</li> </ul> <ul> <li><code>purge</code> / <code>remove</code>   Removes runners based on the provided runner name series and target organization or repository.</li> </ul> <ul> <li><code>status</code>   Quietly checks if any <code>actions.runner</code> services are currently running on the system.</li> </ul> Available Switches Switch Description <code>gh_token</code> GitHub token with admin rights to manage self-hosted runners. <code>runner_name</code> Name prefix for the runner series (default: <code>armbian</code>). <code>start</code> Start index of the runner series (e.g., <code>01</code>). <code>stop</code> End index of the runner series (e.g., <code>05</code>). <code>label_primary</code> Labels for the first runner (default: <code>alfa</code>). <code>label_secondary</code> Labels for additional runners (default: <code>fast,images</code>). <code>organisation</code> GitHub organization name (default: <code>armbian</code>). <code>owner</code> GitHub user or organization owner (used for repo-level runners). <code>repository</code> GitHub repository name (used for repo-level runners). Behavior <ul> <li>Prompts the user for missing switches via <code>dialog</code> only in interactive mode.</li> <li>Supports bulk installation of runners using sequential numbering (<code>start</code> to <code>stop</code>).</li> <li>Calls internal <code>actions.runner.install</code> and <code>actions.runner.remove</code> helpers.</li> <li>Returns <code>0</code> if any runner services are active, <code>1</code> otherwise (for scripting use).</li> <li>Suppresses errors and outputs when checking status to remain quiet in background use.</li> </ul> Remove GitHub runners for Armbian automation:<pre><code>armbian-config --cmd GHR002\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Armbian/#rsyncd-server","title":"Rsyncd server","text":"<p>Edit: footer header Status: Stable Architecture: x86-64 aarch64 armhf riscv64 Maintainer: @armbian Documentation: Link </p> <pre><code>armbian-config --cmd RSD001</code></pre> Remove Armbian rsyncd server:<pre><code>armbian-config --cmd RSD002\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Backup/","title":"Backup solutions for your data","text":""},{"location":"User-Guide_Armbian-Software/Backup/#duplicati","title":"Duplicati","text":"<p>Duplicati install</p> <p></p> <p>Duplicati is a versatile and secure backup tool designed for everyone, including:</p> <ul> <li>Users new to backup systems who need a simple and reliable solution.</li> <li>Experienced users who want full control over encrypted backups and storage destinations.</li> <li>System administrators who require automated, encrypted backups across multiple platforms.</li> </ul> <p>Duplicati offers powerful features such as strong AES-256 encryption, backup scheduling, and flexible storage support (local folders, NAS, cloud providers like Google Drive, Dropbox, S3, and more). Through its web-based interface, users can easily configure, monitor, and restore backups from any browser.</p> <p>Thanks to Duplicati\u2019s smart design \u2014 working through standard protocols and containerized deployment \u2014 it fits seamlessly into any environment, from personal setups to enterprise infrastructures.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd DPL001</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 8200:</p> <ul> <li>URL: <code>http://&lt;your.IP&gt;:8200</code></li> </ul> <ul> <li>Install directory: <code>/armbian/duplicati</code></li> <li>Configuration directory: <code>/armbian/duplicati/config</code></li> <li>Backup target directory: <code>/armbian/duplicati/backups</code></li> </ul> Bash<pre><code>docker logs -f duplicati\n</code></pre> Duplicati remove:<pre><code>armbian-config --cmd DPL002\n</code></pre> Duplicati purge with data folder:<pre><code>armbian-config --cmd DPL003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Containers/","title":"Docker containerization and KVM virtual machines","text":""},{"location":"User-Guide_Armbian-Software/Containers/#docker","title":"Docker","text":"<p>Docker minimal</p> <p></p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 armhf Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd CON001</code></pre> <p>What is Docker? Docker helps developers build, share, run, and verify applications anywhere - without tedious environment configuration or management.</p> Docker engine:<pre><code>armbian-config --cmd CON002\n</code></pre> Docker remove:<pre><code>armbian-config --cmd CON003\n</code></pre> Docker purge with all images, containers, and volumes:<pre><code>armbian-config --cmd CON004\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Containers/#portainer","title":"Portainer","text":"<p>Portainer container management platform</p> <p></p> <p>Portainer simplifies your Docker container management via Portainer web interface. It enables faster deploy of the applications and it gives real time visibility.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 armhf Maintainer: @schwar3kat Documentation: Link </p> <pre><code>armbian-config --cmd POR001</code></pre> Access to the web interface <p>The web interface is accessible via port 9002:</p> <ul> <li>URL = <code>http://&lt;your.IP&gt;:9002</code></li> </ul> Portainer remove:<pre><code>armbian-config --cmd POR002\n</code></pre> Portainer purge with with data folder:<pre><code>armbian-config --cmd POR003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/DNS/","title":"Network-wide ad blockers servers","text":""},{"location":"User-Guide_Armbian-Software/DNS/#adguardhome","title":"AdGuardHome","text":"<p>AdGuardHome DNS sinkhole</p> <p></p> <p>AdGuard Home is a network-wide software that functions as a DNS server and ad blocker. It blocks ads, trackers, and malicious websites at the DNS level, meaning it filters content for all devices connected to the network. It also provides additional features like parental controls, logging, and privacy protections. Essentially, it acts as a gateway between your devices and the internet, blocking unwanted content before it even reaches your devices.</p> <p>Edit: footer header Status: Stable Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd ADG001</code></pre> Access to the web interfaceDirectoriesUsageBlack and white listsView logs <p>The web interface is accessible via port 3000:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:3000</code></li> <li>Username/Password: admin / generate at first web interface login</li> </ul> <ul> <li>Install directory: <code>/armbian/adguardhome/</code></li> <li>Configuration directory: <code>/armbian/adguardhome/confdir</code></li> <li>Work directory: <code>/armbian/adguardhome/workdir</code></li> </ul> <ul> <li>server where you are installing is automatically switched to this DNS</li> <li>on your desktop PC set IP address of this server as DNS</li> <li>network wide: set IP address of this server on routers DNS</li> </ul> <p>There are many sites in the web giving blocklists and whitelists for AdGuard Home. They can be used when you want to have more blocking as the standard installation gives you. Here are some examples:</p> <ul> <li>The Big Blocklist Collection by WaLLy3K</li> <li>Phishing Army blocklist</li> <li>Whitelist collection by anudeepND</li> </ul> Bash<pre><code>docker logs -f adguardhome\n</code></pre> AdGuardHome remove:<pre><code>armbian-config --cmd ADG002\n</code></pre> AdGuardHome purge with data folder:<pre><code>armbian-config --cmd ADG003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/DNS/#pi-hole","title":"Pi-hole","text":"<p>Pi-hole DNS ad blocker</p> <p></p> <p>Pi-hole is a network-wide ad blocker that acts as a DNS (Domain Name System) sinkhole. It works by blocking requests to known ad servers, trackers, and malicious websites across all devices connected to your home network. Here\u2019s how it works:</p> <ul> <li>DNS-Based Filtering: Pi-hole intercepts DNS requests from devices on your network. When a device tries to connect to a website, Pi-hole checks if the website\u2019s domain is on a blocklist. If it is, Pi-hole prevents the connection from being made, effectively blocking ads, trackers, and potentially harmful sites.</li> </ul> <ul> <li>Customizable Blocklists: Pi-hole allows you to choose from a variety of community-maintained blocklists or even add your own. These blocklists contain domains known to serve ads, trackers, and other unwanted content.</li> </ul> <ul> <li>Device and Network-Level Protection: Once set up, Pi-hole works across your entire network. This means all devices (smartphones, tablets, computers, smart TVs, etc.) that use your Pi-hole as their DNS server automatically benefit from ad-blocking without needing individual apps or browser extensions.</li> </ul> <ul> <li>Web Interface: Pi-hole offers an intuitive web interface where you can monitor statistics, review blocked domains, and tweak settings like adding custom blocklists or whitelisting certain sites.</li> </ul> <ul> <li>Privacy and Speed: By blocking unwanted content at the DNS level, Pi-hole not only improves browsing speed (since ads are not loaded), but also enhances privacy by preventing tracking scripts from running in the background.</li> </ul> <p>Pi-hole is typically installed on a Armbian minimal, but it can also run on other systems. It\u2019s a great way to have ad-blocking and privacy protection across your entire network without needing to install anything on individual devices.</p> <p>Edit: footer header Status: Stable Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd PIH001</code></pre> Access the web interfaceDocumentation <p>The web interface of Pi-hole can be accessed via:</p> <ul> <li>URL = <code>http://&lt;your.IP&gt;/admin</code></li> <li>Password is set and adjust from <code>armbian-config</code></li> </ul> <p>https://docs.pi-hole.net/</p> Pi-hole change web admin password:<pre><code>armbian-config --cmd PIH002\n</code></pre> Pi-hole remove:<pre><code>armbian-config --cmd PIH003\n</code></pre> Pi-hole purge with data folder:<pre><code>armbian-config --cmd PIH004\n</code></pre>"},{"location":"User-Guide_Armbian-Software/DNS/#unbound","title":"Unbound","text":"<p>Unbound caching DNS resolver</p> <p></p> <p>Unbound is a high-performance, open-source DNS resolver. It primarily serves to resolve domain names into IP addresses for devices on a network. Unlike regular DNS servers, Unbound performs DNS lookups directly and securely, providing features like DNSSEC validation (ensuring data integrity) and privacy protections. It\u2019s often used to improve speed, security, and privacy by resolving queries locally rather than relying on external DNS services.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd UNB001</code></pre> Default DNS portDirectoriesView logs <ul> <li>Default DNS port: 53</li> </ul> <ul> <li>Install directory: <code>/armbian/unbound/</code></li> <li>Configuration directory: <code>/armbian/unbound/</code></li> </ul> Bash<pre><code>docker logs -f unbound\n</code></pre> Unbound remove:<pre><code>armbian-config --cmd UNB002\n</code></pre> Unbound purge with data folder:<pre><code>armbian-config --cmd UNB003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Database/","title":"SQL database servers and web interface managers","text":""},{"location":"User-Guide_Armbian-Software/Database/#mariadb","title":"Mariadb","text":"<p>Mariadb SQL database server</p> <p></p> <p>Mariadb is one of the most popular database servers. Made by the original developers of MySQL.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd DAT001</code></pre> ConfigurationDirectoriesView logs <p>Database access configuration is done at first install: - create root password - create database - create normal user - create password for normal user</p> <ul> <li>Database host: <code>&lt;your.IP&gt;</code></li> </ul> <ul> <li>Install directory: <code>/armbian/mariadb</code></li> <li>Site configuration directory: <code>/armbian/mariadb/config</code></li> </ul> Bash<pre><code>docker logs -f mariadb\n</code></pre> Mariadb remove:<pre><code>armbian-config --cmd DAT002\n</code></pre> Mariadb purge with data folder:<pre><code>armbian-config --cmd DAT003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Database/#phpmyadmin","title":"phpMyAdmin","text":"<p>phpMyAdmin web interface manager</p> <p></p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd MYA001</code></pre> phpMyAdmin remove:<pre><code>armbian-config --cmd MYA002\n</code></pre> phpMyAdmin purge with data folder:<pre><code>armbian-config --cmd MYA003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Database/#postgresql","title":"PostgreSQL","text":"<p>PostgreSQL install</p> <p></p> <p>PostgreSQL is a powerful, open-source object-relational database system known for its robustness, feature richness, and reliability.</p> <p>It is designed for everyone, including:</p> <ul> <li>Developers needing advanced SQL support and extensibility.</li> <li>System administrators requiring reliable data storage for mission-critical applications.</li> <li>Enterprises seeking a high-performance, standards-compliant relational database.</li> </ul> <p>PostgreSQL offers strong ACID compliance, concurrency, rich data types, full-text search, JSON support, and extensibility through stored procedures and custom functions. It is trusted globally in financial, government, and web-scale applications.</p> <p>Thanks to its proven architecture and open-source nature, PostgreSQL fits seamlessly in projects of all sizes.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd PGSQL1</code></pre> Access to the databaseDirectoriesView logs <p>PostgreSQL is accessible via port 5432:</p> <ul> <li>Host: <code>postgresql://&lt;your.IP&gt;:5432</code></li> <li>Default user: <code>armbian</code></li> <li>Default password: <code>armbian</code></li> <li>Default database: <code>armbian</code></li> </ul> <ul> <li>Data directory: <code>/armbian/postgres/data</code></li> </ul> Bash<pre><code>docker logs -f postgres\n</code></pre> PostgreSQL remove:<pre><code>armbian-config --cmd PGSQL2\n</code></pre> PostgreSQL purge with data folder:<pre><code>armbian-config --cmd PGSQL3\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Database/#redis","title":"Redis","text":"<p>Redis install</p> <p></p> <p>Redis is an open-source, in-memory data structure store, used as a database, cache, and message broker. It supports a variety of data structures such as strings, hashes, lists, sets, and sorted sets.</p> <p>Key Features: - Extremely fast performance with in-memory storage - Persistence options (snapshotting and AOF) - Pub/Sub messaging capabilities - Built-in replication and high availability - Simple API and wide client support</p> <p>Redis is widely used for real-time applications, caching layers, session stores, and lightweight queues across industries and platforms.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd REDIS1</code></pre> Access to the serviceDirectoriesView logs <p>Redis server is accessible on port 6379:</p> <ul> <li>Host: <code>redis://&lt;your.IP&gt;:6379</code></li> </ul> <ul> <li>Data directory: <code>/armbian/redis/data</code></li> </ul> Bash<pre><code>docker logs -f redis\n</code></pre> Redis remove:<pre><code>armbian-config --cmd REDIS2\n</code></pre> Redis purge with data folder:<pre><code>armbian-config --cmd REDIS3\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Desktops/","title":"Desktop Environments","text":""},{"location":"User-Guide_Armbian-Software/Desktops/#xfce-desktop","title":"XFCE desktop","text":""},{"location":"User-Guide_Armbian-Software/Desktops/#xfce-desktop-install","title":"XFCE desktop Install","text":"<p>XFCE is a lightweight, fast, and user-friendly desktop environment for Linux, offering a classic interface, essential apps, and customization. It prioritizes performance, simplicity, and efficiency.</p> <p>Install XFCE:</p> <p>Xfce is a lightweight desktop environment for UNIX-like operating systems. It aims to be fast and low on system resources, while still being visually appealing and user friendly.</p> <p>Command: Text Only<pre><code>armbian-config --cmd XFCE01\n</code></pre></p> <p>Author: @igorpecovnik</p> <p>Status: Stable</p>"},{"location":"User-Guide_Armbian-Software/Desktops/#uninstall","title":"Uninstall","text":"<p>Command: Text Only<pre><code>armbian-config --cmd XFCE02\n</code></pre></p> <p>Author: @igorpecovnik</p> <p>Status: Stable</p>"},{"location":"User-Guide_Armbian-Software/Desktops/#enable-autologin","title":"Enable autologin","text":"<p>Command: Text Only<pre><code>armbian-config --cmd XFCE03\n</code></pre></p> <p>Author: @igorpecovnik</p> <p>Status: Stable</p>"},{"location":"User-Guide_Armbian-Software/Desktops/#disable-autologin","title":"Disable autologin","text":"<p>Command: Text Only<pre><code>armbian-config --cmd XFCE04\n</code></pre></p> <p>Author: @igorpecovnik</p> <p>Status: Stable</p>"},{"location":"User-Guide_Armbian-Software/Desktops/#gnome-desktop","title":"Gnome desktop","text":""},{"location":"User-Guide_Armbian-Software/Desktops/#gnome-desktop-install","title":"Gnome desktop Install","text":"<p>GNOME is a modern, user-friendly desktop environment for Linux, offering a clean interface, essential apps, and customization through extensions. It prioritizes simplicity, accessibility, and efficiency.</p> <p>Command: Text Only<pre><code>armbian-config --cmd GNOME01\n</code></pre></p> <p>Author: @igorpecovnik</p> <p>Status: Stable</p>"},{"location":"User-Guide_Armbian-Software/Desktops/#uninstall_1","title":"Uninstall","text":"<p>Command: Text Only<pre><code>armbian-config --cmd GNOME02\n</code></pre></p> <p>Author: @igorpecovnik</p> <p>Status: Stable</p>"},{"location":"User-Guide_Armbian-Software/Desktops/#enable-autologin_1","title":"Enable autologin","text":"<p>Command: Text Only<pre><code>armbian-config --cmd GNOME03\n</code></pre></p> <p>Author: @igorpecovnik</p> <p>Status: Stable</p>"},{"location":"User-Guide_Armbian-Software/Desktops/#disable-autologin_1","title":"Disable autologin","text":"<p>Command: Text Only<pre><code>armbian-config --cmd GNOME04\n</code></pre></p> <p>Author: @igorpecovnik</p> <p>Status: Stable</p>"},{"location":"User-Guide_Armbian-Software/Desktops/#improve-application-search-speed","title":"Improve application search speed","text":"<p>Command: Text Only<pre><code>armbian-config --cmd Xapian\n</code></pre></p> <p>Author: @igorpecovnik</p> <p>Status: Stable</p>"},{"location":"User-Guide_Armbian-Software/DevTools/","title":"Applications and tools for development","text":""},{"location":"User-Guide_Armbian-Software/DevTools/#git-cli","title":"Git CLI","text":"<p>Install tools for cloning and managing repositories (git)</p> <p>Edit: footer header Status: Stable Architecture: x86-64 aarch64 armhf riscv64 Maintainer: @armbian Documentation: Link </p> <pre><code>armbian-config --cmd GIT001</code></pre> Remove tools for cloning and managing repositories (git):<pre><code>armbian-config --cmd GIT002\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Downloaders/","title":"Download apps for movies, TV shows, music and subtitles","text":""},{"location":"User-Guide_Armbian-Software/Downloaders/#bazarr","title":"Bazarr","text":"<p>Bazarr automatic subtitles downloader for Sonarr and Radarr</p> <p></p> <p>Bazarr is a companion application to Sonarr and Radarr. It can manage and download subtitles based on your requirements. You define your preferences by TV show or movie and Bazarr takes care of everything for you.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd BAZ001</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 6767:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:6767</code></li> <li>Username/Password: admin / generate at first web interface login</li> </ul> <ul> <li>Install directory: <code>/armbian/bazarr</code></li> <li>Site configuration directory: <code>/armbian/bazarr/config</code></li> <li>Download directory: <code>/armbian/bazarr/movies</code> <code>/armbian/bazarr/tv</code></li> </ul> Bash<pre><code>docker logs -f bazarr\n</code></pre> Bazarr remove:<pre><code>armbian-config --cmd BAZ002\n</code></pre> Bazarr purge with data folder:<pre><code>armbian-config --cmd BAZ003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Downloaders/#deluge","title":"Deluge","text":"<p>Deluge BitTorrent client</p> <p></p> <p>Deluge\u2060 is a lightweight, Free Software, cross-platform BitTorrent client.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd DEL001</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 8112:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:8112</code></li> <li>Username/Password: default user/password of admin/deluge</li> </ul> <ul> <li>Install directory: <code>/armbian/deluge</code></li> <li>Site configuration directory: <code>/armbian/deluge/config</code></li> <li>Download directory: <code>/armbian/deluge/downloads</code></li> </ul> Bash<pre><code>docker logs -f deluge\n</code></pre> Deluge remove:<pre><code>armbian-config --cmd DEL002\n</code></pre> Deluge purge with data folder:<pre><code>armbian-config --cmd DEL003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Downloaders/#qbittorrent","title":"qBittorrent","text":"<p>qBittorrent BitTorrent client </p> <p></p> <p>The Qbittorrent\u2060 project aims to provide an open-source software alternative to \u00b5Torrent. qBittorrent is based on the Qt toolkit and libtorrent-rasterbar library.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd DOW001</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 8090:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:8090</code></li> <li>Username/Password: admin / generate at first web interface login</li> </ul> <ul> <li>Install directory: <code>/armbian/qbittorrent</code></li> <li>Site configuration directory: <code>/armbian/qbittorrent/config</code></li> <li>Download directory: <code>/armbian/qbittorrent/downloads</code></li> </ul> Bash<pre><code>docker logs -f qbittorrent\n</code></pre> qBittorrent remove:<pre><code>armbian-config --cmd DOW002\n</code></pre> qBittorrent purge with data folder:<pre><code>armbian-config --cmd DOW003\n</code></pre> Prowlarr:<pre><code>armbian-config --cmd DOW025\n</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 9696:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:9696</code></li> <li>Username/Password: admin / generate at first web interface login</li> </ul> <ul> <li>Install directory: <code>/armbian/prowlarr</code></li> <li>Site configuration directory: <code>/armbian/prowlarr/config</code></li> </ul> Bash<pre><code>docker logs -f prowlarr\n</code></pre> Prowlarr remove:<pre><code>armbian-config --cmd DOW026\n</code></pre> Prowlarr purge with data folder:<pre><code>armbian-config --cmd DOW027\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Downloaders/#jellyseerr","title":"Jellyseerr","text":"<p>Jellyseerr Jellyfin/Emby/Plex integration install</p> <p></p> <p>Jellyseerr is a free and open source software application for managing requests for your media library. It is a fork of Overseerr built to bring support for Jellyfin &amp; Emby media servers!</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd JEL001</code></pre> Jellyseerr remove:<pre><code>armbian-config --cmd JEL002\n</code></pre> Jellyseerr purge with data folder:<pre><code>armbian-config --cmd JEL003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Downloaders/#lidarr","title":"Lidarr","text":"<p>Lidarr automatic music downloader</p> <p></p> <p>Lidarr is a music collection manager for Usenet and BitTorrent users. It can monitor multiple RSS feeds for new tracks from your favorite artists and will grab, sort and rename them. It can also be configured to automatically upgrade the quality of files already downloaded when a better quality format becomes available.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd LID001</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 8686:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:8686</code></li> <li>Username/Password: admin / generate at first web interface login</li> </ul> <ul> <li>Install directory: <code>/armbian/lidarr</code></li> <li>Site configuration directory: <code>/armbian/lidarr/config</code></li> <li>Download directory: <code>/armbian/lidarr/downloads</code> <code>/armbian/lidarr/music</code></li> </ul> Bash<pre><code>docker logs -f lidarr\n</code></pre> Lidarr remove:<pre><code>armbian-config --cmd LID002\n</code></pre> Lidarr purge with data folder:<pre><code>armbian-config --cmd LID003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Downloaders/#medusa","title":"Medusa","text":"<p>Medusa automatic downloader for TV shows</p> <p>Medusa is an automatic Video Library Manager for TV Shows. It watches for new episodes of your favorite shows, and when they are posted it does its magic.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd MDS001</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 8081:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:8081</code></li> </ul> <ul> <li>Install directory: <code>/armbian/medusa</code></li> <li>Site configuration directory: <code>/armbian/medusa/config</code></li> <li>Download directory: <code>/armbian/medusa/downloads</code></li> <li>Download directory TV shows: <code>/armbian/medusa/downloads/tv</code></li> </ul> Bash<pre><code>docker logs -f medusa\n</code></pre> Medusa TV shows downloader remove:<pre><code>armbian-config --cmd MDS002\n</code></pre> Medusa TV shows downloader purge:<pre><code>armbian-config --cmd MDS003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Downloaders/#radarr","title":"Radarr","text":"<p>Radarr automatic downloader for movies</p> <p></p> <p>Radarr - A fork of Sonarr to work with movies \u00e0 la Couchpotato.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd RAD001</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 7878:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:7878</code></li> <li>Username/Password: admin / generate at first web interface login</li> </ul> <ul> <li>Install directory: <code>/armbian/radarr</code></li> <li>Site configuration directory: <code>/armbian/radarr/config</code></li> <li>Download directory: <code>/armbian/radarr/movies</code></li> <li>Client download directory: <code>/armbian/radarr/client</code></li> </ul> Bash<pre><code>docker logs -f radarr\n</code></pre> Radarr remove:<pre><code>armbian-config --cmd RAD002\n</code></pre> Radarr purge with data folder:<pre><code>armbian-config --cmd RAD003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Downloaders/#readarr","title":"Readarr","text":"<p>Readarr automatic downloader for Ebooks</p> <p></p> <p>Readarr - Book Manager and Automation (Sonarr for Ebooks)</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd RDR001</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 8787:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:8787</code></li> <li>Username/Password: admin / generate at first web interface login</li> </ul> <ul> <li>Install directory: <code>/armbian/readarr</code></li> <li>Site configuration directory: <code>/armbian/readarr/config</code></li> <li>Download directory: <code>/armbian/readarr/books</code> <code>/armbian/readarr/client</code></li> </ul> Bash<pre><code>docker logs -f readarr\n</code></pre> Readarr remove:<pre><code>armbian-config --cmd RDR002\n</code></pre> Readarr purge with data folder:<pre><code>armbian-config --cmd RDR003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Downloaders/#sabnzbd","title":"SABnzbd","text":"<p>SABnzbd newsgroup downloader</p> <p></p> <p>Sabnzbd\u2060 makes Usenet as simple and streamlined as possible by automating everything we can. All you have to do is add an .nzb. SABnzbd takes over from there, where it will be automatically downloaded, verified, repaired, extracted and filed away with zero human interaction.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd SABN01</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 8080:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:8080</code></li> <li>Username/Password: admin / generate at first web interface login</li> </ul> <ul> <li>Install directory: <code>/armbian/sabnzbd</code></li> <li>Site configuration directory: <code>/armbian/sabnzbd/config</code></li> <li>Download directory: <code>/armbian/sabnzbd/downloads</code></li> <li>Incomplete downloads: <code>/armbian/sabnzbd/incomplete</code></li> </ul> Bash<pre><code>docker logs -f sabnzbd\n</code></pre> SABnzbd remove:<pre><code>armbian-config --cmd SABN02\n</code></pre> SABnzbd purge with data folder:<pre><code>armbian-config --cmd SABN03\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Downloaders/#sonarr","title":"Sonarr","text":"<p>Sonarr automatic downloader for TV shows</p> <p></p> <p>Sonarr (formerly NZBdrone) is a PVR for usenet and bittorrent users. It can monitor multiple RSS feeds for new episodes of your favorite shows and will grab, sort and rename them. It can also be configured to automatically upgrade the quality of files already downloaded when a better quality format becomes available.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd SON001</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 8989:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:8989</code></li> </ul> <ul> <li>Install directory: <code>/armbian/sonarr</code></li> <li>Site configuration directory: <code>/armbian/sonarr/config</code></li> <li>Download directory: <code>/armbian/sonarr/tvseries</code></li> <li>Client download directory: <code>/armbian/sonarr/client</code></li> </ul> Bash<pre><code>docker logs -f sonarr\n</code></pre> Sonarr remove:<pre><code>armbian-config --cmd SON002\n</code></pre> Sonarr purge with data folder:<pre><code>armbian-config --cmd SON003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Downloaders/#transmission","title":"Transmission","text":"<p>Transmission BitTorrent client</p> <p></p> <p>Transmission\u2060 is designed for easy, powerful use. Transmission has the features you want from a BitTorrent client: encryption, a web interface, peer exchange, magnet links, DHT, \u00b5TP, UPnP and NAT-PMP port forwarding, webseed support, watch directories, tracker editing, global and per-torrent speed limits, and more.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd TRA001</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 9091:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:9091</code></li> <li>Username/Password: admin / generate at first web interface login</li> </ul> <ul> <li>Install directory: <code>/armbian/transmission</code></li> <li>Site configuration directory: <code>/armbian/transmission/config</code></li> <li>Download directory: <code>/armbian/transmission/downloads</code></li> <li>Watch directory: <code>/armbian/transmission/watch</code></li> </ul> Bash<pre><code>docker logs -f transmission\n</code></pre> Transmission remove:<pre><code>armbian-config --cmd TRA002\n</code></pre> Transmission purge with data folder:<pre><code>armbian-config --cmd TRA003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Finance/","title":"Manage your finances","text":""},{"location":"User-Guide_Armbian-Software/Finance/#actual-budget","title":"Actual Budget","text":"<p>Do your finances with Actual Budget</p> <p></p> <p>Actual Budget is a free, open-source personal finance app built around the envelope budgeting method.</p> <ul> <li>Privacy-focused: Users can self-host their data or use encrypted cloud syncing.</li> <li>Key Features:<ul> <li>Multi-account tracking</li> <li>Transaction importing</li> <li>Customizable financial reports</li> <li>Optional syncing via services like PikaPods</li> </ul> </li> <li>Ideal for: Those who want a transparent, self-hosted alternative to proprietary budgeting tools.</li> </ul> <p>Edit: footer header Status: Stable Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd ABU001</code></pre> <p>Warning: HTTPS Certificate Required</p> <p>After initially installing the Actual server, you might get stuck at the step: \u201cInitializing the connection to the local database\u2026\u201d</p> <p>The issue is due to the server not having an HTTPS certificate. After activating an HTTPS certificate for the Actual server, everything should work fine.</p> <p>If you still encounter issues even after setting up HTTPS, we highly recommend reaching out to the Actual Budget Discord server \u2014 the developers and community there are very kind and helpful.</p> Actual Budget remove:<pre><code>armbian-config --cmd ABU002\n</code></pre> Actual Budget purge with data folder:<pre><code>armbian-config --cmd ABU003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/HomeAutomation/","title":"Home Automation for control home appliances","text":""},{"location":"User-Guide_Armbian-Software/HomeAutomation/#domoticz","title":"Domoticz","text":"<p>Domoticz open source home automation</p> <p></p> <p>Domoticz is an open-source home automation platform that allows you to control and monitor smart devices in your home. It supports a wide range of devices, including lights, sensors, thermostats, and cameras. Through its web interface or mobile app, you can set up automation rules and schedules, providing greater convenience and energy efficiency. It\u2019s customizable, flexible, and can be run on a variety of hardware platforms supported by Armbian.</p> Access to the web interfaceDirectoriesAdvanced setup <p>The web interface is accessible via port 8080:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:8080</code></li> <li>Username/Password: admin / domoticz</li> </ul> <ul> <li>Config directory: <code>/armbian/domoticz</code></li> </ul> <ul> <li>Primary USB device passing through (<code>/dev/ttyUSB0</code>) to Docker container is enabled by default</li> <li>For more complex setup, please follow this comprehensive guide: https://wiki.domoticz.com/Main_Page</li> </ul> <p>Edit: footer header Status: Preview Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd DOM001</code></pre> Domoticz remove:<pre><code>armbian-config --cmd DOM002\n</code></pre> Domoticz purge with data folder:<pre><code>armbian-config --cmd DOM003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/HomeAutomation/#evcc","title":"EVCC","text":"<p>EVCC - solar charging automation</p> <p></p> <p>evcc is an energy management system with a focus on electromobility. The software controls your EV charger or smart plug. It communicates with your vehicle, inverter or home storage to make intelligent charging decisions. The software is open source and community-driven.</p> <p>Edit: footer header Status: Preview Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd EVCC01</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 7070:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:7070</code></li> <li>Admin password is generated at first web interface login</li> </ul> <ul> <li>Install directory: <code>/armbian/evcc</code></li> <li>Site configuration directory: <code>/armbian/evcc/evcc.yaml</code></li> </ul> Bash<pre><code>docker logs -f evcc\n</code></pre> EVCC - solar charging automation remove:<pre><code>armbian-config --cmd EVCC02\n</code></pre> EVCC purge with data folder:<pre><code>armbian-config --cmd EVCC03\n</code></pre>"},{"location":"User-Guide_Armbian-Software/HomeAutomation/#openhab","title":"openHAB","text":"<p>openHAB empowering the smart home</p> <p></p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 armhf Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd HAB001</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 8444:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:8444</code></li> <li>Username/Password: Are set at first web interface login</li> </ul> <ul> <li>Install directory: <code>/usr/share/openhab</code></li> <li>Site configuration directory: <code>/etc/openhab</code></li> <li>Config file: <code>/etc/default/openhab</code></li> <li>Data directory: <code>/var/lib/openhab</code></li> </ul> <p>See also openHAB file locations.</p> Bash<pre><code>journalctl -u openhab\n</code></pre> openHAB remove:<pre><code>armbian-config --cmd HAB002\n</code></pre> openHAB purge with data folder:<pre><code>armbian-config --cmd HAB003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/HomeAutomation/#home-assistant","title":"Home Assistant","text":"<p>Home Assistant open source home automation</p> <p></p> <p>Home Assistant is an open source smart home platform that allows you to connect your smart home devices like your TV, fan, cameras, thermostats, lights, and sensors. As a user, you can build intricate automation using Home Assistant\u2019s user-friendly, unified web-based user interface.</p> <p>Perfect to run on any single board computer with 4 cores and at least 512Mb of memory. Armbian installation is optimised to run from SD/eMMC media, but it is recommended to use SSD.</p> <p>Limited support</p> <p>The supervised installation method on Armbian is not officially supported by the Home Assistant project. Additionally, installation on hardware that is not officially supported is also outside the scope of support provided by the Armbian team.</p> <p>You are welcome to report high-level application issues that are reproducible on the official Home Assistant Operating System (HAOS) within the Home Assistant Community. For any topics related to single-board computer hardware, you may use the Armbian Community Forums; however, please be aware that official support from the Armbian team is not guaranteed.</p> <p>While the Home Assistant team is planning to deprecate the Supervised installation method, the Armbian team will continue to provide and maintain the supervised installation method as long as automated installation tests remain successful and the maintenance effort remains reasonable.</p> <p>Edit: footer header Status: Preview Architecture: x86-64 arm64 armhf Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd HAS001</code></pre> Access to the web interfaceDirectoriesArmbian advantages <p>The web interface is accessible via port 8123:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:8123</code></li> <li>Username/Password: Are set at first web interface login</li> </ul> <p>Home Assistant on Armbian runs supervised in a Docker container. This secures same functionality as stock HAOS.</p> <ul> <li>Config directory: <code>/armbian/haos</code></li> </ul> Functionality HAOS Armbian with HA Automations Dashboards Integrations Add-ons One-click updates Backups General purpose server Running on exotic hardware Home Assistant remove:<pre><code>armbian-config --cmd HAS002\n</code></pre> Home Assistant purge with data folder:<pre><code>armbian-config --cmd HAS003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Management/","title":"Remote File &amp; Management tools","text":""},{"location":"User-Guide_Armbian-Software/Management/#cockpit","title":"Cockpit","text":"<p>Cockpit web-based management tool</p> <p></p> <p>Introducing Cockpit Cockpit is a web-based graphical interface for servers, intended for everyone, especially those who are:</p> <ul> <li>new to Linux (including Windows admins)</li> <li>familiar with Linux and want an easy, graphical way to administer servers</li> <li>expert admins who mainly use other tools but want an overview on individual systems</li> </ul> <p>Thanks to Cockpit intentionally using system APIs and commands, a whole team of admins can manage a system in the way they prefer, including the command line and utilities right alongside Cockpit.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 aarch64 armhf riscv64 Maintainer: @armbian Documentation: Link </p> <pre><code>armbian-config --cmd CPT001</code></pre> Access to the web interfaceVideo instructions <p>The web interface is accessible via port 9090:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:9090</code></li> <li>Username/Password: your system login credentials</li> </ul> <p></p>"},{"location":"User-Guide_Armbian-Software/Management/#homepage","title":"Homepage","text":"<p>Install Homepage startpage / application dashboard</p> <p></p> <p>gethomepage is a fast, fully static, highly customizable application dashboard built for modern self-hosted environments. With a fully proxied architecture and zero runtime, it delivers exceptional speed, security, and simplicity for organizing and accessing your services.</p> <p>It supports over 100 service integrations and multiple languages, offering live status displays and dynamic resource monitoring out-of-the-box. Configuration is effortless via YAML files or automatic Docker label discovery, making setup and management seamless.</p> <p>Key Features</p> <ul> <li>Static Frontend: Blazing-fast performance with no server-side runtime.</li> <li>Secure Proxying: Safely access internal services without direct exposure.</li> <li>Service Integrations: Native support for Docker, Kubernetes, Grafana, Proxmox, Home Assistant, and more.</li> <li>Easy Configuration: Manage layout and services with YAML or Docker labels.</li> <li>Internationalization: Translations available for multiple languages.</li> <li>Flexible Theming: Personalize with themes, layouts, and styling.</li> <li>Simple Deployment: Host via Docker, Kubernetes, or any static hosting platform.</li> </ul> <p>Whether you\u2019re running a small homelab or a full server fleet, gethomepage offers a sleek, powerful, and secure way to stay organized.</p> <p>Edit: footer header Status: Stable Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd HPG001</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 3000:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:3000</code></li> <li>Username/Password: none</li> </ul> <p>Configuration: Please reffer to official manual https://gethomepage.dev/configs/</p> <ul> <li>Install directory: <code>/armbian/homepage</code></li> <li>Site configuration directory: <code>/armbian/homepage/config</code></li> </ul> Bash<pre><code>docker logs -f homepage\n</code></pre> Remove Homepage:<pre><code>armbian-config --cmd HPG002\n</code></pre> Purge Homepage with data folder:<pre><code>armbian-config --cmd HPG003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Management/#netbox","title":"NetBox","text":"<p>NetBox infrastructure resource modeling install</p> <p></p> <p>NetBox is an open-source infrastructure resource modeling (IRM) tool used for managing and documenting networks and data center assets.</p> <p>Requirements (installed automatically)</p> <ul> <li>Redis</li> <li>Postgres SQL</li> </ul> <p>Key Features</p> <ul> <li>IP Address Management (IPAM): Track IP networks, addresses, and VRFs.</li> <li>Data Center Infrastructure Management (DCIM): Model racks, devices, connections, and more.</li> <li>Secrets Management: Securely store credentials and other sensitive data.</li> <li>Extensible API &amp; Webhooks: Integrate with external systems.</li> <li>Custom Fields &amp; Scripts: Tailor NetBox to fit your organization\u2019s needs.</li> </ul> <p>Originally developed by DigitalOcean, NetBox is widely adopted by network engineers and sysadmins to maintain source-of-truth data for automation.</p> <p>Official Website</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd NBOX01</code></pre> Access to the serviceDefault credentialsDirectoriesView logsManage the service <p>NetBox is accessible via HTTP on port 8000:</p> <ul> <li>URL: <code>http://&lt;your.IP&gt;:8000</code></li> <li>API root: <code>http://&lt;your.IP&gt;:8000/api/</code></li> </ul> <ul> <li>Username: <code>admin</code></li> <li>Password: (set during setup)</li> <li>API token: Generate in the UI or via Django shell</li> </ul> <ul> <li>Configuration: <code>/armbian/netbox/config/</code></li> <li>Scripts: <code>/armbian/netbox/scripts/</code></li> <li>Reports: <code>/armbian/netbox/reports/</code></li> </ul> Bash<pre><code>docker logs -f netbox\n</code></pre> Bash<pre><code>docker exec -it netbox bash\n</code></pre> NetBox remove:<pre><code>armbian-config --cmd NBOX02\n</code></pre> NetBox purge with data folder:<pre><code>armbian-config --cmd NBOX03\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Management/#samba","title":"Samba","text":"<p>SAMBA Remote File share</p> <p></p> <p>Samba is an open-source software suite that enables seamless file and printer sharing between Linux/Unix servers and Windows clients. It allows a Linux machine to act as a domain controller, file server, or print server within a Windows network environment, supporting cross-platform interoperability.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 aarch64 armhf riscv64 Maintainer: @armbian Documentation: Link </p> <pre><code>armbian-config --cmd SMB001</code></pre>"},{"location":"User-Guide_Armbian-Software/Management/#webmin","title":"Webmin","text":"<p>Webmin web-based management tool</p> <p></p> <p>Webmin is a web-based system administration tool for Unix-like servers. It provides an easy-to-use browser interface to manage users, configure services, edit files, monitor system performance, and control almost every aspect of your server \u2014 without needing to touch the command line.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 aarch64 armhf riscv64 Maintainer: @armbian Documentation: Link </p> <pre><code>armbian-config --cmd WBM001</code></pre> Access to the web interface <p>The web interface is accessible via port 10000:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:10000</code></li> <li>Username/Password: your system login credentials</li> </ul>"},{"location":"User-Guide_Armbian-Software/Media/","title":"Media servers, organizers and editors","text":""},{"location":"User-Guide_Armbian-Software/Media/#emby","title":"Emby","text":"<p>Emby organizes video, music, live TV, and photos</p> <p></p> <p>Emby organizes video, music, live TV, and photos from personal media libraries and streams them to smart TVs, streaming boxes and mobile devices. This container is packaged as a standalone emby Media Server.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @schwar3kat Documentation: Link </p> <pre><code>armbian-config --cmd EMB001</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 8096:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:8096</code></li> </ul> <ul> <li>Install directory: <code>/armbian/emby</code></li> <li>Site configuration directory: <code>/armbian/emby/config</code></li> <li>Data directory: <code>/armbian/emby/tvshows</code> <code>/armbian/emby/movies</code></li> </ul> Bash<pre><code>docker logs -f emby\n</code></pre> Emby server remove:<pre><code>armbian-config --cmd EMB002\n</code></pre> Emby server purge with data folder:<pre><code>armbian-config --cmd EMB003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Media/#filebrowser","title":"Filebrowser","text":"<p>Filebrowser provides a web-based file manager accessible via a browser</p> <p></p> <p>Filebrowser is a lightweight, web-based file manager that gives you direct access to your files from any browser. It allows users to upload, delete, preview, rename, and organize files and folders \u2014 all through a clean, responsive interface.</p> <p>Key Features</p> <ul> <li>Modern and intuitive web interface</li> <li>User management with role-based access</li> <li>File uploads, downloads, sharing, and previews</li> <li>Custom branding support</li> <li>Configurable directory access</li> <li>Runs as a single binary or Docker container</li> </ul> <p>Official site: https://filebrowser.org</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd FIL001</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 8095:</p> <ul> <li>URL: <code>http://&lt;your.IP&gt;:8095</code></li> <li>Username/Password: admin / admin</li> </ul> <ul> <li>Install directory: <code>/armbian/filebrowser</code></li> <li>Root directory: <code>/armbian/filebrowser/srv</code></li> <li>Database directory: <code>/armbian/filebrowser/database</code></li> <li>Configuration file: <code>/armbian/filebrowser/filebrowser.json</code></li> <li>Branding directory: <code>/armbian/filebrowser/branding</code></li> </ul> Bash<pre><code>docker logs -f filebrowser\n</code></pre> Filebrowser container remove:<pre><code>armbian-config --cmd FIL002\n</code></pre> Filebrowser container purge with data folder:<pre><code>armbian-config --cmd FIL003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Media/#hastebin","title":"Hastebin","text":"<p>Hastebin Paste Server</p> <p></p> <p>Hastebin is a fast and simple self-hosted pastebin server. It allows users to quickly share text snippets like logs, code, or notes via a web interface or API. Hastebin is lightweight, easy to deploy with Docker, and ideal for teams needing private, temporary paste storage.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @efectn Documentation: Link </p> <pre><code>armbian-config --cmd HPS001</code></pre> Hastebin remove:<pre><code>armbian-config --cmd HPS002\n</code></pre> Hastebin purge with data folder:<pre><code>armbian-config --cmd HPS003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Media/#immich","title":"Immich","text":"<p>Immich - high-performance self-hosted photo and video backup solution</p> <p></p> <p>Immich is a self-hosted photo and video backup solution, designed for individuals and families who want:</p> <ul> <li>An alternative to cloud-based services like Google Photos or iCloud  </li> <li>A private, secure place to store, browse, and share memories  </li> <li>Powerful features like automatic mobile uploads, facial recognition, and search  </li> <li>A modern, responsive web and mobile interface for easy access</li> </ul> <p>Thanks to Immich being built with modern technologies like NestJS, TypeScript, and machine learning integrations, users enjoy a smooth, intelligent media experience. Whether you\u2019re a casual user backing up phone photos or a tech-savvy person managing media across multiple devices, Immich provides the flexibility and control of a cloud solution\u2014on your own server.</p> <p>Summary</p> <ul> <li>Immich is ideal if you want full privacy, open-source flexibility, and control over your data.</li> <li>Google Photos is convenient and polished but comes with trade-offs in privacy and cost at scale.</li> <li>Synology Photos fits well in homes or small offices already using Synology NAS systems, offering good performance with integrated features.</li> </ul> <p>Edit: footer header Status: Preview Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd IMM001</code></pre> Access to the serviceDefault credentialsDirectoriesView logsImmich vs Google Photos vs Synology Photos <p>Immich is accessible via HTTP on port 8077:</p> <ul> <li>URL: <code>http://&lt;your.IP&gt;:8077</code></li> </ul> <ul> <li>Email: (set during initial setup)</li> <li>Password: (set during initial setup)</li> </ul> <ul> <li>Uploads: <code>/armbian/immich/photos/upload/</code></li> <li>Thumbnails: <code>/armbian/immich/photos/thumbs/</code></li> <li>Profile images: <code>/armbian/immich/photos/profile/</code></li> <li>Library: <code>/armbian/immich/photos/library/</code></li> <li>Encoded videos: <code>/armbian/immich/photos/encoded-video/</code></li> <li>Backups: <code>/armbian/immich/photos/backups/</code></li> </ul> Bash<pre><code>docker logs -f immich\n</code></pre> Feature / Aspect Immich Google Photos Synology Photos Hosting Self-hosted Cloud (Google infrastructure) Self-hosted (on Synology NAS) Privacy &amp; Control Full control, private data storage Data stored and analyzed by Google Full control within your NAS environment Automatic Uploads Yes (via mobile app) Yes (via mobile app) Yes (via mobile app or Synology Drive) Facial Recognition Yes (on-device) Yes (cloud-based) Yes (on-device) Object &amp; Scene Detection Yes (limited but improving) Yes (advanced AI) Yes (basic) Web Interface Yes (modern and responsive) Yes Yes Mobile Apps Yes (iOS &amp; Android) Yes (iOS &amp; Android) Yes (iOS &amp; Android) Albums &amp; Sharing Yes (with public and private sharing) Yes (advanced sharing options) Yes Multi-user Support Yes Limited (mostly single user) Yes (multi-user, tied to NAS users) Backup Original Quality Yes (no compression) Only with paid storage Yes (NAS dependent) Offline Access Limited (depends on app setup) Yes (with sync) Yes Open Source Yes No No Hardware Requirement Any Docker-capable server or NAS N/A (runs on Google\u2019s cloud) Synology NAS required Price Free (self-hosted, you pay for hardware) Free (with limitations) / Paid for storage Included with NAS, hardware cost required Immich remove:<pre><code>armbian-config --cmd IMM002\n</code></pre> Immich purge with data folder:<pre><code>armbian-config --cmd IMM003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Media/#jellyfin","title":"Jellyfin","text":"<p>Jellyfin Media System</p> <p></p> <p>Jellyfin is a Free Software Media System that puts you in control of managing and streaming your media. It is an alternative to the proprietary Emby and Plex, to provide media from a dedicated server to end-user devices via multiple apps. Jellyfin is descended from Emby\u2019s 3.5.2 release and ported to the .NET Core framework to enable full cross-platform support. There are no strings attached, no premium licenses or features, and no hidden agendas: just a team who want to build something better and work together to achieve it.</p> <p>Edit: footer header Status: Preview Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd JMS001</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 8096:</p> <ul> <li>URL: <code>http://&lt;your.IP&gt;:8096</code></li> <li>Username and password are set at first login</li> </ul> <ul> <li>Install directory: <code>/armbian/jellyfin</code></li> <li>Site configuration directory: <code>/armbian/jellyfin/config</code></li> <li>TV shows directory: <code>/armbian/jellyfin/tvseries</code></li> <li>Movies directory: <code>/armbian/jellyfin/movies</code></li> </ul> Bash<pre><code>docker logs -f jellyfin\n</code></pre> Jellyfin remove:<pre><code>armbian-config --cmd JMS002\n</code></pre> Jellyfin purge with data folder:<pre><code>armbian-config --cmd JMS003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Media/#navidrome","title":"Navidrome","text":"<p>Navidrome music server and streamer compatible with Subsonic/Airsonic</p> <p></p> <p>Navidrome is a modern, lightweight, and self-hosted music server and streamer. It\u2019s designed to be compatible with the Subsonic and Airsonic APIs, making it a drop-in replacement for users of those systems. With Navidrome, you can stream your personal music collection from anywhere using any compatible Subsonic client (mobile or desktop). It supports multi-user access, real-time updates, album artwork, and is built with performance and simplicity in mind\u2014perfect for organizing and accessing large music libraries.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd NAV001</code></pre> Navidrome remove:<pre><code>armbian-config --cmd NAV002\n</code></pre> Navidrome purge with data folder:<pre><code>armbian-config --cmd NAV003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Media/#nextcloud","title":"Nextcloud","text":"<p>Nextcloud content collaboration platform</p> <p></p> <p>Nextcloud gives you access to all your files wherever you are. Where are your photos and documents? With Nextcloud you pick a server of your choice, at home, in a data center or at a provider. And that is where your files will be. Nextcloud runs on that server, protecting your data and giving you access from your desktop or mobile devices. Through Nextcloud you also access, sync and share your existing data on that FTP drive at the office, a Dropbox or a NAS you have at home.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd NCT001</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 443:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:443</code></li> <li>Username/Password: admin / generate at first web interface login</li> </ul> <ul> <li>Install directory: <code>/armbian/nextcloud</code></li> <li>Site configuration directory: <code>/armbian/nextcloud/config</code></li> <li>Data directory: <code>/armbian/nextcloud/data</code></li> </ul> Bash<pre><code>docker logs -f nextcloud\n</code></pre> Nextcloud remove:<pre><code>armbian-config --cmd NCT002\n</code></pre> Nextcloud purge with data folder:<pre><code>armbian-config --cmd NCT003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Media/#omv","title":"OMV","text":"<p>Deploy NAS using OpenMediaVault</p> <p></p> <p>OpenMediaVault (OMV) is a powerful, open-source network-attached storage (NAS) operating system built on the Debian Linux distribution. It is designed to provide a simple and intuitive web-based interface for managing storage devices and network services, making it ideal for home users, small offices, and even advanced users looking for a customizable and efficient NAS solution.</p> <p>OMV supports a wide range of features, including various file systems (EXT4, XFS, BTRFS, etc.), software RAID configurations, scheduled backups, and user and group management. It offers support for common network protocols such as SMB/CIFS (Windows file sharing), NFS, FTP, and SSH, enabling seamless file access across different platforms.</p> <p>Through its modular design, OpenMediaVault can be easily extended with plugins, allowing users to add functionality like Docker support, media servers, cloud synchronization tools, BitTorrent clients, and more. The system is designed for stability and ease of use, with regular updates and a strong community supporting development and troubleshooting.</p> <p>Whether used on a dedicated server, a Raspberry Pi, or virtualized hardware, OMV provides a flexible and reliable way to build your own custom NAS.  </p> <p>Warning: installation works only on Debian (bookworm) based Armbian image.</p> <p>Edit: footer header Status: Stable Architecture: amd64 arm64 armhf Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd OMV001</code></pre> Access to the web interfaceDirectoriesUsagePlugins and Add-onsView logs <p>The OpenMediaVault web interface is accessible via the default HTTP port:</p> <ul> <li>URL: <code>http://&lt;your.IP&gt;:80</code></li> <li>Username/Password: admin / openmediavault (change after first login)</li> </ul> <ul> <li>Default config directory: <code>/etc/openmediavault/</code></li> <li>Shared folders base path: <code>/srv/dev-disk-by-.../</code></li> <li>Plugin data directories may vary by service (e.g., Docker, SMB, etc.)</li> </ul> <ul> <li>Use the web interface to configure storage, users, services, and plugins</li> <li>Create shared folders and enable SMB/NFS to access files over the network</li> <li>Monitor system status, performance, and logs from the dashboard</li> </ul> <p>OpenMediaVault supports a wide range of community plugins:</p> <ul> <li>Docker support via <code>openmediavault-compose</code> or <code>omv-extras</code></li> <li>Media servers (e.g., Plex, Jellyfin)</li> <li>Backup tools (e.g., rsync, USB backup)</li> <li>Cloud sync (e.g., Rclone)</li> </ul> <p>Install plugins through the web interface after enabling OMV-Extras.</p> Bash<pre><code>journalctl -u openmediavault-engined\ntail -f /var/log/syslog\n</code></pre> OpenMediaVault remove:<pre><code>armbian-config --cmd OMV002\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Media/#owncloud","title":"Owncloud","text":"<p>Owncloud share files and folders, easy and secure</p> <p></p> <p>ownCloud is a free and open-source software project for content collaboration and sharing and syncing of files in distributed and federated enterprise scenarios.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd OWC001</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 7787:</p> <ul> <li>URL: <code>http://&lt;your.IP&gt;:7787</code></li> <li>Username/Password: admin / admin</li> </ul> <ul> <li>Install directory: <code>/armbian/owncloud</code></li> <li>Site configuration directory: <code>/armbian/owncloud/config</code></li> <li>Data directory: <code>/armbian/owncloud/data</code></li> </ul> Bash<pre><code>docker logs -f owncloud\n</code></pre> Owncloud remove:<pre><code>armbian-config --cmd OWC002\n</code></pre> Owncloud purge with data folder:<pre><code>armbian-config --cmd OWC003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Media/#syncthing","title":"Syncthing","text":"<p>Syncthing continuous file synchronization</p> <p></p> <p>Syncthing replaces proprietary sync and cloud services with something open, trustworthy and decentralized. Your data is your data alone and you deserve to choose where it is stored, if it is shared with some third party and how it\u2019s transmitted over the Internet.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd STC001</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 8884:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:8884</code></li> <li>Username/Password: There is none, but it is highly suggested setting a password for this container. To do this go to Actions -&gt; Settings -&gt; set user/password for the webUI.</li> </ul> <ul> <li>Install directory: <code>/armbian/syncthing</code></li> <li>Site configuration directory: <code>/armbian/syncthing/config</code></li> <li>Data directory: <code>/armbian/syncthing/data1</code> <code>/armbian/syncthing/data2</code></li> </ul> Bash<pre><code>docker logs -f syncthing\n</code></pre> Syncthing remove:<pre><code>armbian-config --cmd STC002\n</code></pre> Syncthing purge with data folder:<pre><code>armbian-config --cmd STC003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Media/#stirling","title":"Stirling","text":"<p>Stirling PDF tools for viewing and editing PDF files</p> <p></p> <p>Stirling-PDF is a robust, locally hosted web-based PDF manipulation tool using Docker. It enables you to carry out various operations on PDF files, including splitting, merging, converting, reorganizing, adding images, rotating, compressing, and more. This locally hosted web application has evolved to encompass a comprehensive set of features, addressing all your PDF requirements.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd STR001</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 8077:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:8077</code></li> </ul> <ul> <li>Install directory: <code>/armbian/stirling</code></li> </ul> Bash<pre><code>docker logs -f stirling-pdf\n</code></pre> Stirling PDF remove:<pre><code>armbian-config --cmd STR002\n</code></pre> Stirling PDF purge with data folder:<pre><code>armbian-config --cmd STR003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Monitoring/","title":"Real-time monitoring, collecting metrics, up-time status","text":""},{"location":"User-Guide_Armbian-Software/Monitoring/#grafana","title":"Grafana","text":"<p>Grafana data analytics</p> <p></p> <p>Grafana is a multi-platform open source analytics and interactive visualization web application. It can produce charts, graphs, and alerts for the web when connected to supported data sources.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd GRA001</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 3000:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:3000</code></li> </ul> <ul> <li>Install directory: <code>/armbian/grafana</code></li> </ul> Bash<pre><code>docker logs -f grafana\n</code></pre> Grafana remove:<pre><code>armbian-config --cmd GRA002\n</code></pre> Grafana purge with data folder:<pre><code>armbian-config --cmd GRA003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Monitoring/#netalertx","title":"NetAlertX","text":"<p>NetAlertX network scanner &amp; notification framework</p> <p></p> <p>NetAlertX is an open-source network monitoring and intruder detection tool designed to provide visibility into your Wi-Fi or LAN network. It scans your network for connected devices and alerts you when new or unknown devices are detected, helping you monitor unauthorized access and maintain network security.</p> <p>Key Features:</p> <ul> <li>Scheduled Network Scans: Regularly scans your network to detect new devices, reconnections, disconnections, and changes in IP addresses.</li> </ul> <ul> <li>Extensive Notification Support: Integrates with over 80 notification services, including email, Telegram, Pushover, and NTFY, ensuring you receive timely alerts about network changes.</li> </ul> <ul> <li>Network Visualization: Offers a user-friendly interface to visualize your entire network, enhancing security and simplifying management.</li> </ul> <ul> <li>Multi-Network Monitoring: Supports synchronization of multiple network instances, providing cross-network visibility across various device manufacturers.</li> </ul> <ul> <li>Home Assistant Integration: Seamlessly integrates with Home Assistant, enabling advanced automation workflows and smart home integrations.</li> </ul> <ul> <li>Customizable Plugins: Allows users to develop custom plugins with auto-generated user interfaces and built-in notification systems, tailoring the tool to specific network monitoring needs.</li> </ul> <p>NetAlertX is actively maintained and supports various installation methods, including Docker and bare-metal setups. It serves as a proactive solution for maintaining network health and preventing issues before they escalate, providing peace of mind for individuals and small businesses alike.</p> <p>For more information and installation guides, visit the official NetAlertX documentation. </p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 armhf Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd NAX001</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 20211:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:20211</code></li> </ul> <ul> <li>Config directory: <code>/armbian/netalertx/config</code></li> </ul> Bash<pre><code>docker logs -f netalertx\n</code></pre> NetAlertX network scanner remove:<pre><code>armbian-config --cmd NAX002\n</code></pre> NetAlertX network scanner purge with data folder:<pre><code>armbian-config --cmd NAX003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Monitoring/#netdata","title":"Netdata","text":"<p>Netdata - monitoring real-time metrics</p> <p></p> <p>Netdata is a partially open source tool designed to collect real-time metrics, such as CPU usage, disk activity, bandwidth usage, website visits, etc., and then display them in live, easy-to-interpret charts.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd NTD001</code></pre> Netdata remove:<pre><code>armbian-config --cmd NTD002\n</code></pre> Netdata purge with data folder:<pre><code>armbian-config --cmd NTD003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Monitoring/#prometheus","title":"Prometheus","text":"<p>Prometheus docker image</p> <p></p> <p>Prometheus is an open-source monitoring and alerting toolkit designed for reliability and scalability. It collects and stores time-series data, provides powerful query capabilities, and enables real-time alerts based on defined conditions. Commonly used in cloud and containerized environments, Prometheus integrates seamlessly with Kubernetes and other modern infrastructure.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @efectn Documentation: Link </p> <pre><code>armbian-config --cmd PRO001</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 9090:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:9090</code></li> </ul> <ul> <li>Config directory: <code>/armbian/prometheus</code></li> </ul> Bash<pre><code>docker logs -f prometheus\n</code></pre> Prometheus remove:<pre><code>armbian-config --cmd PRO002\n</code></pre> Prometheus purge with data folder:<pre><code>armbian-config --cmd PRO003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Monitoring/#uptime-kuma","title":"Uptime Kuma","text":"<p>Uptime Kuma self-hosted monitoring tool</p> <p></p> <p>Uptime Kuma is a self-hosted monitoring tool similar to \"Uptime Robot\".  It provides a beautiful, easy-to-use web dashboard to monitor HTTP(s), TCP, Ping, and more types of services.</p> <p>You can receive instant notifications when a service goes down via Telegram, Discord, Slack, email, and many other integrations.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd UPK001</code></pre> Access to the web interfaceFeatures <p>The web interface is accessible via port 3001:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:3001</code></li> <li>Username/Password: Are set at first web interface login</li> </ul> <ul> <li>Monitoring uptime for HTTP(s) / TCP / HTTP(s) Keyword / HTTP(s) Json Query / Ping / DNS Record / Push / Steam Game Server / Docker Containers</li> <li>Fancy, Reactive, Fast UI/UX</li> <li>Notifications via Telegram, Discord, Gotify, Slack, Pushover, Email (SMTP), and 90+ notification services, click here for the full list</li> <li>20-second intervals</li> <li>Multi Languages</li> <li>Multiple status pages</li> <li>Map status pages to specific domains</li> <li>Ping chart</li> <li>Certificate info</li> <li>Proxy support</li> <li>2FA support</li> </ul> Uptime Kuma remove:<pre><code>armbian-config --cmd UPK002\n</code></pre> Uptime Kuma purge with data folder:<pre><code>armbian-config --cmd UPK003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Music/","title":"Music servers and streamers","text":""},{"location":"User-Guide_Armbian-Software/Music/#navidrome","title":"Navidrome","text":"<p>Navidrome music server and streamer compatible with Subsonic/Airsonic</p> <p></p> <p>Navidrome is a modern, lightweight, and self-hosted music server and streamer. It\u2019s designed to be compatible with the Subsonic and Airsonic APIs, making it a drop-in replacement for users of those systems. With Navidrome, you can stream your personal music collection from anywhere using any compatible Subsonic client (mobile or desktop). It supports multi-user access, real-time updates, album artwork, and is built with performance and simplicity in mind\u2014perfect for organizing and accessing large music libraries.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd NAV001</code></pre> Navidrome remove:<pre><code>armbian-config --cmd NAV002\n</code></pre> Navidrome purge with data folder:<pre><code>armbian-config --cmd NAV003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Netconfig/","title":"Console network tools for measuring load and bandwidth","text":""},{"location":"User-Guide_Armbian-Software/Netconfig/#avahi-daemon","title":"avahi-daemon","text":"<p>avahi-daemon hostname broadcast via mDNS</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd AVH001</code></pre> avahi-daemon remove:<pre><code>armbian-config --cmd AVH002\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Netconfig/#iperf3","title":"iperf3","text":"<p>iperf3 bandwidth measuring tool</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd IPR001</code></pre> iperf3 remove:<pre><code>armbian-config --cmd IPR002\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Netconfig/#iptraf-ng","title":"iptraf-ng","text":"<p>iptraf-ng IP LAN monitor</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd IPT001</code></pre> iptraf-ng remove:<pre><code>armbian-config --cmd IPT002\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Netconfig/#nload","title":"nload","text":"<p>nload - realtime console network usage monitor</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd NLD001</code></pre> nload - remove:<pre><code>armbian-config --cmd NLD002\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Printing/","title":"Tools for printing and 3D printing","text":""},{"location":"User-Guide_Armbian-Software/Printing/#octoprint","title":"OctoPrint","text":"<p>OctoPrint web-based 3D printers management tool</p> <p></p> <p>OctoPrint is an open source 3D printer controller application, which provides a web interface for the connected printers. It displays printers status and key parameters and allows user to schedule prints and remotely control the printer.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd OCT001</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 7981:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:7981</code></li> </ul> <ul> <li>Install directory: <code>/armbian/octoprint</code></li> </ul> Bash<pre><code>docker logs -f octoprint\n</code></pre> OctoPrint remove:<pre><code>armbian-config --cmd OCT002\n</code></pre> OctoPrint purge with data folder:<pre><code>armbian-config --cmd OCT003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/","title":"Run/Install 3rd party applications","text":""},{"location":"User-Guide_Armbian-Software/Software/#armbian-infrastructure-services","title":"Armbian infrastructure services","text":"<p>Edit: footer header </p>"},{"location":"User-Guide_Armbian-Software/Software/#cdn-router","title":"CDN router","text":"<p>Router for repository mirror automation</p> <p></p> <p>The Armbian Router is an intelligent redirector system that optimizes file downloads by automatically directing users to the best available mirror. It evaluates each download request based on geographic location, server health, and file availability, ensuring faster downloads, balanced load distribution, and high availability. This core service underpins Armbian\u2019s scalable mirror network, seamlessly routing traffic to improve performance and reliability for end users worldwide.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 aarch64 armhf riscv64 Maintainer: @armbian Documentation: Link </p> <pre><code>armbian-config --cmd ART001</code></pre> Remove CDN router:<pre><code>armbian-config --cmd ART002\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#gh-runners","title":"GH runners","text":"<p>GitHub runners for Armbian automation</p> <p></p> <p>This module automates the installation, removal, and status checking of GitHub self-hosted runners for the Armbian project. It supports batch operations and user input through dialog prompts when running interactively.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 aarch64 armhf riscv64 Maintainer: @armbian Documentation: Link </p> <pre><code>armbian-config --cmd GHR001</code></pre> Supported Commands <ul> <li><code>install</code>   Installs one or more GitHub runners using the provided configuration or interactively prompted values.</li> </ul> <ul> <li><code>purge</code> / <code>remove</code>   Removes runners based on the provided runner name series and target organization or repository.</li> </ul> <ul> <li><code>status</code>   Quietly checks if any <code>actions.runner</code> services are currently running on the system.</li> </ul> Available Switches Switch Description <code>gh_token</code> GitHub token with admin rights to manage self-hosted runners. <code>runner_name</code> Name prefix for the runner series (default: <code>armbian</code>). <code>start</code> Start index of the runner series (e.g., <code>01</code>). <code>stop</code> End index of the runner series (e.g., <code>05</code>). <code>label_primary</code> Labels for the first runner (default: <code>alfa</code>). <code>label_secondary</code> Labels for additional runners (default: <code>fast,images</code>). <code>organisation</code> GitHub organization name (default: <code>armbian</code>). <code>owner</code> GitHub user or organization owner (used for repo-level runners). <code>repository</code> GitHub repository name (used for repo-level runners). Behavior <ul> <li>Prompts the user for missing switches via <code>dialog</code> only in interactive mode.</li> <li>Supports bulk installation of runners using sequential numbering (<code>start</code> to <code>stop</code>).</li> <li>Calls internal <code>actions.runner.install</code> and <code>actions.runner.remove</code> helpers.</li> <li>Returns <code>0</code> if any runner services are active, <code>1</code> otherwise (for scripting use).</li> <li>Suppresses errors and outputs when checking status to remain quiet in background use.</li> </ul> Remove GitHub runners for Armbian automation:<pre><code>armbian-config --cmd GHR002\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#rsyncd-server","title":"Rsyncd server","text":"<p>Edit: footer header Status: Stable Architecture: x86-64 aarch64 armhf riscv64 Maintainer: @armbian Documentation: Link </p> <pre><code>armbian-config --cmd RSD001</code></pre> Remove Armbian rsyncd server:<pre><code>armbian-config --cmd RSD002\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#backup-solutions-for-your-data","title":"Backup solutions for your data","text":"<p>Edit: footer header </p>"},{"location":"User-Guide_Armbian-Software/Software/#duplicati","title":"Duplicati","text":"<p>Duplicati install</p> <p></p> <p>Duplicati is a versatile and secure backup tool designed for everyone, including:</p> <ul> <li>Users new to backup systems who need a simple and reliable solution.</li> <li>Experienced users who want full control over encrypted backups and storage destinations.</li> <li>System administrators who require automated, encrypted backups across multiple platforms.</li> </ul> <p>Duplicati offers powerful features such as strong AES-256 encryption, backup scheduling, and flexible storage support (local folders, NAS, cloud providers like Google Drive, Dropbox, S3, and more). Through its web-based interface, users can easily configure, monitor, and restore backups from any browser.</p> <p>Thanks to Duplicati\u2019s smart design \u2014 working through standard protocols and containerized deployment \u2014 it fits seamlessly into any environment, from personal setups to enterprise infrastructures.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd DPL001</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 8200:</p> <ul> <li>URL: <code>http://&lt;your.IP&gt;:8200</code></li> </ul> <ul> <li>Install directory: <code>/armbian/duplicati</code></li> <li>Configuration directory: <code>/armbian/duplicati/config</code></li> <li>Backup target directory: <code>/armbian/duplicati/backups</code></li> </ul> Bash<pre><code>docker logs -f duplicati\n</code></pre> Duplicati remove:<pre><code>armbian-config --cmd DPL002\n</code></pre> Duplicati purge with data folder:<pre><code>armbian-config --cmd DPL003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#docker-containerization-and-kvm-virtual-machines","title":"Docker containerization and KVM virtual machines","text":"<p>Edit: footer header </p>"},{"location":"User-Guide_Armbian-Software/Software/#docker","title":"Docker","text":"<p>Docker minimal</p> <p></p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 armhf Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd CON001</code></pre> <p>What is Docker? Docker helps developers build, share, run, and verify applications anywhere - without tedious environment configuration or management.</p> Docker engine:<pre><code>armbian-config --cmd CON002\n</code></pre> Docker remove:<pre><code>armbian-config --cmd CON003\n</code></pre> Docker purge with all images, containers, and volumes:<pre><code>armbian-config --cmd CON004\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#portainer","title":"Portainer","text":"<p>Portainer container management platform</p> <p></p> <p>Portainer simplifies your Docker container management via Portainer web interface. It enables faster deploy of the applications and it gives real time visibility.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 armhf Maintainer: @schwar3kat Documentation: Link </p> <pre><code>armbian-config --cmd POR001</code></pre> Access to the web interface <p>The web interface is accessible via port 9002:</p> <ul> <li>URL = <code>http://&lt;your.IP&gt;:9002</code></li> </ul> Portainer remove:<pre><code>armbian-config --cmd POR002\n</code></pre> Portainer purge with with data folder:<pre><code>armbian-config --cmd POR003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#network-wide-ad-blockers-servers","title":"Network-wide ad blockers servers","text":"<p>Edit: footer header </p>"},{"location":"User-Guide_Armbian-Software/Software/#adguardhome","title":"AdGuardHome","text":"<p>AdGuardHome DNS sinkhole</p> <p></p> <p>AdGuard Home is a network-wide software that functions as a DNS server and ad blocker. It blocks ads, trackers, and malicious websites at the DNS level, meaning it filters content for all devices connected to the network. It also provides additional features like parental controls, logging, and privacy protections. Essentially, it acts as a gateway between your devices and the internet, blocking unwanted content before it even reaches your devices.</p> <p>Edit: footer header Status: Stable Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd ADG001</code></pre> Access to the web interfaceDirectoriesUsageBlack and white listsView logs <p>The web interface is accessible via port 3000:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:3000</code></li> <li>Username/Password: admin / generate at first web interface login</li> </ul> <ul> <li>Install directory: <code>/armbian/adguardhome/</code></li> <li>Configuration directory: <code>/armbian/adguardhome/confdir</code></li> <li>Work directory: <code>/armbian/adguardhome/workdir</code></li> </ul> <ul> <li>server where you are installing is automatically switched to this DNS</li> <li>on your desktop PC set IP address of this server as DNS</li> <li>network wide: set IP address of this server on routers DNS</li> </ul> <p>There are many sites in the web giving blocklists and whitelists for AdGuard Home. They can be used when you want to have more blocking as the standard installation gives you. Here are some examples:</p> <ul> <li>The Big Blocklist Collection by WaLLy3K</li> <li>Phishing Army blocklist</li> <li>Whitelist collection by anudeepND</li> </ul> Bash<pre><code>docker logs -f adguardhome\n</code></pre> AdGuardHome remove:<pre><code>armbian-config --cmd ADG002\n</code></pre> AdGuardHome purge with data folder:<pre><code>armbian-config --cmd ADG003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#pi-hole","title":"Pi-hole","text":"<p>Pi-hole DNS ad blocker</p> <p></p> <p>Pi-hole is a network-wide ad blocker that acts as a DNS (Domain Name System) sinkhole. It works by blocking requests to known ad servers, trackers, and malicious websites across all devices connected to your home network. Here\u2019s how it works:</p> <ul> <li>DNS-Based Filtering: Pi-hole intercepts DNS requests from devices on your network. When a device tries to connect to a website, Pi-hole checks if the website\u2019s domain is on a blocklist. If it is, Pi-hole prevents the connection from being made, effectively blocking ads, trackers, and potentially harmful sites.</li> </ul> <ul> <li>Customizable Blocklists: Pi-hole allows you to choose from a variety of community-maintained blocklists or even add your own. These blocklists contain domains known to serve ads, trackers, and other unwanted content.</li> </ul> <ul> <li>Device and Network-Level Protection: Once set up, Pi-hole works across your entire network. This means all devices (smartphones, tablets, computers, smart TVs, etc.) that use your Pi-hole as their DNS server automatically benefit from ad-blocking without needing individual apps or browser extensions.</li> </ul> <ul> <li>Web Interface: Pi-hole offers an intuitive web interface where you can monitor statistics, review blocked domains, and tweak settings like adding custom blocklists or whitelisting certain sites.</li> </ul> <ul> <li>Privacy and Speed: By blocking unwanted content at the DNS level, Pi-hole not only improves browsing speed (since ads are not loaded), but also enhances privacy by preventing tracking scripts from running in the background.</li> </ul> <p>Pi-hole is typically installed on a Armbian minimal, but it can also run on other systems. It\u2019s a great way to have ad-blocking and privacy protection across your entire network without needing to install anything on individual devices.</p> <p>Edit: footer header Status: Stable Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd PIH001</code></pre> Access the web interfaceDocumentation <p>The web interface of Pi-hole can be accessed via:</p> <ul> <li>URL = <code>http://&lt;your.IP&gt;/admin</code></li> <li>Password is set and adjust from <code>armbian-config</code></li> </ul> <p>https://docs.pi-hole.net/</p> Pi-hole change web admin password:<pre><code>armbian-config --cmd PIH002\n</code></pre> Pi-hole remove:<pre><code>armbian-config --cmd PIH003\n</code></pre> Pi-hole purge with data folder:<pre><code>armbian-config --cmd PIH004\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#unbound","title":"Unbound","text":"<p>Unbound caching DNS resolver</p> <p></p> <p>Unbound is a high-performance, open-source DNS resolver. It primarily serves to resolve domain names into IP addresses for devices on a network. Unlike regular DNS servers, Unbound performs DNS lookups directly and securely, providing features like DNSSEC validation (ensuring data integrity) and privacy protections. It\u2019s often used to improve speed, security, and privacy by resolving queries locally rather than relying on external DNS services.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd UNB001</code></pre> Default DNS portDirectoriesView logs <ul> <li>Default DNS port: 53</li> </ul> <ul> <li>Install directory: <code>/armbian/unbound/</code></li> <li>Configuration directory: <code>/armbian/unbound/</code></li> </ul> Bash<pre><code>docker logs -f unbound\n</code></pre> Unbound remove:<pre><code>armbian-config --cmd UNB002\n</code></pre> Unbound purge with data folder:<pre><code>armbian-config --cmd UNB003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#sql-database-servers-and-web-interface-managers","title":"SQL database servers and web interface managers","text":"<p>Edit: footer header </p>"},{"location":"User-Guide_Armbian-Software/Software/#mariadb","title":"Mariadb","text":"<p>Mariadb SQL database server</p> <p></p> <p>Mariadb is one of the most popular database servers. Made by the original developers of MySQL.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd DAT001</code></pre> ConfigurationDirectoriesView logs <p>Database access configuration is done at first install: - create root password - create database - create normal user - create password for normal user</p> <ul> <li>Database host: <code>&lt;your.IP&gt;</code></li> </ul> <ul> <li>Install directory: <code>/armbian/mariadb</code></li> <li>Site configuration directory: <code>/armbian/mariadb/config</code></li> </ul> Bash<pre><code>docker logs -f mariadb\n</code></pre> Mariadb remove:<pre><code>armbian-config --cmd DAT002\n</code></pre> Mariadb purge with data folder:<pre><code>armbian-config --cmd DAT003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#phpmyadmin","title":"phpMyAdmin","text":"<p>phpMyAdmin web interface manager</p> <p></p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd MYA001</code></pre> phpMyAdmin remove:<pre><code>armbian-config --cmd MYA002\n</code></pre> phpMyAdmin purge with data folder:<pre><code>armbian-config --cmd MYA003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#postgresql","title":"PostgreSQL","text":"<p>PostgreSQL install</p> <p></p> <p>PostgreSQL is a powerful, open-source object-relational database system known for its robustness, feature richness, and reliability.</p> <p>It is designed for everyone, including:</p> <ul> <li>Developers needing advanced SQL support and extensibility.</li> <li>System administrators requiring reliable data storage for mission-critical applications.</li> <li>Enterprises seeking a high-performance, standards-compliant relational database.</li> </ul> <p>PostgreSQL offers strong ACID compliance, concurrency, rich data types, full-text search, JSON support, and extensibility through stored procedures and custom functions. It is trusted globally in financial, government, and web-scale applications.</p> <p>Thanks to its proven architecture and open-source nature, PostgreSQL fits seamlessly in projects of all sizes.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd PGSQL1</code></pre> Access to the databaseDirectoriesView logs <p>PostgreSQL is accessible via port 5432:</p> <ul> <li>Host: <code>postgresql://&lt;your.IP&gt;:5432</code></li> <li>Default user: <code>armbian</code></li> <li>Default password: <code>armbian</code></li> <li>Default database: <code>armbian</code></li> </ul> <ul> <li>Data directory: <code>/armbian/postgres/data</code></li> </ul> Bash<pre><code>docker logs -f postgres\n</code></pre> PostgreSQL remove:<pre><code>armbian-config --cmd PGSQL2\n</code></pre> PostgreSQL purge with data folder:<pre><code>armbian-config --cmd PGSQL3\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#redis","title":"Redis","text":"<p>Redis install</p> <p></p> <p>Redis is an open-source, in-memory data structure store, used as a database, cache, and message broker. It supports a variety of data structures such as strings, hashes, lists, sets, and sorted sets.</p> <p>Key Features: - Extremely fast performance with in-memory storage - Persistence options (snapshotting and AOF) - Pub/Sub messaging capabilities - Built-in replication and high availability - Simple API and wide client support</p> <p>Redis is widely used for real-time applications, caching layers, session stores, and lightweight queues across industries and platforms.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd REDIS1</code></pre> Access to the serviceDirectoriesView logs <p>Redis server is accessible on port 6379:</p> <ul> <li>Host: <code>redis://&lt;your.IP&gt;:6379</code></li> </ul> <ul> <li>Data directory: <code>/armbian/redis/data</code></li> </ul> Bash<pre><code>docker logs -f redis\n</code></pre> Redis remove:<pre><code>armbian-config --cmd REDIS2\n</code></pre> Redis purge with data folder:<pre><code>armbian-config --cmd REDIS3\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#applications-and-tools-for-development","title":"Applications and tools for development","text":"<p>Edit: footer header </p>"},{"location":"User-Guide_Armbian-Software/Software/#git-cli","title":"Git CLI","text":"<p>Install tools for cloning and managing repositories (git)</p> <p>Edit: footer header Status: Stable Architecture: x86-64 aarch64 armhf riscv64 Maintainer: @armbian Documentation: Link </p> <pre><code>armbian-config --cmd GIT001</code></pre> Remove tools for cloning and managing repositories (git):<pre><code>armbian-config --cmd GIT002\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#download-apps-for-movies-tv-shows-music-and-subtitles","title":"Download apps for movies, TV shows, music and subtitles","text":"<p>Edit: footer header </p>"},{"location":"User-Guide_Armbian-Software/Software/#bazarr","title":"Bazarr","text":"<p>Bazarr automatic subtitles downloader for Sonarr and Radarr</p> <p></p> <p>Bazarr is a companion application to Sonarr and Radarr. It can manage and download subtitles based on your requirements. You define your preferences by TV show or movie and Bazarr takes care of everything for you.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd BAZ001</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 6767:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:6767</code></li> <li>Username/Password: admin / generate at first web interface login</li> </ul> <ul> <li>Install directory: <code>/armbian/bazarr</code></li> <li>Site configuration directory: <code>/armbian/bazarr/config</code></li> <li>Download directory: <code>/armbian/bazarr/movies</code> <code>/armbian/bazarr/tv</code></li> </ul> Bash<pre><code>docker logs -f bazarr\n</code></pre> Bazarr remove:<pre><code>armbian-config --cmd BAZ002\n</code></pre> Bazarr purge with data folder:<pre><code>armbian-config --cmd BAZ003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#deluge","title":"Deluge","text":"<p>Deluge BitTorrent client</p> <p></p> <p>Deluge\u2060 is a lightweight, Free Software, cross-platform BitTorrent client.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd DEL001</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 8112:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:8112</code></li> <li>Username/Password: default user/password of admin/deluge</li> </ul> <ul> <li>Install directory: <code>/armbian/deluge</code></li> <li>Site configuration directory: <code>/armbian/deluge/config</code></li> <li>Download directory: <code>/armbian/deluge/downloads</code></li> </ul> Bash<pre><code>docker logs -f deluge\n</code></pre> Deluge remove:<pre><code>armbian-config --cmd DEL002\n</code></pre> Deluge purge with data folder:<pre><code>armbian-config --cmd DEL003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#qbittorrent","title":"qBittorrent","text":"<p>qBittorrent BitTorrent client </p> <p></p> <p>The Qbittorrent\u2060 project aims to provide an open-source software alternative to \u00b5Torrent. qBittorrent is based on the Qt toolkit and libtorrent-rasterbar library.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd DOW001</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 8090:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:8090</code></li> <li>Username/Password: admin / generate at first web interface login</li> </ul> <ul> <li>Install directory: <code>/armbian/qbittorrent</code></li> <li>Site configuration directory: <code>/armbian/qbittorrent/config</code></li> <li>Download directory: <code>/armbian/qbittorrent/downloads</code></li> </ul> Bash<pre><code>docker logs -f qbittorrent\n</code></pre> qBittorrent remove:<pre><code>armbian-config --cmd DOW002\n</code></pre> qBittorrent purge with data folder:<pre><code>armbian-config --cmd DOW003\n</code></pre> Prowlarr:<pre><code>armbian-config --cmd DOW025\n</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 9696:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:9696</code></li> <li>Username/Password: admin / generate at first web interface login</li> </ul> <ul> <li>Install directory: <code>/armbian/prowlarr</code></li> <li>Site configuration directory: <code>/armbian/prowlarr/config</code></li> </ul> Bash<pre><code>docker logs -f prowlarr\n</code></pre> Prowlarr remove:<pre><code>armbian-config --cmd DOW026\n</code></pre> Prowlarr purge with data folder:<pre><code>armbian-config --cmd DOW027\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#jellyseerr","title":"Jellyseerr","text":"<p>Jellyseerr Jellyfin/Emby/Plex integration install</p> <p></p> <p>Jellyseerr is a free and open source software application for managing requests for your media library. It is a fork of Overseerr built to bring support for Jellyfin &amp; Emby media servers!</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd JEL001</code></pre> Jellyseerr remove:<pre><code>armbian-config --cmd JEL002\n</code></pre> Jellyseerr purge with data folder:<pre><code>armbian-config --cmd JEL003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#lidarr","title":"Lidarr","text":"<p>Lidarr automatic music downloader</p> <p></p> <p>Lidarr is a music collection manager for Usenet and BitTorrent users. It can monitor multiple RSS feeds for new tracks from your favorite artists and will grab, sort and rename them. It can also be configured to automatically upgrade the quality of files already downloaded when a better quality format becomes available.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd LID001</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 8686:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:8686</code></li> <li>Username/Password: admin / generate at first web interface login</li> </ul> <ul> <li>Install directory: <code>/armbian/lidarr</code></li> <li>Site configuration directory: <code>/armbian/lidarr/config</code></li> <li>Download directory: <code>/armbian/lidarr/downloads</code> <code>/armbian/lidarr/music</code></li> </ul> Bash<pre><code>docker logs -f lidarr\n</code></pre> Lidarr remove:<pre><code>armbian-config --cmd LID002\n</code></pre> Lidarr purge with data folder:<pre><code>armbian-config --cmd LID003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#medusa","title":"Medusa","text":"<p>Medusa automatic downloader for TV shows</p> <p>Medusa is an automatic Video Library Manager for TV Shows. It watches for new episodes of your favorite shows, and when they are posted it does its magic.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd MDS001</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 8081:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:8081</code></li> </ul> <ul> <li>Install directory: <code>/armbian/medusa</code></li> <li>Site configuration directory: <code>/armbian/medusa/config</code></li> <li>Download directory: <code>/armbian/medusa/downloads</code></li> <li>Download directory TV shows: <code>/armbian/medusa/downloads/tv</code></li> </ul> Bash<pre><code>docker logs -f medusa\n</code></pre> Medusa TV shows downloader remove:<pre><code>armbian-config --cmd MDS002\n</code></pre> Medusa TV shows downloader purge:<pre><code>armbian-config --cmd MDS003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#radarr","title":"Radarr","text":"<p>Radarr automatic downloader for movies</p> <p></p> <p>Radarr - A fork of Sonarr to work with movies \u00e0 la Couchpotato.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd RAD001</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 7878:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:7878</code></li> <li>Username/Password: admin / generate at first web interface login</li> </ul> <ul> <li>Install directory: <code>/armbian/radarr</code></li> <li>Site configuration directory: <code>/armbian/radarr/config</code></li> <li>Download directory: <code>/armbian/radarr/movies</code></li> <li>Client download directory: <code>/armbian/radarr/client</code></li> </ul> Bash<pre><code>docker logs -f radarr\n</code></pre> Radarr remove:<pre><code>armbian-config --cmd RAD002\n</code></pre> Radarr purge with data folder:<pre><code>armbian-config --cmd RAD003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#readarr","title":"Readarr","text":"<p>Readarr automatic downloader for Ebooks</p> <p></p> <p>Readarr - Book Manager and Automation (Sonarr for Ebooks)</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd RDR001</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 8787:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:8787</code></li> <li>Username/Password: admin / generate at first web interface login</li> </ul> <ul> <li>Install directory: <code>/armbian/readarr</code></li> <li>Site configuration directory: <code>/armbian/readarr/config</code></li> <li>Download directory: <code>/armbian/readarr/books</code> <code>/armbian/readarr/client</code></li> </ul> Bash<pre><code>docker logs -f readarr\n</code></pre> Readarr remove:<pre><code>armbian-config --cmd RDR002\n</code></pre> Readarr purge with data folder:<pre><code>armbian-config --cmd RDR003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#sabnzbd","title":"SABnzbd","text":"<p>SABnzbd newsgroup downloader</p> <p></p> <p>Sabnzbd\u2060 makes Usenet as simple and streamlined as possible by automating everything we can. All you have to do is add an .nzb. SABnzbd takes over from there, where it will be automatically downloaded, verified, repaired, extracted and filed away with zero human interaction.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd SABN01</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 8080:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:8080</code></li> <li>Username/Password: admin / generate at first web interface login</li> </ul> <ul> <li>Install directory: <code>/armbian/sabnzbd</code></li> <li>Site configuration directory: <code>/armbian/sabnzbd/config</code></li> <li>Download directory: <code>/armbian/sabnzbd/downloads</code></li> <li>Incomplete downloads: <code>/armbian/sabnzbd/incomplete</code></li> </ul> Bash<pre><code>docker logs -f sabnzbd\n</code></pre> SABnzbd remove:<pre><code>armbian-config --cmd SABN02\n</code></pre> SABnzbd purge with data folder:<pre><code>armbian-config --cmd SABN03\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#sonarr","title":"Sonarr","text":"<p>Sonarr automatic downloader for TV shows</p> <p></p> <p>Sonarr (formerly NZBdrone) is a PVR for usenet and bittorrent users. It can monitor multiple RSS feeds for new episodes of your favorite shows and will grab, sort and rename them. It can also be configured to automatically upgrade the quality of files already downloaded when a better quality format becomes available.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd SON001</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 8989:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:8989</code></li> </ul> <ul> <li>Install directory: <code>/armbian/sonarr</code></li> <li>Site configuration directory: <code>/armbian/sonarr/config</code></li> <li>Download directory: <code>/armbian/sonarr/tvseries</code></li> <li>Client download directory: <code>/armbian/sonarr/client</code></li> </ul> Bash<pre><code>docker logs -f sonarr\n</code></pre> Sonarr remove:<pre><code>armbian-config --cmd SON002\n</code></pre> Sonarr purge with data folder:<pre><code>armbian-config --cmd SON003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#transmission","title":"Transmission","text":"<p>Transmission BitTorrent client</p> <p></p> <p>Transmission\u2060 is designed for easy, powerful use. Transmission has the features you want from a BitTorrent client: encryption, a web interface, peer exchange, magnet links, DHT, \u00b5TP, UPnP and NAT-PMP port forwarding, webseed support, watch directories, tracker editing, global and per-torrent speed limits, and more.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd TRA001</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 9091:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:9091</code></li> <li>Username/Password: admin / generate at first web interface login</li> </ul> <ul> <li>Install directory: <code>/armbian/transmission</code></li> <li>Site configuration directory: <code>/armbian/transmission/config</code></li> <li>Download directory: <code>/armbian/transmission/downloads</code></li> <li>Watch directory: <code>/armbian/transmission/watch</code></li> </ul> Bash<pre><code>docker logs -f transmission\n</code></pre> Transmission remove:<pre><code>armbian-config --cmd TRA002\n</code></pre> Transmission purge with data folder:<pre><code>armbian-config --cmd TRA003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#manage-your-finances","title":"Manage your finances","text":"<p>Edit: footer header </p>"},{"location":"User-Guide_Armbian-Software/Software/#actual-budget","title":"Actual Budget","text":"<p>Do your finances with Actual Budget</p> <p></p> <p>Actual Budget is a free, open-source personal finance app built around the envelope budgeting method.</p> <ul> <li>Privacy-focused: Users can self-host their data or use encrypted cloud syncing.</li> <li>Key Features:<ul> <li>Multi-account tracking</li> <li>Transaction importing</li> <li>Customizable financial reports</li> <li>Optional syncing via services like PikaPods</li> </ul> </li> <li>Ideal for: Those who want a transparent, self-hosted alternative to proprietary budgeting tools.</li> </ul> <p>Edit: footer header Status: Stable Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd ABU001</code></pre> <p>Warning: HTTPS Certificate Required</p> <p>After initially installing the Actual server, you might get stuck at the step: \u201cInitializing the connection to the local database\u2026\u201d</p> <p>The issue is due to the server not having an HTTPS certificate. After activating an HTTPS certificate for the Actual server, everything should work fine.</p> <p>If you still encounter issues even after setting up HTTPS, we highly recommend reaching out to the Actual Budget Discord server \u2014 the developers and community there are very kind and helpful.</p> Actual Budget remove:<pre><code>armbian-config --cmd ABU002\n</code></pre> Actual Budget purge with data folder:<pre><code>armbian-config --cmd ABU003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#home-automation-for-control-home-appliances","title":"Home Automation for control home appliances","text":"<p>Edit: footer header </p>"},{"location":"User-Guide_Armbian-Software/Software/#domoticz","title":"Domoticz","text":"<p>Domoticz open source home automation</p> <p></p> <p>Domoticz is an open-source home automation platform that allows you to control and monitor smart devices in your home. It supports a wide range of devices, including lights, sensors, thermostats, and cameras. Through its web interface or mobile app, you can set up automation rules and schedules, providing greater convenience and energy efficiency. It\u2019s customizable, flexible, and can be run on a variety of hardware platforms supported by Armbian.</p> Access to the web interfaceDirectoriesAdvanced setup <p>The web interface is accessible via port 8080:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:8080</code></li> <li>Username/Password: admin / domoticz</li> </ul> <ul> <li>Config directory: <code>/armbian/domoticz</code></li> </ul> <ul> <li>Primary USB device passing through (<code>/dev/ttyUSB0</code>) to Docker container is enabled by default</li> <li>For more complex setup, please follow this comprehensive guide: https://wiki.domoticz.com/Main_Page</li> </ul> <p>Edit: footer header Status: Preview Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd DOM001</code></pre> Domoticz remove:<pre><code>armbian-config --cmd DOM002\n</code></pre> Domoticz purge with data folder:<pre><code>armbian-config --cmd DOM003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#evcc","title":"EVCC","text":"<p>EVCC - solar charging automation</p> <p></p> <p>evcc is an energy management system with a focus on electromobility. The software controls your EV charger or smart plug. It communicates with your vehicle, inverter or home storage to make intelligent charging decisions. The software is open source and community-driven.</p> <p>Edit: footer header Status: Preview Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd EVCC01</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 7070:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:7070</code></li> <li>Admin password is generated at first web interface login</li> </ul> <ul> <li>Install directory: <code>/armbian/evcc</code></li> <li>Site configuration directory: <code>/armbian/evcc/evcc.yaml</code></li> </ul> Bash<pre><code>docker logs -f evcc\n</code></pre> EVCC - solar charging automation remove:<pre><code>armbian-config --cmd EVCC02\n</code></pre> EVCC purge with data folder:<pre><code>armbian-config --cmd EVCC03\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#openhab","title":"openHAB","text":"<p>openHAB empowering the smart home</p> <p></p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 armhf Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd HAB001</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 8444:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:8444</code></li> <li>Username/Password: Are set at first web interface login</li> </ul> <ul> <li>Install directory: <code>/usr/share/openhab</code></li> <li>Site configuration directory: <code>/etc/openhab</code></li> <li>Config file: <code>/etc/default/openhab</code></li> <li>Data directory: <code>/var/lib/openhab</code></li> </ul> <p>See also openHAB file locations.</p> Bash<pre><code>journalctl -u openhab\n</code></pre> openHAB remove:<pre><code>armbian-config --cmd HAB002\n</code></pre> openHAB purge with data folder:<pre><code>armbian-config --cmd HAB003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#home-assistant","title":"Home Assistant","text":"<p>Home Assistant open source home automation</p> <p></p> <p>Home Assistant is an open source smart home platform that allows you to connect your smart home devices like your TV, fan, cameras, thermostats, lights, and sensors. As a user, you can build intricate automation using Home Assistant\u2019s user-friendly, unified web-based user interface.</p> <p>Perfect to run on any single board computer with 4 cores and at least 512Mb of memory. Armbian installation is optimised to run from SD/eMMC media, but it is recommended to use SSD.</p> <p>Limited support</p> <p>The supervised installation method on Armbian is not officially supported by the Home Assistant project. Additionally, installation on hardware that is not officially supported is also outside the scope of support provided by the Armbian team.</p> <p>You are welcome to report high-level application issues that are reproducible on the official Home Assistant Operating System (HAOS) within the Home Assistant Community. For any topics related to single-board computer hardware, you may use the Armbian Community Forums; however, please be aware that official support from the Armbian team is not guaranteed.</p> <p>While the Home Assistant team is planning to deprecate the Supervised installation method, the Armbian team will continue to provide and maintain the supervised installation method as long as automated installation tests remain successful and the maintenance effort remains reasonable.</p> <p>Edit: footer header Status: Preview Architecture: x86-64 arm64 armhf Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd HAS001</code></pre> Access to the web interfaceDirectoriesArmbian advantages <p>The web interface is accessible via port 8123:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:8123</code></li> <li>Username/Password: Are set at first web interface login</li> </ul> <p>Home Assistant on Armbian runs supervised in a Docker container. This secures same functionality as stock HAOS.</p> <ul> <li>Config directory: <code>/armbian/haos</code></li> </ul> Functionality HAOS Armbian with HA Automations Dashboards Integrations Add-ons One-click updates Backups General purpose server Running on exotic hardware Home Assistant remove:<pre><code>armbian-config --cmd HAS002\n</code></pre> Home Assistant purge with data folder:<pre><code>armbian-config --cmd HAS003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#remote-file-management-tools","title":"Remote File &amp; Management tools","text":"<p>Edit: footer header </p>"},{"location":"User-Guide_Armbian-Software/Software/#cockpit","title":"Cockpit","text":"<p>Cockpit web-based management tool</p> <p></p> <p>Introducing Cockpit Cockpit is a web-based graphical interface for servers, intended for everyone, especially those who are:</p> <ul> <li>new to Linux (including Windows admins)</li> <li>familiar with Linux and want an easy, graphical way to administer servers</li> <li>expert admins who mainly use other tools but want an overview on individual systems</li> </ul> <p>Thanks to Cockpit intentionally using system APIs and commands, a whole team of admins can manage a system in the way they prefer, including the command line and utilities right alongside Cockpit.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 aarch64 armhf riscv64 Maintainer: @armbian Documentation: Link </p> <pre><code>armbian-config --cmd CPT001</code></pre> Access to the web interfaceVideo instructions <p>The web interface is accessible via port 9090:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:9090</code></li> <li>Username/Password: your system login credentials</li> </ul> <p></p>"},{"location":"User-Guide_Armbian-Software/Software/#homepage","title":"Homepage","text":"<p>Install Homepage startpage / application dashboard</p> <p></p> <p>gethomepage is a fast, fully static, highly customizable application dashboard built for modern self-hosted environments. With a fully proxied architecture and zero runtime, it delivers exceptional speed, security, and simplicity for organizing and accessing your services.</p> <p>It supports over 100 service integrations and multiple languages, offering live status displays and dynamic resource monitoring out-of-the-box. Configuration is effortless via YAML files or automatic Docker label discovery, making setup and management seamless.</p> <p>Key Features</p> <ul> <li>Static Frontend: Blazing-fast performance with no server-side runtime.</li> <li>Secure Proxying: Safely access internal services without direct exposure.</li> <li>Service Integrations: Native support for Docker, Kubernetes, Grafana, Proxmox, Home Assistant, and more.</li> <li>Easy Configuration: Manage layout and services with YAML or Docker labels.</li> <li>Internationalization: Translations available for multiple languages.</li> <li>Flexible Theming: Personalize with themes, layouts, and styling.</li> <li>Simple Deployment: Host via Docker, Kubernetes, or any static hosting platform.</li> </ul> <p>Whether you\u2019re running a small homelab or a full server fleet, gethomepage offers a sleek, powerful, and secure way to stay organized.</p> <p>Edit: footer header Status: Stable Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd HPG001</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 3000:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:3000</code></li> <li>Username/Password: none</li> </ul> <p>Configuration: Please reffer to official manual https://gethomepage.dev/configs/</p> <ul> <li>Install directory: <code>/armbian/homepage</code></li> <li>Site configuration directory: <code>/armbian/homepage/config</code></li> </ul> Bash<pre><code>docker logs -f homepage\n</code></pre> Remove Homepage:<pre><code>armbian-config --cmd HPG002\n</code></pre> Purge Homepage with data folder:<pre><code>armbian-config --cmd HPG003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#netbox","title":"NetBox","text":"<p>NetBox infrastructure resource modeling install</p> <p></p> <p>NetBox is an open-source infrastructure resource modeling (IRM) tool used for managing and documenting networks and data center assets.</p> <p>Requirements (installed automatically)</p> <ul> <li>Redis</li> <li>Postgres SQL</li> </ul> <p>Key Features</p> <ul> <li>IP Address Management (IPAM): Track IP networks, addresses, and VRFs.</li> <li>Data Center Infrastructure Management (DCIM): Model racks, devices, connections, and more.</li> <li>Secrets Management: Securely store credentials and other sensitive data.</li> <li>Extensible API &amp; Webhooks: Integrate with external systems.</li> <li>Custom Fields &amp; Scripts: Tailor NetBox to fit your organization\u2019s needs.</li> </ul> <p>Originally developed by DigitalOcean, NetBox is widely adopted by network engineers and sysadmins to maintain source-of-truth data for automation.</p> <p>Official Website</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd NBOX01</code></pre> Access to the serviceDefault credentialsDirectoriesView logsManage the service <p>NetBox is accessible via HTTP on port 8000:</p> <ul> <li>URL: <code>http://&lt;your.IP&gt;:8000</code></li> <li>API root: <code>http://&lt;your.IP&gt;:8000/api/</code></li> </ul> <ul> <li>Username: <code>admin</code></li> <li>Password: (set during setup)</li> <li>API token: Generate in the UI or via Django shell</li> </ul> <ul> <li>Configuration: <code>/armbian/netbox/config/</code></li> <li>Scripts: <code>/armbian/netbox/scripts/</code></li> <li>Reports: <code>/armbian/netbox/reports/</code></li> </ul> Bash<pre><code>docker logs -f netbox\n</code></pre> Bash<pre><code>docker exec -it netbox bash\n</code></pre> NetBox remove:<pre><code>armbian-config --cmd NBOX02\n</code></pre> NetBox purge with data folder:<pre><code>armbian-config --cmd NBOX03\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#samba","title":"Samba","text":"<p>SAMBA Remote File share</p> <p></p> <p>Samba is an open-source software suite that enables seamless file and printer sharing between Linux/Unix servers and Windows clients. It allows a Linux machine to act as a domain controller, file server, or print server within a Windows network environment, supporting cross-platform interoperability.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 aarch64 armhf riscv64 Maintainer: @armbian Documentation: Link </p> <pre><code>armbian-config --cmd SMB001</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#webmin","title":"Webmin","text":"<p>Webmin web-based management tool</p> <p></p> <p>Webmin is a web-based system administration tool for Unix-like servers. It provides an easy-to-use browser interface to manage users, configure services, edit files, monitor system performance, and control almost every aspect of your server \u2014 without needing to touch the command line.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 aarch64 armhf riscv64 Maintainer: @armbian Documentation: Link </p> <pre><code>armbian-config --cmd WBM001</code></pre> Access to the web interface <p>The web interface is accessible via port 10000:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:10000</code></li> <li>Username/Password: your system login credentials</li> </ul>"},{"location":"User-Guide_Armbian-Software/Software/#media-servers-organizers-and-editors","title":"Media servers, organizers and editors","text":"<p>Edit: footer header </p>"},{"location":"User-Guide_Armbian-Software/Software/#emby","title":"Emby","text":"<p>Emby organizes video, music, live TV, and photos</p> <p></p> <p>Emby organizes video, music, live TV, and photos from personal media libraries and streams them to smart TVs, streaming boxes and mobile devices. This container is packaged as a standalone emby Media Server.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @schwar3kat Documentation: Link </p> <pre><code>armbian-config --cmd EMB001</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 8096:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:8096</code></li> </ul> <ul> <li>Install directory: <code>/armbian/emby</code></li> <li>Site configuration directory: <code>/armbian/emby/config</code></li> <li>Data directory: <code>/armbian/emby/tvshows</code> <code>/armbian/emby/movies</code></li> </ul> Bash<pre><code>docker logs -f emby\n</code></pre> Emby server remove:<pre><code>armbian-config --cmd EMB002\n</code></pre> Emby server purge with data folder:<pre><code>armbian-config --cmd EMB003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#filebrowser","title":"Filebrowser","text":"<p>Filebrowser provides a web-based file manager accessible via a browser</p> <p></p> <p>Filebrowser is a lightweight, web-based file manager that gives you direct access to your files from any browser. It allows users to upload, delete, preview, rename, and organize files and folders \u2014 all through a clean, responsive interface.</p> <p>Key Features</p> <ul> <li>Modern and intuitive web interface</li> <li>User management with role-based access</li> <li>File uploads, downloads, sharing, and previews</li> <li>Custom branding support</li> <li>Configurable directory access</li> <li>Runs as a single binary or Docker container</li> </ul> <p>Official site: https://filebrowser.org</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd FIL001</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 8095:</p> <ul> <li>URL: <code>http://&lt;your.IP&gt;:8095</code></li> <li>Username/Password: admin / admin</li> </ul> <ul> <li>Install directory: <code>/armbian/filebrowser</code></li> <li>Root directory: <code>/armbian/filebrowser/srv</code></li> <li>Database directory: <code>/armbian/filebrowser/database</code></li> <li>Configuration file: <code>/armbian/filebrowser/filebrowser.json</code></li> <li>Branding directory: <code>/armbian/filebrowser/branding</code></li> </ul> Bash<pre><code>docker logs -f filebrowser\n</code></pre> Filebrowser container remove:<pre><code>armbian-config --cmd FIL002\n</code></pre> Filebrowser container purge with data folder:<pre><code>armbian-config --cmd FIL003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#hastebin","title":"Hastebin","text":"<p>Hastebin Paste Server</p> <p></p> <p>Hastebin is a fast and simple self-hosted pastebin server. It allows users to quickly share text snippets like logs, code, or notes via a web interface or API. Hastebin is lightweight, easy to deploy with Docker, and ideal for teams needing private, temporary paste storage.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @efectn Documentation: Link </p> <pre><code>armbian-config --cmd HPS001</code></pre> Hastebin remove:<pre><code>armbian-config --cmd HPS002\n</code></pre> Hastebin purge with data folder:<pre><code>armbian-config --cmd HPS003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#immich","title":"Immich","text":"<p>Immich - high-performance self-hosted photo and video backup solution</p> <p></p> <p>Immich is a self-hosted photo and video backup solution, designed for individuals and families who want:</p> <ul> <li>An alternative to cloud-based services like Google Photos or iCloud  </li> <li>A private, secure place to store, browse, and share memories  </li> <li>Powerful features like automatic mobile uploads, facial recognition, and search  </li> <li>A modern, responsive web and mobile interface for easy access</li> </ul> <p>Thanks to Immich being built with modern technologies like NestJS, TypeScript, and machine learning integrations, users enjoy a smooth, intelligent media experience. Whether you\u2019re a casual user backing up phone photos or a tech-savvy person managing media across multiple devices, Immich provides the flexibility and control of a cloud solution\u2014on your own server.</p> <p>Summary</p> <ul> <li>Immich is ideal if you want full privacy, open-source flexibility, and control over your data.</li> <li>Google Photos is convenient and polished but comes with trade-offs in privacy and cost at scale.</li> <li>Synology Photos fits well in homes or small offices already using Synology NAS systems, offering good performance with integrated features.</li> </ul> <p>Edit: footer header Status: Preview Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd IMM001</code></pre> Access to the serviceDefault credentialsDirectoriesView logsImmich vs Google Photos vs Synology Photos <p>Immich is accessible via HTTP on port 8077:</p> <ul> <li>URL: <code>http://&lt;your.IP&gt;:8077</code></li> </ul> <ul> <li>Email: (set during initial setup)</li> <li>Password: (set during initial setup)</li> </ul> <ul> <li>Uploads: <code>/armbian/immich/photos/upload/</code></li> <li>Thumbnails: <code>/armbian/immich/photos/thumbs/</code></li> <li>Profile images: <code>/armbian/immich/photos/profile/</code></li> <li>Library: <code>/armbian/immich/photos/library/</code></li> <li>Encoded videos: <code>/armbian/immich/photos/encoded-video/</code></li> <li>Backups: <code>/armbian/immich/photos/backups/</code></li> </ul> Bash<pre><code>docker logs -f immich\n</code></pre> Feature / Aspect Immich Google Photos Synology Photos Hosting Self-hosted Cloud (Google infrastructure) Self-hosted (on Synology NAS) Privacy &amp; Control Full control, private data storage Data stored and analyzed by Google Full control within your NAS environment Automatic Uploads Yes (via mobile app) Yes (via mobile app) Yes (via mobile app or Synology Drive) Facial Recognition Yes (on-device) Yes (cloud-based) Yes (on-device) Object &amp; Scene Detection Yes (limited but improving) Yes (advanced AI) Yes (basic) Web Interface Yes (modern and responsive) Yes Yes Mobile Apps Yes (iOS &amp; Android) Yes (iOS &amp; Android) Yes (iOS &amp; Android) Albums &amp; Sharing Yes (with public and private sharing) Yes (advanced sharing options) Yes Multi-user Support Yes Limited (mostly single user) Yes (multi-user, tied to NAS users) Backup Original Quality Yes (no compression) Only with paid storage Yes (NAS dependent) Offline Access Limited (depends on app setup) Yes (with sync) Yes Open Source Yes No No Hardware Requirement Any Docker-capable server or NAS N/A (runs on Google\u2019s cloud) Synology NAS required Price Free (self-hosted, you pay for hardware) Free (with limitations) / Paid for storage Included with NAS, hardware cost required Immich remove:<pre><code>armbian-config --cmd IMM002\n</code></pre> Immich purge with data folder:<pre><code>armbian-config --cmd IMM003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#jellyfin","title":"Jellyfin","text":"<p>Jellyfin Media System</p> <p></p> <p>Jellyfin is a Free Software Media System that puts you in control of managing and streaming your media. It is an alternative to the proprietary Emby and Plex, to provide media from a dedicated server to end-user devices via multiple apps. Jellyfin is descended from Emby\u2019s 3.5.2 release and ported to the .NET Core framework to enable full cross-platform support. There are no strings attached, no premium licenses or features, and no hidden agendas: just a team who want to build something better and work together to achieve it.</p> <p>Edit: footer header Status: Preview Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd JMS001</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 8096:</p> <ul> <li>URL: <code>http://&lt;your.IP&gt;:8096</code></li> <li>Username and password are set at first login</li> </ul> <ul> <li>Install directory: <code>/armbian/jellyfin</code></li> <li>Site configuration directory: <code>/armbian/jellyfin/config</code></li> <li>TV shows directory: <code>/armbian/jellyfin/tvseries</code></li> <li>Movies directory: <code>/armbian/jellyfin/movies</code></li> </ul> Bash<pre><code>docker logs -f jellyfin\n</code></pre> Jellyfin remove:<pre><code>armbian-config --cmd JMS002\n</code></pre> Jellyfin purge with data folder:<pre><code>armbian-config --cmd JMS003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#navidrome","title":"Navidrome","text":"<p>Navidrome music server and streamer compatible with Subsonic/Airsonic</p> <p></p> <p>Navidrome is a modern, lightweight, and self-hosted music server and streamer. It\u2019s designed to be compatible with the Subsonic and Airsonic APIs, making it a drop-in replacement for users of those systems. With Navidrome, you can stream your personal music collection from anywhere using any compatible Subsonic client (mobile or desktop). It supports multi-user access, real-time updates, album artwork, and is built with performance and simplicity in mind\u2014perfect for organizing and accessing large music libraries.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd NAV001</code></pre> Navidrome remove:<pre><code>armbian-config --cmd NAV002\n</code></pre> Navidrome purge with data folder:<pre><code>armbian-config --cmd NAV003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#nextcloud","title":"Nextcloud","text":"<p>Nextcloud content collaboration platform</p> <p></p> <p>Nextcloud gives you access to all your files wherever you are. Where are your photos and documents? With Nextcloud you pick a server of your choice, at home, in a data center or at a provider. And that is where your files will be. Nextcloud runs on that server, protecting your data and giving you access from your desktop or mobile devices. Through Nextcloud you also access, sync and share your existing data on that FTP drive at the office, a Dropbox or a NAS you have at home.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd NCT001</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 443:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:443</code></li> <li>Username/Password: admin / generate at first web interface login</li> </ul> <ul> <li>Install directory: <code>/armbian/nextcloud</code></li> <li>Site configuration directory: <code>/armbian/nextcloud/config</code></li> <li>Data directory: <code>/armbian/nextcloud/data</code></li> </ul> Bash<pre><code>docker logs -f nextcloud\n</code></pre> Nextcloud remove:<pre><code>armbian-config --cmd NCT002\n</code></pre> Nextcloud purge with data folder:<pre><code>armbian-config --cmd NCT003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#omv","title":"OMV","text":"<p>Deploy NAS using OpenMediaVault</p> <p></p> <p>OpenMediaVault (OMV) is a powerful, open-source network-attached storage (NAS) operating system built on the Debian Linux distribution. It is designed to provide a simple and intuitive web-based interface for managing storage devices and network services, making it ideal for home users, small offices, and even advanced users looking for a customizable and efficient NAS solution.</p> <p>OMV supports a wide range of features, including various file systems (EXT4, XFS, BTRFS, etc.), software RAID configurations, scheduled backups, and user and group management. It offers support for common network protocols such as SMB/CIFS (Windows file sharing), NFS, FTP, and SSH, enabling seamless file access across different platforms.</p> <p>Through its modular design, OpenMediaVault can be easily extended with plugins, allowing users to add functionality like Docker support, media servers, cloud synchronization tools, BitTorrent clients, and more. The system is designed for stability and ease of use, with regular updates and a strong community supporting development and troubleshooting.</p> <p>Whether used on a dedicated server, a Raspberry Pi, or virtualized hardware, OMV provides a flexible and reliable way to build your own custom NAS.  </p> <p>Warning: installation works only on Debian (bookworm) based Armbian image.</p> <p>Edit: footer header Status: Stable Architecture: amd64 arm64 armhf Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd OMV001</code></pre> Access to the web interfaceDirectoriesUsagePlugins and Add-onsView logs <p>The OpenMediaVault web interface is accessible via the default HTTP port:</p> <ul> <li>URL: <code>http://&lt;your.IP&gt;:80</code></li> <li>Username/Password: admin / openmediavault (change after first login)</li> </ul> <ul> <li>Default config directory: <code>/etc/openmediavault/</code></li> <li>Shared folders base path: <code>/srv/dev-disk-by-.../</code></li> <li>Plugin data directories may vary by service (e.g., Docker, SMB, etc.)</li> </ul> <ul> <li>Use the web interface to configure storage, users, services, and plugins</li> <li>Create shared folders and enable SMB/NFS to access files over the network</li> <li>Monitor system status, performance, and logs from the dashboard</li> </ul> <p>OpenMediaVault supports a wide range of community plugins:</p> <ul> <li>Docker support via <code>openmediavault-compose</code> or <code>omv-extras</code></li> <li>Media servers (e.g., Plex, Jellyfin)</li> <li>Backup tools (e.g., rsync, USB backup)</li> <li>Cloud sync (e.g., Rclone)</li> </ul> <p>Install plugins through the web interface after enabling OMV-Extras.</p> Bash<pre><code>journalctl -u openmediavault-engined\ntail -f /var/log/syslog\n</code></pre> OpenMediaVault remove:<pre><code>armbian-config --cmd OMV002\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#owncloud","title":"Owncloud","text":"<p>Owncloud share files and folders, easy and secure</p> <p></p> <p>ownCloud is a free and open-source software project for content collaboration and sharing and syncing of files in distributed and federated enterprise scenarios.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd OWC001</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 7787:</p> <ul> <li>URL: <code>http://&lt;your.IP&gt;:7787</code></li> <li>Username/Password: admin / admin</li> </ul> <ul> <li>Install directory: <code>/armbian/owncloud</code></li> <li>Site configuration directory: <code>/armbian/owncloud/config</code></li> <li>Data directory: <code>/armbian/owncloud/data</code></li> </ul> Bash<pre><code>docker logs -f owncloud\n</code></pre> Owncloud remove:<pre><code>armbian-config --cmd OWC002\n</code></pre> Owncloud purge with data folder:<pre><code>armbian-config --cmd OWC003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#syncthing","title":"Syncthing","text":"<p>Syncthing continuous file synchronization</p> <p></p> <p>Syncthing replaces proprietary sync and cloud services with something open, trustworthy and decentralized. Your data is your data alone and you deserve to choose where it is stored, if it is shared with some third party and how it\u2019s transmitted over the Internet.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd STC001</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 8884:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:8884</code></li> <li>Username/Password: There is none, but it is highly suggested setting a password for this container. To do this go to Actions -&gt; Settings -&gt; set user/password for the webUI.</li> </ul> <ul> <li>Install directory: <code>/armbian/syncthing</code></li> <li>Site configuration directory: <code>/armbian/syncthing/config</code></li> <li>Data directory: <code>/armbian/syncthing/data1</code> <code>/armbian/syncthing/data2</code></li> </ul> Bash<pre><code>docker logs -f syncthing\n</code></pre> Syncthing remove:<pre><code>armbian-config --cmd STC002\n</code></pre> Syncthing purge with data folder:<pre><code>armbian-config --cmd STC003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#stirling","title":"Stirling","text":"<p>Stirling PDF tools for viewing and editing PDF files</p> <p></p> <p>Stirling-PDF is a robust, locally hosted web-based PDF manipulation tool using Docker. It enables you to carry out various operations on PDF files, including splitting, merging, converting, reorganizing, adding images, rotating, compressing, and more. This locally hosted web application has evolved to encompass a comprehensive set of features, addressing all your PDF requirements.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd STR001</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 8077:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:8077</code></li> </ul> <ul> <li>Install directory: <code>/armbian/stirling</code></li> </ul> Bash<pre><code>docker logs -f stirling-pdf\n</code></pre> Stirling PDF remove:<pre><code>armbian-config --cmd STR002\n</code></pre> Stirling PDF purge with data folder:<pre><code>armbian-config --cmd STR003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#real-time-monitoring-collecting-metrics-up-time-status","title":"Real-time monitoring, collecting metrics, up-time status","text":"<p>Edit: footer header </p>"},{"location":"User-Guide_Armbian-Software/Software/#grafana","title":"Grafana","text":"<p>Grafana data analytics</p> <p></p> <p>Grafana is a multi-platform open source analytics and interactive visualization web application. It can produce charts, graphs, and alerts for the web when connected to supported data sources.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd GRA001</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 3000:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:3000</code></li> </ul> <ul> <li>Install directory: <code>/armbian/grafana</code></li> </ul> Bash<pre><code>docker logs -f grafana\n</code></pre> Grafana remove:<pre><code>armbian-config --cmd GRA002\n</code></pre> Grafana purge with data folder:<pre><code>armbian-config --cmd GRA003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#netalertx","title":"NetAlertX","text":"<p>NetAlertX network scanner &amp; notification framework</p> <p></p> <p>NetAlertX is an open-source network monitoring and intruder detection tool designed to provide visibility into your Wi-Fi or LAN network. It scans your network for connected devices and alerts you when new or unknown devices are detected, helping you monitor unauthorized access and maintain network security.</p> <p>Key Features:</p> <ul> <li>Scheduled Network Scans: Regularly scans your network to detect new devices, reconnections, disconnections, and changes in IP addresses.</li> </ul> <ul> <li>Extensive Notification Support: Integrates with over 80 notification services, including email, Telegram, Pushover, and NTFY, ensuring you receive timely alerts about network changes.</li> </ul> <ul> <li>Network Visualization: Offers a user-friendly interface to visualize your entire network, enhancing security and simplifying management.</li> </ul> <ul> <li>Multi-Network Monitoring: Supports synchronization of multiple network instances, providing cross-network visibility across various device manufacturers.</li> </ul> <ul> <li>Home Assistant Integration: Seamlessly integrates with Home Assistant, enabling advanced automation workflows and smart home integrations.</li> </ul> <ul> <li>Customizable Plugins: Allows users to develop custom plugins with auto-generated user interfaces and built-in notification systems, tailoring the tool to specific network monitoring needs.</li> </ul> <p>NetAlertX is actively maintained and supports various installation methods, including Docker and bare-metal setups. It serves as a proactive solution for maintaining network health and preventing issues before they escalate, providing peace of mind for individuals and small businesses alike.</p> <p>For more information and installation guides, visit the official NetAlertX documentation. </p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 armhf Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd NAX001</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 20211:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:20211</code></li> </ul> <ul> <li>Config directory: <code>/armbian/netalertx/config</code></li> </ul> Bash<pre><code>docker logs -f netalertx\n</code></pre> NetAlertX network scanner remove:<pre><code>armbian-config --cmd NAX002\n</code></pre> NetAlertX network scanner purge with data folder:<pre><code>armbian-config --cmd NAX003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#netdata","title":"Netdata","text":"<p>Netdata - monitoring real-time metrics</p> <p></p> <p>Netdata is a partially open source tool designed to collect real-time metrics, such as CPU usage, disk activity, bandwidth usage, website visits, etc., and then display them in live, easy-to-interpret charts.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd NTD001</code></pre> Netdata remove:<pre><code>armbian-config --cmd NTD002\n</code></pre> Netdata purge with data folder:<pre><code>armbian-config --cmd NTD003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#prometheus","title":"Prometheus","text":"<p>Prometheus docker image</p> <p></p> <p>Prometheus is an open-source monitoring and alerting toolkit designed for reliability and scalability. It collects and stores time-series data, provides powerful query capabilities, and enables real-time alerts based on defined conditions. Commonly used in cloud and containerized environments, Prometheus integrates seamlessly with Kubernetes and other modern infrastructure.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @efectn Documentation: Link </p> <pre><code>armbian-config --cmd PRO001</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 9090:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:9090</code></li> </ul> <ul> <li>Config directory: <code>/armbian/prometheus</code></li> </ul> Bash<pre><code>docker logs -f prometheus\n</code></pre> Prometheus remove:<pre><code>armbian-config --cmd PRO002\n</code></pre> Prometheus purge with data folder:<pre><code>armbian-config --cmd PRO003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#uptime-kuma","title":"Uptime Kuma","text":"<p>Uptime Kuma self-hosted monitoring tool</p> <p></p> <p>Uptime Kuma is a self-hosted monitoring tool similar to \"Uptime Robot\".  It provides a beautiful, easy-to-use web dashboard to monitor HTTP(s), TCP, Ping, and more types of services.</p> <p>You can receive instant notifications when a service goes down via Telegram, Discord, Slack, email, and many other integrations.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd UPK001</code></pre> Access to the web interfaceFeatures <p>The web interface is accessible via port 3001:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:3001</code></li> <li>Username/Password: Are set at first web interface login</li> </ul> <ul> <li>Monitoring uptime for HTTP(s) / TCP / HTTP(s) Keyword / HTTP(s) Json Query / Ping / DNS Record / Push / Steam Game Server / Docker Containers</li> <li>Fancy, Reactive, Fast UI/UX</li> <li>Notifications via Telegram, Discord, Gotify, Slack, Pushover, Email (SMTP), and 90+ notification services, click here for the full list</li> <li>20-second intervals</li> <li>Multi Languages</li> <li>Multiple status pages</li> <li>Map status pages to specific domains</li> <li>Ping chart</li> <li>Certificate info</li> <li>Proxy support</li> <li>2FA support</li> </ul> Uptime Kuma remove:<pre><code>armbian-config --cmd UPK002\n</code></pre> Uptime Kuma purge with data folder:<pre><code>armbian-config --cmd UPK003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#console-network-tools-for-measuring-load-and-bandwidth","title":"Console network tools for measuring load and bandwidth","text":"<p>Edit: footer header </p>"},{"location":"User-Guide_Armbian-Software/Software/#avahi-daemon","title":"avahi-daemon","text":"<p>avahi-daemon hostname broadcast via mDNS</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd AVH001</code></pre> avahi-daemon remove:<pre><code>armbian-config --cmd AVH002\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#iperf3","title":"iperf3","text":"<p>iperf3 bandwidth measuring tool</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd IPR001</code></pre> iperf3 remove:<pre><code>armbian-config --cmd IPR002\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#iptraf-ng","title":"iptraf-ng","text":"<p>iptraf-ng IP LAN monitor</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd IPT001</code></pre> iptraf-ng remove:<pre><code>armbian-config --cmd IPT002\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#nload","title":"nload","text":"<p>nload - realtime console network usage monitor</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd NLD001</code></pre> nload - remove:<pre><code>armbian-config --cmd NLD002\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#tools-for-printing-and-3d-printing","title":"Tools for printing and 3D printing","text":"<p>Edit: footer header </p>"},{"location":"User-Guide_Armbian-Software/Software/#octoprint","title":"OctoPrint","text":"<p>OctoPrint web-based 3D printers management tool</p> <p></p> <p>OctoPrint is an open source 3D printer controller application, which provides a web interface for the connected printers. It displays printers status and key parameters and allows user to schedule prints and remotely control the printer.</p> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd OCT001</code></pre> Access to the web interfaceDirectoriesView logs <p>The web interface is accessible via port 7981:</p> <ul> <li>URL: <code>https://&lt;your.IP&gt;:7981</code></li> </ul> <ul> <li>Install directory: <code>/armbian/octoprint</code></li> </ul> Bash<pre><code>docker logs -f octoprint\n</code></pre> OctoPrint remove:<pre><code>armbian-config --cmd OCT002\n</code></pre> OctoPrint purge with data folder:<pre><code>armbian-config --cmd OCT003\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#virtual-private-network-tools","title":"Virtual Private Network tools","text":"<p>Edit: footer header </p>"},{"location":"User-Guide_Armbian-Software/Software/#wireguard","title":"WireGuard","text":"<p>WireGuard VPN client / server</p> <p></p> <p>WireGuard is an extremely simple yet fast and modern VPN that utilizes state-of-the-art cryptography. It aims to be faster, simpler, leaner, and more useful than IPsec, while avoiding the massive headache. It intends to be considerably more performant than OpenVPN. WireGuard is designed as a general purpose VPN for running on embedded interfaces and super computers alike, fit for many different circumstances. Initially released for the Linux kernel, it is now cross-platform (Windows, macOS, BSD, iOS, Android) and widely deployable. Regarded as the most secure, easiest to use, and simplest VPN solution in the industry.</p> <p>Edit: footer header Status: Enabled Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd WRG001</code></pre> Access to the server from internetDirectoriesView logs <p>Remember to open/forward the port 51820 (UDP) through NAT on your router.</p> <ul> <li>Install directory: <code>/armbian/wireguard</code></li> <li>Site configuration directory: <code>/armbian/wireguard/config</code></li> </ul> Bash<pre><code>docker logs -f wireguard\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#install-server-and-enable-private-network-on-a-client","title":"Install server and enable private network on a client","text":"<ol> <li>Install Wireguard server</li> <li>It will asks you for peer keywords. It will make a profile for each peer</li> <li>Download client to your PC, server or mobile phone. Scan OR code or copy credentials to the client.</li> </ol> <p>Enjoy private network! Its that easy.</p> <p>More informations:</p> <p>https://docs.linuxserver.io/images/docker-wireguard/</p> WireGuard remove:<pre><code>armbian-config --cmd WRG002\n</code></pre> WireGuard clients QR codes:<pre><code>armbian-config --cmd WRG003\n</code></pre> WireGuard purge with data folder:<pre><code>armbian-config --cmd WRG004\n</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#zerotier","title":"ZeroTier","text":"<p>ZeroTier connect devices over your own private network in the world.</p> <p></p> <p>Edit: footer header Status: Stable  </p> <pre><code>armbian-config --cmd ZTR001</code></pre>"},{"location":"User-Guide_Armbian-Software/Software/#web-server-lemp-reverse-proxy-lets-encrypt-ssl","title":"Web server, LEMP, reverse proxy, Let\u2019s Encrypt SSL","text":"<p>Edit: footer header </p>"},{"location":"User-Guide_Armbian-Software/Software/#swag","title":"SWAG","text":"<p>SWAG reverse proxy</p> <p></p> <p>SWAG - Secure Web Application Gateway sets up an Nginx webserver and reverse proxy with php support and a built-in certbot client that automates free SSL server certificate generation and renewal processes (Let\u2019s Encrypt). It also contains fail2ban for intrusion prevention.</p> <p>After entering required information, your server will have auto updating SSL secured website! To this website you can attach several services, for example: https://my.server.com/netdata will run Netdata instance.</p> RequirementsDirectoriesAdvanced setup <ul> <li>this computer port 80 and 443 must be open to the internet</li> <li>your domain name (myserver.mydomain.com) DNS server should point to your router WAN address</li> <li>make sure to set additional .htpasswd username and password as you don\u2019t want to expose your services without password</li> </ul> <ul> <li>Config directory: <code>/armbian/swag/config/</code></li> <li>Website root folder: <code>/armbian/swag/config/www/</code></li> <li>Reverse proxy configuration samples: <code>/armbian/swag/config/nginx/proxy-confs/</code></li> </ul> <ul> <li>Please follow this comprehensive guide: linuxserver/docker-swag</li> </ul> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd SWAG01</code></pre> SWAG reverse proxy .htpasswd set:<pre><code>armbian-config --cmd SWAG02\n</code></pre> SWAG remove:<pre><code>armbian-config --cmd SWAG03\n</code></pre> SWAG purge with data folder:<pre><code>armbian-config --cmd SWAG04\n</code></pre>"},{"location":"User-Guide_Armbian-Software/VPN/","title":"Virtual Private Network tools","text":""},{"location":"User-Guide_Armbian-Software/VPN/#wireguard","title":"WireGuard","text":"<p>WireGuard VPN client / server</p> <p></p> <p>WireGuard is an extremely simple yet fast and modern VPN that utilizes state-of-the-art cryptography. It aims to be faster, simpler, leaner, and more useful than IPsec, while avoiding the massive headache. It intends to be considerably more performant than OpenVPN. WireGuard is designed as a general purpose VPN for running on embedded interfaces and super computers alike, fit for many different circumstances. Initially released for the Linux kernel, it is now cross-platform (Windows, macOS, BSD, iOS, Android) and widely deployable. Regarded as the most secure, easiest to use, and simplest VPN solution in the industry.</p> <p>Edit: footer header Status: Enabled Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd WRG001</code></pre> Access to the server from internetDirectoriesView logs <p>Remember to open/forward the port 51820 (UDP) through NAT on your router.</p> <ul> <li>Install directory: <code>/armbian/wireguard</code></li> <li>Site configuration directory: <code>/armbian/wireguard/config</code></li> </ul> Bash<pre><code>docker logs -f wireguard\n</code></pre>"},{"location":"User-Guide_Armbian-Software/VPN/#install-server-and-enable-private-network-on-a-client","title":"Install server and enable private network on a client","text":"<ol> <li>Install Wireguard server</li> <li>It will asks you for peer keywords. It will make a profile for each peer</li> <li>Download client to your PC, server or mobile phone. Scan OR code or copy credentials to the client.</li> </ol> <p>Enjoy private network! Its that easy.</p> <p>More informations:</p> <p>https://docs.linuxserver.io/images/docker-wireguard/</p> WireGuard remove:<pre><code>armbian-config --cmd WRG002\n</code></pre> WireGuard clients QR codes:<pre><code>armbian-config --cmd WRG003\n</code></pre> WireGuard purge with data folder:<pre><code>armbian-config --cmd WRG004\n</code></pre>"},{"location":"User-Guide_Armbian-Software/VPN/#zerotier","title":"ZeroTier","text":"<p>ZeroTier connect devices over your own private network in the world.</p> <p></p> <p>Edit: footer header Status: Stable  </p> <pre><code>armbian-config --cmd ZTR001</code></pre>"},{"location":"User-Guide_Armbian-Software/WebHosting/","title":"Web server, LEMP, reverse proxy, Let\u2019s Encrypt SSL","text":""},{"location":"User-Guide_Armbian-Software/WebHosting/#swag","title":"SWAG","text":"<p>SWAG reverse proxy</p> <p></p> <p>SWAG - Secure Web Application Gateway sets up an Nginx webserver and reverse proxy with php support and a built-in certbot client that automates free SSL server certificate generation and renewal processes (Let\u2019s Encrypt). It also contains fail2ban for intrusion prevention.</p> <p>After entering required information, your server will have auto updating SSL secured website! To this website you can attach several services, for example: https://my.server.com/netdata will run Netdata instance.</p> RequirementsDirectoriesAdvanced setup <ul> <li>this computer port 80 and 443 must be open to the internet</li> <li>your domain name (myserver.mydomain.com) DNS server should point to your router WAN address</li> <li>make sure to set additional .htpasswd username and password as you don\u2019t want to expose your services without password</li> </ul> <ul> <li>Config directory: <code>/armbian/swag/config/</code></li> <li>Website root folder: <code>/armbian/swag/config/www/</code></li> <li>Reverse proxy configuration samples: <code>/armbian/swag/config/nginx/proxy-confs/</code></li> </ul> <ul> <li>Please follow this comprehensive guide: linuxserver/docker-swag</li> </ul> <p>Edit: footer header Status: Stable Architecture: x86-64 arm64 Maintainer: @igorpecovnik Documentation: Link </p> <pre><code>armbian-config --cmd SWAG01</code></pre> SWAG reverse proxy .htpasswd set:<pre><code>armbian-config --cmd SWAG02\n</code></pre> SWAG remove:<pre><code>armbian-config --cmd SWAG03\n</code></pre> SWAG purge with data folder:<pre><code>armbian-config --cmd SWAG04\n</code></pre>"}]}